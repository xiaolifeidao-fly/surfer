"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/keycon";
exports.ids = ["vendor-chunks/keycon"];
exports.modules = {

/***/ "(ssr)/./node_modules/keycon/dist/keycon.esm.js":
/*!************************************************!*\
  !*** ./node_modules/keycon/dist/keycon.esm.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   REACTIVE: () => (/* binding */ REACTIVE),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getArrangeCombi: () => (/* binding */ getArrangeCombi),\n/* harmony export */   getCombi: () => (/* binding */ getCombi),\n/* harmony export */   getKey: () => (/* binding */ getKey),\n/* harmony export */   getModifierCombi: () => (/* binding */ getModifierCombi)\n/* harmony export */ });\n/* harmony import */ var _scena_event_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @scena/event-emitter */ \"(ssr)/./node_modules/@scena/event-emitter/dist/event-emitter.esm.js\");\n/* harmony import */ var _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @daybrush/utils */ \"(ssr)/./node_modules/@daybrush/utils/dist/utils.esm.js\");\n/*\nCopyright (c) Daybrush\nname: keycon\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/keycon.git\nversion: 1.4.0\n*/\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar keycode = createCommonjsModule(function (module, exports) {\n// Source: http://jsfiddle.net/vWx8V/\n// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes\n\n/**\n * Conenience method returns corresponding value for given keyName or keyCode.\n *\n * @param {Mixed} keyCode {Number} or keyName {String}\n * @return {Mixed}\n * @api public\n */\n\nfunction keyCode(searchInput) {\n  // Keyboard Events\n  if (searchInput && 'object' === typeof searchInput) {\n    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;\n    if (hasKeyCode) searchInput = hasKeyCode;\n  }\n\n  // Numbers\n  if ('number' === typeof searchInput) return names[searchInput]\n\n  // Everything else (cast to string)\n  var search = String(searchInput);\n\n  // check codes\n  var foundNamedKey = codes[search.toLowerCase()];\n  if (foundNamedKey) return foundNamedKey\n\n  // check aliases\n  var foundNamedKey = aliases[search.toLowerCase()];\n  if (foundNamedKey) return foundNamedKey\n\n  // weird character?\n  if (search.length === 1) return search.charCodeAt(0)\n\n  return undefined\n}\n\n/**\n * Compares a keyboard event with a given keyCode or keyName.\n *\n * @param {Event} event Keyboard event that should be tested\n * @param {Mixed} keyCode {Number} or keyName {String}\n * @return {Boolean}\n * @api public\n */\nkeyCode.isEventKey = function isEventKey(event, nameOrCode) {\n  if (event && 'object' === typeof event) {\n    var keyCode = event.which || event.keyCode || event.charCode;\n    if (keyCode === null || keyCode === undefined) { return false; }\n    if (typeof nameOrCode === 'string') {\n      // check codes\n      var foundNamedKey = codes[nameOrCode.toLowerCase()];\n      if (foundNamedKey) { return foundNamedKey === keyCode; }\n    \n      // check aliases\n      var foundNamedKey = aliases[nameOrCode.toLowerCase()];\n      if (foundNamedKey) { return foundNamedKey === keyCode; }\n    } else if (typeof nameOrCode === 'number') {\n      return nameOrCode === keyCode;\n    }\n    return false;\n  }\n};\n\nexports = module.exports = keyCode;\n\n/**\n * Get by name\n *\n *   exports.code['enter'] // => 13\n */\n\nvar codes = exports.code = exports.codes = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'ctrl': 17,\n  'alt': 18,\n  'pause/break': 19,\n  'caps lock': 20,\n  'esc': 27,\n  'space': 32,\n  'page up': 33,\n  'page down': 34,\n  'end': 35,\n  'home': 36,\n  'left': 37,\n  'up': 38,\n  'right': 39,\n  'down': 40,\n  'insert': 45,\n  'delete': 46,\n  'command': 91,\n  'left command': 91,\n  'right command': 93,\n  'numpad *': 106,\n  'numpad +': 107,\n  'numpad -': 109,\n  'numpad .': 110,\n  'numpad /': 111,\n  'num lock': 144,\n  'scroll lock': 145,\n  'my computer': 182,\n  'my calculator': 183,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222\n};\n\n// Helper aliases\n\nvar aliases = exports.aliases = {\n  'windows': 91,\n  '⇧': 16,\n  '⌥': 18,\n  '⌃': 17,\n  '⌘': 91,\n  'ctl': 17,\n  'control': 17,\n  'option': 18,\n  'pause': 19,\n  'break': 19,\n  'caps': 20,\n  'return': 13,\n  'escape': 27,\n  'spc': 32,\n  'spacebar': 32,\n  'pgup': 33,\n  'pgdn': 34,\n  'ins': 45,\n  'del': 46,\n  'cmd': 91\n};\n\n/*!\n * Programatically add the following\n */\n\n// lower case chars\nfor (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32;\n\n// numbers\nfor (var i = 48; i < 58; i++) codes[i - 48] = i;\n\n// function keys\nfor (i = 1; i < 13; i++) codes['f'+i] = i + 111;\n\n// numpad keys\nfor (i = 0; i < 10; i++) codes['numpad '+i] = i + 96;\n\n/**\n * Get by code\n *\n *   exports.name[13] // => 'Enter'\n */\n\nvar names = exports.names = exports.title = {}; // title for backward compat\n\n// Create reverse mapping\nfor (i in codes) names[codes[i]] = i;\n\n// Add aliases\nfor (var alias in aliases) {\n  codes[alias] = aliases[alias];\n}\n});\nvar keycode_1 = keycode.code;\nvar keycode_2 = keycode.codes;\nvar keycode_3 = keycode.aliases;\nvar keycode_4 = keycode.names;\nvar keycode_5 = keycode.title;\n\nvar codeData = {\n  \"+\": \"plus\",\n  \"left command\": \"meta\",\n  \"right command\": \"meta\"\n};\nvar keysSort = {\n  shift: 1,\n  ctrl: 2,\n  alt: 3,\n  meta: 4\n};\n/**\n * @memberof KeyController\n */\nfunction getKey(keyCode, keyName) {\n  var key = (keycode_4[keyCode] || keyName || \"\").toLowerCase();\n  for (var name in codeData) {\n    key = key.replace(name, codeData[name]);\n  }\n  return key.replace(/\\s/g, \"\");\n}\n/**\n * @memberof KeyController\n */\nfunction getCombi(e, key) {\n  if (key === void 0) {\n    key = getKey(e.keyCode, e.key);\n  }\n  var keys = getModifierCombi(e);\n  keys.indexOf(key) === -1 && keys.push(key);\n  return keys.filter(Boolean);\n}\n/**\n * @memberof KeyController\n */\nfunction getModifierCombi(e) {\n  var keys = [e.shiftKey && \"shift\", e.ctrlKey && \"ctrl\", e.altKey && \"alt\", e.metaKey && \"meta\"];\n  return keys.filter(Boolean);\n}\n/**\n * @memberof KeyController\n */\nfunction getArrangeCombi(keys) {\n  var arrangeKeys = keys.slice();\n  arrangeKeys.sort(function (prev, next) {\n    var prevScore = keysSort[prev] || 5;\n    var nextScore = keysSort[next] || 5;\n    return prevScore - nextScore;\n  });\n  return arrangeKeys;\n}\n\nvar globalKeyController;\n/**\n */\nvar KeyController = /*#__PURE__*/function (_super) {\n  __extends(KeyController, _super);\n  /**\n   *\n   */\n  function KeyController(container) {\n    if (container === void 0) {\n      container = window;\n    }\n    var _this = _super.call(this) || this;\n    _this.container = container;\n    /**\n     */\n    _this.ctrlKey = false;\n    /**\n     */\n    _this.altKey = false;\n    /**\n     *\n     */\n    _this.shiftKey = false;\n    /**\n     *\n     */\n    _this.metaKey = false;\n    _this.clear = function () {\n      _this.ctrlKey = false;\n      _this.altKey = false;\n      _this.shiftKey = false;\n      _this.metaKey = false;\n      return _this;\n    };\n    _this.keydownEvent = function (e) {\n      _this.triggerEvent(\"keydown\", e);\n    };\n    _this.keyupEvent = function (e) {\n      _this.triggerEvent(\"keyup\", e);\n    };\n    _this.blur = function () {\n      _this.clear();\n      _this.trigger(\"blur\");\n    };\n    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.addEvent)(container, \"blur\", _this.blur);\n    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.addEvent)(container, \"keydown\", _this.keydownEvent);\n    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.addEvent)(container, \"keyup\", _this.keyupEvent);\n    return _this;\n  }\n  var __proto = KeyController.prototype;\n  Object.defineProperty(KeyController, \"global\", {\n    /**\n     */\n    get: function () {\n      return globalKeyController || (globalKeyController = new KeyController());\n    },\n    enumerable: false,\n    configurable: true\n  });\n  KeyController.setGlobal = function () {\n    return this.global;\n  };\n  /**\n   *\n   */\n  __proto.destroy = function () {\n    var container = this.container;\n    this.clear();\n    this.off();\n    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.removeEvent)(container, \"blur\", this.blur);\n    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.removeEvent)(container, \"keydown\", this.keydownEvent);\n    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.removeEvent)(container, \"keyup\", this.keyupEvent);\n  };\n  /**\n   *\n   */\n  __proto.keydown = function (comb, callback) {\n    return this.addEvent(\"keydown\", comb, callback);\n  };\n  /**\n   *\n   */\n  __proto.offKeydown = function (comb, callback) {\n    return this.removeEvent(\"keydown\", comb, callback);\n  };\n  /**\n   *\n   */\n  __proto.offKeyup = function (comb, callback) {\n    return this.removeEvent(\"keyup\", comb, callback);\n  };\n  /**\n   *\n   */\n  __proto.keyup = function (comb, callback) {\n    return this.addEvent(\"keyup\", comb, callback);\n  };\n  __proto.addEvent = function (type, comb, callback) {\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(comb)) {\n      this.on(\"\".concat(type, \".\").concat(getArrangeCombi(comb).join(\".\")), callback);\n    } else if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(comb)) {\n      this.on(\"\".concat(type, \".\").concat(comb), callback);\n    } else {\n      this.on(type, comb);\n    }\n    return this;\n  };\n  __proto.removeEvent = function (type, comb, callback) {\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(comb)) {\n      this.off(\"\".concat(type, \".\").concat(getArrangeCombi(comb).join(\".\")), callback);\n    } else if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(comb)) {\n      this.off(\"\".concat(type, \".\").concat(comb), callback);\n    } else {\n      this.off(type, comb);\n    }\n    return this;\n  };\n  __proto.triggerEvent = function (type, e) {\n    this.ctrlKey = e.ctrlKey;\n    this.shiftKey = e.shiftKey;\n    this.altKey = e.altKey;\n    this.metaKey = e.metaKey;\n    var key = getKey(e.keyCode, e.key);\n    var isToggle = key === \"ctrl\" || key === \"shift\" || key === \"meta\" || key === \"alt\";\n    var param = {\n      key: key,\n      isToggle: isToggle,\n      inputEvent: e,\n      keyCode: e.keyCode,\n      ctrlKey: e.ctrlKey,\n      altKey: e.altKey,\n      shiftKey: e.shiftKey,\n      metaKey: e.metaKey\n    };\n    this.trigger(type, param);\n    this.trigger(\"\".concat(type, \".\").concat(key), param);\n    var combi = getCombi(e, key);\n    combi.length > 1 && this.trigger(\"\".concat(type, \".\").concat(combi.join(\".\")), param);\n  };\n  return KeyController;\n}(_scena_event_emitter__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n/*\nCopyright (c) NAVER Corp.\nname: @egjs/component\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-component\nversion: 3.0.2\n*/\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n}\n\n/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nvar isUndefined = function (value) {\n  return typeof value === \"undefined\";\n};\n\n/**\n * Event class to provide additional properties\n * @ko Component에서 추가적인 프로퍼티를 제공하는 이벤트 클래스\n */\n\nvar ComponentEvent =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a new instance of ComponentEvent.\n   * @ko ComponentEvent의 새로운 인스턴스를 생성한다.\n   * @param eventType The name of the event.<ko>이벤트 이름.</ko>\n   * @param props An object that contains additional event properties.<ko>추가적인 이벤트 프로퍼티 오브젝트.</ko>\n   */\n  function ComponentEvent(eventType, props) {\n    var e_1, _a;\n\n    this._canceled = false;\n\n    if (props) {\n      try {\n        for (var _b = __values(Object.keys(props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n          this[key] = props[key];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    this.eventType = eventType;\n  }\n  /**\n   * Stop the event. {@link ComponentEvent#isCanceled} will return `true` after.\n   * @ko 이벤트를 중단한다. 이후 {@link ComponentEvent#isCanceled}가 `true`를 반환한다.\n   */\n\n\n  var __proto = ComponentEvent.prototype;\n\n  __proto.stop = function () {\n    this._canceled = true;\n  };\n  /**\n   * Returns a boolean value that indicates whether {@link ComponentEvent#stop} is called before.\n   * @ko {@link ComponentEvent#stop}이 호출되었는지 여부를 반환한다.\n   * @return {boolean} A boolean value that indicates whether {@link ComponentEvent#stop} is called before.<ko>이전에 {@link ComponentEvent#stop}이 불려졌는지 여부를 반환한다.</ko>\n   */\n\n\n  __proto.isCanceled = function () {\n    return this._canceled;\n  };\n\n  return ComponentEvent;\n}();\n\n/**\n * A class used to manage events in a component\n * @ko 컴포넌트의 이벤트을 관리할 수 있게 하는 클래스\n */\n\nvar Component =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @support {\"ie\": \"7+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.1+ (except 3.x)\"}\n   */\n  function Component() {\n    this._eventHandler = {};\n  }\n  /**\n   * Trigger a custom event.\n   * @ko 커스텀 이벤트를 발생시킨다\n   * @param {string | ComponentEvent} event The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>\n   * @param {any[]} params Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n   *   hi: { foo: { a: number; b: boolean } };\n   *   someEvent: (foo: number, bar: string) => void;\n   *   someOtherEvent: void; // When there's no event argument\n   * }> {\n   *   some(){\n   *     if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n   *       this.trigger(\"hi\");// fire hi event.\n   *     }\n   *   }\n   * }\n   *\n   * const some = new Some();\n   * some.on(\"beforeHi\", e => {\n   *   if(condition){\n   *     e.stop(); // When event call to stop, `hi` event not call.\n   *   }\n   *   // `currentTarget` is component instance.\n   *   console.log(some === e.currentTarget); // true\n   *\n   *   typeof e.foo; // number\n   *   typeof e.bar; // string\n   * });\n   * some.on(\"hi\", e => {\n   *   typeof e.foo.b; // boolean\n   * });\n   * // If you want to more know event design. You can see article.\n   * // https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n   * ```\n   */\n\n\n  var __proto = Component.prototype;\n\n  __proto.trigger = function (event) {\n    var params = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      params[_i - 1] = arguments[_i];\n    }\n\n    var eventName = event instanceof ComponentEvent ? event.eventType : event;\n\n    var handlers = __spread(this._eventHandler[eventName] || []);\n\n    if (handlers.length <= 0) {\n      return this;\n    }\n\n    if (event instanceof ComponentEvent) {\n      event.currentTarget = this;\n      handlers.forEach(function (handler) {\n        handler(event);\n      });\n    } else {\n      handlers.forEach(function (handler) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        handler.apply(void 0, __spread(params));\n      });\n    }\n\n    return this;\n  };\n  /**\n   * Executed event just one time.\n   * @ko 이벤트가 한번만 실행된다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: ComponentEvent;\n   * }> {\n   *   hi() {\n   *     alert(\"hi\");\n   *   }\n   *   thing() {\n   *     this.once(\"hi\", this.hi);\n   *   }\n   * }\n   *\n   * var some = new Some();\n   * some.thing();\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // fire alert(\"hi\");\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // Nothing happens\n   * ```\n   */\n\n\n  __proto.once = function (eventName, handlerToAttach) {\n    var _this = this;\n\n    if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n      var eventHash = eventName;\n\n      for (var key in eventHash) {\n        this.once(key, eventHash[key]);\n      }\n\n      return this;\n    } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n      var listener_1 = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        } // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\n\n        handlerToAttach.apply(void 0, __spread(args));\n\n        _this.off(eventName, listener_1);\n      };\n\n      this.on(eventName, listener_1);\n    }\n\n    return this;\n  };\n  /**\n   * Checks whether an event has been attached to a component.\n   * @ko 컴포넌트에 이벤트가 등록됐는지 확인한다.\n   * @param {string} eventName The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>\n   * @return {boolean} Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>\n   * @example\n   * ```ts\n   * import Component from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   some() {\n   *     this.hasOn(\"hi\");// check hi event.\n   *   }\n   * }\n   * ```\n   */\n\n\n  __proto.hasOn = function (eventName) {\n    return !!this._eventHandler[eventName];\n  };\n  /**\n   * Attaches an event to a component.\n   * @ko 컴포넌트에 이벤트를 등록한다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.on(\"hi\",this.hi); //attach event\n   *   }\n   * }\n   * ```\n   */\n\n\n  __proto.on = function (eventName, handlerToAttach) {\n    if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n      var eventHash = eventName;\n\n      for (var name in eventHash) {\n        this.on(name, eventHash[name]);\n      }\n\n      return this;\n    } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n      var handlerList = this._eventHandler[eventName];\n\n      if (isUndefined(handlerList)) {\n        this._eventHandler[eventName] = [];\n        handlerList = this._eventHandler[eventName];\n      }\n\n      handlerList.push(handlerToAttach);\n    }\n\n    return this;\n  };\n  /**\n   * Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.\n   * @ko 컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.\n   * @param {string?} eventName The name of the event to be detached <ko>해제할 이벤트의 이름</ko>\n   * @param {function?} handlerToDetach The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.off(\"hi\",this.hi); //detach event\n   *   }\n   * }\n   * ```\n   */\n\n\n  __proto.off = function (eventName, handlerToDetach) {\n    var e_1, _a; // Detach all event handlers.\n\n\n    if (isUndefined(eventName)) {\n      this._eventHandler = {};\n      return this;\n    } // Detach all handlers for eventname or detach event handlers by object.\n\n\n    if (isUndefined(handlerToDetach)) {\n      if (typeof eventName === \"string\") {\n        delete this._eventHandler[eventName];\n        return this;\n      } else {\n        var eventHash = eventName;\n\n        for (var name in eventHash) {\n          this.off(name, eventHash[name]);\n        }\n\n        return this;\n      }\n    } // Detach single event handler\n\n\n    var handlerList = this._eventHandler[eventName];\n\n    if (handlerList) {\n      var idx = 0;\n\n      try {\n        for (var handlerList_1 = __values(handlerList), handlerList_1_1 = handlerList_1.next(); !handlerList_1_1.done; handlerList_1_1 = handlerList_1.next()) {\n          var handlerFunction = handlerList_1_1.value;\n\n          if (handlerFunction === handlerToDetach) {\n            handlerList.splice(idx, 1);\n\n            if (handlerList.length <= 0) {\n              delete this._eventHandler[eventName];\n            }\n\n            break;\n          }\n\n          idx++;\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (handlerList_1_1 && !handlerList_1_1.done && (_a = handlerList_1.return)) _a.call(handlerList_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @name VERSION\n   * @static\n   * @example\n   * Component.VERSION;  // ex) 3.0.0\n   * @memberof Component\n   */\n\n\n  Component.VERSION = \"3.0.2\";\n  return Component;\n}();\n\n/*\nCopyright (c) NAVER Crop.\nname: @cfcs/core\nlicense: MIT\nauthor: NAVER Crop.\nrepository: https://github.com/naver/cfcs\nversion: 0.0.6\n*/\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nfunction keys(obj) {\n  return Object.keys(obj);\n}\nfunction isObject(val) {\n  return typeof val === \"object\";\n}\nfunction isFunction(val) {\n  return typeof val === \"function\";\n}\n\nvar OBSERVERS_PATH = \"__observers__\";\n\nvar Observer =\n/*#__PURE__*/\nfunction () {\n  function Observer(value) {\n    this._emitter = new Component();\n    this._current = value;\n  }\n\n  var __proto = Observer.prototype;\n  Object.defineProperty(__proto, \"current\", {\n    get: function () {\n      return this._current;\n    },\n    set: function (value) {\n      var isUpdate = value !== this._current;\n      this._current = value;\n\n      if (isUpdate) {\n        this._emitter.trigger(\"update\", value);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  __proto.subscribe = function (callback) {\n    this._emitter.on(\"update\", callback);\n  };\n\n  __proto.unsubscribe = function (callback) {\n    this._emitter.off(\"update\", callback);\n  };\n\n  return Observer;\n}();\nfunction observe(defaultValue) {\n  return new Observer(defaultValue);\n}\nfunction defineObservers(instance) {\n  var observers = {};\n  Object.defineProperty(instance, OBSERVERS_PATH, {\n    get: function () {\n      return observers;\n    }\n  });\n  return observers;\n}\nfunction getObservers(instance) {\n  if (!instance[OBSERVERS_PATH]) {\n    defineObservers(instance);\n  }\n\n  return instance[OBSERVERS_PATH];\n}\nfunction getObserver(instance, name, defaultValue) {\n  var observers = getObservers(instance);\n\n  if (!observers[name]) {\n    observers[name] = observe(defaultValue);\n  }\n\n  return observers[name];\n}\nfunction setObserver(instance, name, observer) {\n  var observers = getObservers(instance);\n  observers[name] = observer;\n}\nfunction isObserver(val) {\n  return val && isObject(val) && \"current\" in val && \"subscribe\" in val && \"unsubscribe\" in val;\n}\n\nfunction Reactive(name) {\n  return function (prototype, memberName) {\n    var publicName = name || memberName;\n    Object.defineProperty(prototype, memberName, {\n      get: function () {\n        return getObserver(this, publicName).current;\n      },\n      set: function (value) {\n        getObserver(this, publicName, value).current = value;\n      }\n    });\n\n    if (publicName !== memberName) {\n      Object.defineProperty(prototype, publicName, {\n        get: function () {\n          return getObserver(this, publicName).current;\n        }\n      });\n    }\n  };\n}\n\nfunction injectReactiveSubscribe(object) {\n  object[\"subscribe\"] = function (name, callback) {\n    getObserver(this, name).subscribe(callback);\n  };\n\n  object[\"unsubscribe\"] = function (name, callback) {\n    var _this = this;\n\n    if (!name) {\n      keys(getObservers(this)).forEach(function (observerName) {\n        _this.unsubscribe(observerName);\n      });\n      return;\n    }\n\n    if (!(name in this)) {\n      return;\n    }\n\n    getObserver(this, name).unsubscribe(callback);\n  };\n}\n\nfunction reactive(setup) {\n  var result = isFunction(setup) ? setup() : setup;\n  var reactiveObject = {};\n  defineObservers(reactiveObject);\n  keys(result).forEach(function (name) {\n    var value = result[name];\n\n    if (isObserver(value)) {\n      setObserver(reactiveObject, name, value);\n      Reactive(name)(reactiveObject, name);\n    } else {\n      reactiveObject[name] = value;\n    }\n  });\n  injectReactiveSubscribe(reactiveObject);\n  return reactiveObject;\n}\n\nvar instanceMap;\nvar REACTIVE = {\n  events: [\"keydown\", \"keyup\", \"blur\"],\n  state: {\n    isKeydown: false\n  },\n  mounted: function (data) {\n    var _a, _b;\n    if (!instanceMap) {\n      instanceMap = new Map();\n    }\n    var element = (_b = (_a = data.ref) === null || _a === void 0 ? void 0 : _a.current) !== null && _b !== void 0 ? _b : window;\n    var info = instanceMap.get(element);\n    if (!info) {\n      info = {\n        inst: new KeyController(element),\n        count: 0\n      };\n      instanceMap.set(element, info);\n    }\n    ++info.count;\n    var keycon = info.inst;\n    var keys = data.keys;\n    var isKeydown = observe(false);\n    var checker = data.checker;\n    keycon.keydown(keys, function (e) {\n      if (!checker || checker(e)) {\n        isKeydown.current = true;\n      }\n    });\n    keycon.keyup(keys, function () {\n      isKeydown.current = false;\n    });\n    keycon.on(\"blur\", function () {\n      isKeydown.current = false;\n    });\n    return reactive({\n      inst: keycon,\n      keys: keys,\n      destroy: function () {\n        return keycon.destroy();\n      },\n      isKeydown: isKeydown\n    });\n  },\n  destroy: function (_a) {\n    var inst = _a.inst;\n    var element = inst.container;\n    var info = instanceMap.get(element);\n    --info.count;\n    if (!info.count) {\n      inst.destroy();\n      instanceMap.delete(element);\n    }\n  },\n  on: function (inst, name, callback) {\n    var keycon = inst.inst;\n    if (name === \"keydown\") {\n      keycon.keydown(inst.keys, callback);\n    } else if (name === \"keyup\") {\n      keycon.keyup(inst.keys, callback);\n    } else {\n      keycon.on(name, callback);\n    }\n  },\n  off: function (inst, name, callback) {\n    var keycon = inst.inst;\n    if (name === \"keydown\") {\n      keycon.offKeydown(inst.keys, callback);\n    } else if (name === \"keyup\") {\n      keycon.offKeyup(inst.keys, callback);\n    } else {\n      keycon.off(name, callback);\n    }\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (KeyController);\n\n//# sourceMappingURL=keycon.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/keycon/dist/keycon.esm.js\n");

/***/ })

};
;