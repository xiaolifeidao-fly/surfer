"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@daybrush";
exports.ids = ["vendor-chunks/@daybrush"];
exports.modules = {

/***/ "(ssr)/./node_modules/@daybrush/utils/dist/utils.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@daybrush/utils/dist/utils.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ $),\n/* harmony export */   ANIMATION: () => (/* binding */ ANIMATION),\n/* harmony export */   ARRAY: () => (/* binding */ ARRAY),\n/* harmony export */   COLOR_MODELS: () => (/* binding */ COLOR_MODELS),\n/* harmony export */   DEFAULT_UNIT_PRESETS: () => (/* binding */ DEFAULT_UNIT_PRESETS),\n/* harmony export */   FILTER: () => (/* binding */ FILTER),\n/* harmony export */   FUNCTION: () => (/* binding */ FUNCTION),\n/* harmony export */   HSL: () => (/* binding */ HSL),\n/* harmony export */   HSLA: () => (/* binding */ HSLA),\n/* harmony export */   IS_WINDOW: () => (/* binding */ IS_WINDOW),\n/* harmony export */   KEYFRAMES: () => (/* binding */ KEYFRAMES),\n/* harmony export */   NUMBER: () => (/* binding */ NUMBER),\n/* harmony export */   OBJECT: () => (/* binding */ OBJECT),\n/* harmony export */   OPEN_CLOSED_CHARACTERS: () => (/* binding */ OPEN_CLOSED_CHARACTERS),\n/* harmony export */   PROPERTY: () => (/* binding */ PROPERTY),\n/* harmony export */   REVERSE_TINY_NUM: () => (/* binding */ REVERSE_TINY_NUM),\n/* harmony export */   RGB: () => (/* binding */ RGB),\n/* harmony export */   RGBA: () => (/* binding */ RGBA),\n/* harmony export */   STRING: () => (/* binding */ STRING),\n/* harmony export */   TINY_NUM: () => (/* binding */ TINY_NUM),\n/* harmony export */   TRANSFORM: () => (/* binding */ TRANSFORM),\n/* harmony export */   UNDEFINED: () => (/* binding */ UNDEFINED),\n/* harmony export */   addClass: () => (/* binding */ addClass),\n/* harmony export */   addEvent: () => (/* binding */ addEvent),\n/* harmony export */   average: () => (/* binding */ average),\n/* harmony export */   between: () => (/* binding */ between),\n/* harmony export */   calculateBoundSize: () => (/* binding */ calculateBoundSize),\n/* harmony export */   camelize: () => (/* binding */ camelize),\n/* harmony export */   cancelAnimationFrame: () => (/* binding */ cancelAnimationFrame),\n/* harmony export */   checkBoundSize: () => (/* binding */ checkBoundSize),\n/* harmony export */   convertUnitSize: () => (/* binding */ convertUnitSize),\n/* harmony export */   counter: () => (/* binding */ counter),\n/* harmony export */   cutHex: () => (/* binding */ cutHex),\n/* harmony export */   decamelize: () => (/* binding */ decamelize),\n/* harmony export */   deepFlat: () => (/* binding */ deepFlat),\n/* harmony export */   document: () => (/* binding */ doc),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   find: () => (/* binding */ find),\n/* harmony export */   findIndex: () => (/* binding */ findIndex),\n/* harmony export */   findLast: () => (/* binding */ findLast),\n/* harmony export */   findLastIndex: () => (/* binding */ findLastIndex),\n/* harmony export */   flat: () => (/* binding */ flat),\n/* harmony export */   fromCSS: () => (/* binding */ fromCSS),\n/* harmony export */   getCenterPoint: () => (/* binding */ getCenterPoint),\n/* harmony export */   getCrossBrowserProperty: () => (/* binding */ getCrossBrowserProperty),\n/* harmony export */   getDist: () => (/* binding */ getDist),\n/* harmony export */   getDocument: () => (/* binding */ getDocument),\n/* harmony export */   getDocumentBody: () => (/* binding */ getDocumentBody),\n/* harmony export */   getDocumentElement: () => (/* binding */ getDocumentElement),\n/* harmony export */   getEntries: () => (/* binding */ getEntries),\n/* harmony export */   getKeys: () => (/* binding */ getKeys),\n/* harmony export */   getRad: () => (/* binding */ getRad),\n/* harmony export */   getShapeDirection: () => (/* binding */ getShapeDirection),\n/* harmony export */   getValues: () => (/* binding */ getValues),\n/* harmony export */   getWindow: () => (/* binding */ getWindow),\n/* harmony export */   hasClass: () => (/* binding */ hasClass),\n/* harmony export */   hexToRGBA: () => (/* binding */ hexToRGBA),\n/* harmony export */   hslToRGBA: () => (/* binding */ hslToRGBA),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   isWindow: () => (/* binding */ isWindow),\n/* harmony export */   now: () => (/* binding */ now),\n/* harmony export */   pushSet: () => (/* binding */ pushSet),\n/* harmony export */   removeClass: () => (/* binding */ removeClass),\n/* harmony export */   removeEvent: () => (/* binding */ removeEvent),\n/* harmony export */   replaceOnce: () => (/* binding */ replaceOnce),\n/* harmony export */   requestAnimationFrame: () => (/* binding */ requestAnimationFrame),\n/* harmony export */   sortOrders: () => (/* binding */ sortOrders),\n/* harmony export */   splitBracket: () => (/* binding */ splitBracket),\n/* harmony export */   splitComma: () => (/* binding */ splitComma),\n/* harmony export */   splitSpace: () => (/* binding */ splitSpace),\n/* harmony export */   splitText: () => (/* binding */ splitText),\n/* harmony export */   splitUnit: () => (/* binding */ splitUnit),\n/* harmony export */   stringToRGBA: () => (/* binding */ stringToRGBA),\n/* harmony export */   sum: () => (/* binding */ sum),\n/* harmony export */   throttle: () => (/* binding */ throttle),\n/* harmony export */   throttleArray: () => (/* binding */ throttleArray),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   toFullHex: () => (/* binding */ toFullHex)\n/* harmony export */ });\n/*\nCopyright (c) 2018 Daybrush\n@name: @daybrush/utils\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/utils\n@version 1.13.0\n*/\n/**\n* @namespace\n* @name Consts\n*/\n/**\n* get string \"rgb\"\n* @memberof Color\n* @example\nimport {RGB} from \"@daybrush/utils\";\n\nconsole.log(RGB); // \"rgb\"\n*/\nvar RGB = \"rgb\";\n/**\n* get string \"rgba\"\n* @memberof Color\n* @example\nimport {RGBA} from \"@daybrush/utils\";\n\nconsole.log(RGBA); // \"rgba\"\n*/\nvar RGBA = \"rgba\";\n/**\n* get string \"hsl\"\n* @memberof Color\n* @example\nimport {HSL} from \"@daybrush/utils\";\n\nconsole.log(HSL); // \"hsl\"\n*/\nvar HSL = \"hsl\";\n/**\n* get string \"hsla\"\n* @memberof Color\n* @example\nimport {HSLA} from \"@daybrush/utils\";\n\nconsole.log(HSLA); // \"hsla\"\n*/\nvar HSLA = \"hsla\";\n/**\n* gets an array of color models.\n* @memberof Color\n* @example\nimport {COLOR_MODELS} from \"@daybrush/utils\";\n\nconsole.log(COLOR_MODELS); // [\"rgb\", \"rgba\", \"hsl\", \"hsla\"];\n*/\nvar COLOR_MODELS = [RGB, RGBA, HSL, HSLA];\n/**\n* get string \"function\"\n* @memberof Consts\n* @example\nimport {FUNCTION} from \"@daybrush/utils\";\n\nconsole.log(FUNCTION); // \"function\"\n*/\nvar FUNCTION = \"function\";\n/**\n* get string \"property\"\n* @memberof Consts\n* @example\nimport {PROPERTY} from \"@daybrush/utils\";\n\nconsole.log(PROPERTY); // \"property\"\n*/\nvar PROPERTY = \"property\";\n/**\n* get string \"array\"\n* @memberof Consts\n* @example\nimport {ARRAY} from \"@daybrush/utils\";\n\nconsole.log(ARRAY); // \"array\"\n*/\nvar ARRAY = \"array\";\n/**\n* get string \"object\"\n* @memberof Consts\n* @example\nimport {OBJECT} from \"@daybrush/utils\";\n\nconsole.log(OBJECT); // \"object\"\n*/\nvar OBJECT = \"object\";\n/**\n* get string \"string\"\n* @memberof Consts\n* @example\nimport {STRING} from \"@daybrush/utils\";\n\nconsole.log(STRING); // \"string\"\n*/\nvar STRING = \"string\";\n/**\n* get string \"number\"\n* @memberof Consts\n* @example\nimport {NUMBER} from \"@daybrush/utils\";\n\nconsole.log(NUMBER); // \"number\"\n*/\nvar NUMBER = \"number\";\n/**\n* get string \"undefined\"\n* @memberof Consts\n* @example\nimport {UNDEFINED} from \"@daybrush/utils\";\n\nconsole.log(UNDEFINED); // \"undefined\"\n*/\nvar UNDEFINED = \"undefined\";\n/**\n* Check whether the environment is window or node.js.\n* @memberof Consts\n* @example\nimport {IS_WINDOW} from \"@daybrush/utils\";\n\nconsole.log(IS_WINDOW); // false in node.js\nconsole.log(IS_WINDOW); // true in browser\n*/\nvar IS_WINDOW = typeof window !== UNDEFINED;\n/**\n* Check whether the environment is window or node.js.\n* @memberof Consts\n* @name document\n* @example\nimport {IS_WINDOW} from \"@daybrush/utils\";\n\nconsole.log(IS_WINDOW); // false in node.js\nconsole.log(IS_WINDOW); // true in browser\n*/\nvar doc = typeof document !== UNDEFINED && document; // FIXME: this type maybe false\nvar prefixes = [\"webkit\", \"ms\", \"moz\", \"o\"];\n/**\n * @namespace CrossBrowser\n */\n/**\n* Get a CSS property with a vendor prefix that supports cross browser.\n* @function\n* @param {string} property - A CSS property\n* @return {string} CSS property with cross-browser vendor prefix\n* @memberof CrossBrowser\n* @example\nimport {getCrossBrowserProperty} from \"@daybrush/utils\";\n\nconsole.log(getCrossBrowserProperty(\"transform\")); // \"transform\", \"-ms-transform\", \"-webkit-transform\"\nconsole.log(getCrossBrowserProperty(\"filter\")); // \"filter\", \"-webkit-filter\"\n*/\nvar getCrossBrowserProperty = /*#__PURE__*/function (property) {\n  if (!doc) {\n    return \"\";\n  }\n  var styles = (doc.body || doc.documentElement).style;\n  var length = prefixes.length;\n  if (typeof styles[property] !== UNDEFINED) {\n    return property;\n  }\n  for (var i = 0; i < length; ++i) {\n    var name = \"-\" + prefixes[i] + \"-\" + property;\n    if (typeof styles[name] !== UNDEFINED) {\n      return name;\n    }\n  }\n  return \"\";\n};\n/**\n* get string \"transfrom\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {TRANSFORM} from \"@daybrush/utils\";\n\nconsole.log(TRANSFORM); // \"transform\", \"-ms-transform\", \"-webkit-transform\"\n*/\nvar TRANSFORM = /*#__PURE__*/getCrossBrowserProperty(\"transform\");\n/**\n* get string \"filter\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {FILTER} from \"@daybrush/utils\";\n\nconsole.log(FILTER); // \"filter\", \"-ms-filter\", \"-webkit-filter\"\n*/\nvar FILTER = /*#__PURE__*/getCrossBrowserProperty(\"filter\");\n/**\n* get string \"animation\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {ANIMATION} from \"@daybrush/utils\";\n\nconsole.log(ANIMATION); // \"animation\", \"-ms-animation\", \"-webkit-animation\"\n*/\nvar ANIMATION = /*#__PURE__*/getCrossBrowserProperty(\"animation\");\n/**\n* get string \"keyframes\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {KEYFRAMES} from \"@daybrush/utils\";\n\nconsole.log(KEYFRAMES); // \"keyframes\", \"-ms-keyframes\", \"-webkit-keyframes\"\n*/\nvar KEYFRAMES = /*#__PURE__*/ANIMATION.replace(\"animation\", \"keyframes\");\nvar OPEN_CLOSED_CHARACTERS = [{\n  open: \"(\",\n  close: \")\"\n}, {\n  open: \"\\\"\",\n  close: \"\\\"\"\n}, {\n  open: \"'\",\n  close: \"'\"\n}, {\n  open: \"\\\\\\\"\",\n  close: \"\\\\\\\"\"\n}, {\n  open: \"\\\\'\",\n  close: \"\\\\'\"\n}];\nvar TINY_NUM = 0.0000001;\nvar REVERSE_TINY_NUM = 1 / TINY_NUM;\nvar DEFAULT_UNIT_PRESETS = {\n  \"cm\": function (pos) {\n    return pos * 96 / 2.54;\n  },\n  \"mm\": function (pos) {\n    return pos * 96 / 254;\n  },\n  \"in\": function (pos) {\n    return pos * 96;\n  },\n  \"pt\": function (pos) {\n    return pos * 96 / 72;\n  },\n  \"pc\": function (pos) {\n    return pos * 96 / 6;\n  },\n  \"%\": function (pos, size) {\n    return pos * size / 100;\n  },\n  \"vw\": function (pos, size) {\n    if (size === void 0) {\n      size = window.innerWidth;\n    }\n    return pos / 100 * size;\n  },\n  \"vh\": function (pos, size) {\n    if (size === void 0) {\n      size = window.innerHeight;\n    }\n    return pos / 100 * size;\n  },\n  \"vmax\": function (pos, size) {\n    if (size === void 0) {\n      size = Math.max(window.innerWidth, window.innerHeight);\n    }\n    return pos / 100 * size;\n  },\n  \"vmin\": function (pos, size) {\n    if (size === void 0) {\n      size = Math.min(window.innerWidth, window.innerHeight);\n    }\n    return pos / 100 * size;\n  }\n};\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n}\n\n/**\n* @namespace\n* @name Utils\n*/\n/**\n * Returns the inner product of two numbers(`a1`, `a2`) by two criteria(`b1`, `b2`).\n * @memberof Utils\n * @param - The first number\n * @param - The second number\n * @param - The first number to base on the inner product\n * @param - The second number to base on the inner product\n * @return - Returns the inner product\nimport { dot } from \"@daybrush/utils\";\n\nconsole.log(dot(0, 15, 2, 3)); // 6\nconsole.log(dot(5, 15, 2, 3)); // 9\nconsole.log(dot(5, 15, 1, 1)); // 10\n */\nfunction dot(a1, a2, b1, b2) {\n  return (a1 * b2 + a2 * b1) / (b1 + b2);\n}\n/**\n* Check the type that the value is undefined.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {boolean} true if the type is correct, false otherwise\n* @example\nimport {isUndefined} from \"@daybrush/utils\";\n\nconsole.log(isUndefined(undefined)); // true\nconsole.log(isUndefined(\"\")); // false\nconsole.log(isUndefined(1)); // false\nconsole.log(isUndefined(null)); // false\n*/\nfunction isUndefined(value) {\n  return typeof value === UNDEFINED;\n}\n/**\n* Check the type that the value is object.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isObject} from \"@daybrush/utils\";\n\nconsole.log(isObject({})); // true\nconsole.log(isObject(undefined)); // false\nconsole.log(isObject(\"\")); // false\nconsole.log(isObject(null)); // false\n*/\nfunction isObject(value) {\n  return value && typeof value === OBJECT;\n}\n/**\n* Check the type that the value is isArray.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isArray} from \"@daybrush/utils\";\n\nconsole.log(isArray([])); // true\nconsole.log(isArray({})); // false\nconsole.log(isArray(undefined)); // false\nconsole.log(isArray(null)); // false\n*/\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n/**\n* Check the type that the value is string.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isString} from \"@daybrush/utils\";\n\nconsole.log(isString(\"1234\")); // true\nconsole.log(isString(undefined)); // false\nconsole.log(isString(1)); // false\nconsole.log(isString(null)); // false\n*/\nfunction isString(value) {\n  return typeof value === STRING;\n}\nfunction isNumber(value) {\n  return typeof value === NUMBER;\n}\n/**\n* Check the type that the value is function.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isFunction} from \"@daybrush/utils\";\n\nconsole.log(isFunction(function a() {})); // true\nconsole.log(isFunction(() => {})); // true\nconsole.log(isFunction(\"1234\")); // false\nconsole.log(isFunction(1)); // false\nconsole.log(isFunction(null)); // false\n*/\nfunction isFunction(value) {\n  return typeof value === FUNCTION;\n}\nfunction isEqualSeparator(character, separator) {\n  var isCharacterSpace = character === \"\" || character == \" \";\n  var isSeparatorSpace = separator === \"\" || separator == \" \";\n  return isSeparatorSpace && isCharacterSpace || character === separator;\n}\nfunction findOpen(openCharacter, texts, index, length, openCloseCharacters) {\n  var isIgnore = findIgnore(openCharacter, texts, index);\n  if (!isIgnore) {\n    return findClose(openCharacter, texts, index + 1, length, openCloseCharacters);\n  }\n  return index;\n}\nfunction findIgnore(character, texts, index) {\n  if (!character.ignore) {\n    return null;\n  }\n  var otherText = texts.slice(Math.max(index - 3, 0), index + 3).join(\"\");\n  return new RegExp(character.ignore).exec(otherText);\n}\nfunction findClose(closeCharacter, texts, index, length, openCloseCharacters) {\n  var _loop_1 = function (i) {\n    var character = texts[i].trim();\n    if (character === closeCharacter.close && !findIgnore(closeCharacter, texts, i)) {\n      return {\n        value: i\n      };\n    }\n    var nextIndex = i;\n    // re open\n    var openCharacter = find(openCloseCharacters, function (_a) {\n      var open = _a.open;\n      return open === character;\n    });\n    if (openCharacter) {\n      nextIndex = findOpen(openCharacter, texts, i, length, openCloseCharacters);\n    }\n    if (nextIndex === -1) {\n      return out_i_1 = i, \"break\";\n    }\n    i = nextIndex;\n    out_i_1 = i;\n  };\n  var out_i_1;\n  for (var i = index; i < length; ++i) {\n    var state_1 = _loop_1(i);\n    i = out_i_1;\n    if (typeof state_1 === \"object\") return state_1.value;\n    if (state_1 === \"break\") break;\n  }\n  return -1;\n}\nfunction splitText(text, splitOptions) {\n  var _a = isString(splitOptions) ? {\n      separator: splitOptions\n    } : splitOptions,\n    _b = _a.separator,\n    separator = _b === void 0 ? \",\" : _b,\n    isSeparateFirst = _a.isSeparateFirst,\n    isSeparateOnlyOpenClose = _a.isSeparateOnlyOpenClose,\n    _c = _a.isSeparateOpenClose,\n    isSeparateOpenClose = _c === void 0 ? isSeparateOnlyOpenClose : _c,\n    _d = _a.openCloseCharacters,\n    openCloseCharacters = _d === void 0 ? OPEN_CLOSED_CHARACTERS : _d;\n  var openClosedText = openCloseCharacters.map(function (_a) {\n    var open = _a.open,\n      close = _a.close;\n    if (open === close) {\n      return open;\n    }\n    return open + \"|\" + close;\n  }).join(\"|\");\n  var regexText = \"(\\\\s*\" + separator + \"\\\\s*|\" + openClosedText + \"|\\\\s+)\";\n  var regex = new RegExp(regexText, \"g\");\n  var texts = text.split(regex).filter(function (chr) {\n    return chr && chr !== \"undefined\";\n  });\n  var length = texts.length;\n  var values = [];\n  var tempValues = [];\n  function resetTemp() {\n    if (tempValues.length) {\n      values.push(tempValues.join(\"\"));\n      tempValues = [];\n      return true;\n    }\n    return false;\n  }\n  var _loop_2 = function (i) {\n    var character = texts[i].trim();\n    var nextIndex = i;\n    var openCharacter = find(openCloseCharacters, function (_a) {\n      var open = _a.open;\n      return open === character;\n    });\n    var closeCharacter = find(openCloseCharacters, function (_a) {\n      var close = _a.close;\n      return close === character;\n    });\n    if (openCharacter) {\n      nextIndex = findOpen(openCharacter, texts, i, length, openCloseCharacters);\n      if (nextIndex !== -1 && isSeparateOpenClose) {\n        if (resetTemp() && isSeparateFirst) {\n          return out_i_2 = i, \"break\";\n        }\n        values.push(texts.slice(i, nextIndex + 1).join(\"\"));\n        i = nextIndex;\n        if (isSeparateFirst) {\n          return out_i_2 = i, \"break\";\n        }\n        return out_i_2 = i, \"continue\";\n      }\n    } else if (closeCharacter && !findIgnore(closeCharacter, texts, i)) {\n      var nextOpenCloseCharacters = __spreadArrays(openCloseCharacters);\n      nextOpenCloseCharacters.splice(openCloseCharacters.indexOf(closeCharacter), 1);\n      return {\n        value: splitText(text, {\n          separator: separator,\n          isSeparateFirst: isSeparateFirst,\n          isSeparateOnlyOpenClose: isSeparateOnlyOpenClose,\n          isSeparateOpenClose: isSeparateOpenClose,\n          openCloseCharacters: nextOpenCloseCharacters\n        })\n      };\n    } else if (isEqualSeparator(character, separator) && !isSeparateOnlyOpenClose) {\n      resetTemp();\n      if (isSeparateFirst) {\n        return out_i_2 = i, \"break\";\n      }\n      return out_i_2 = i, \"continue\";\n    }\n    if (nextIndex === -1) {\n      nextIndex = length - 1;\n    }\n    tempValues.push(texts.slice(i, nextIndex + 1).join(\"\"));\n    i = nextIndex;\n    out_i_2 = i;\n  };\n  var out_i_2;\n  for (var i = 0; i < length; ++i) {\n    var state_2 = _loop_2(i);\n    i = out_i_2;\n    if (typeof state_2 === \"object\") return state_2.value;\n    if (state_2 === \"break\") break;\n  }\n  if (tempValues.length) {\n    values.push(tempValues.join(\"\"));\n  }\n  return values;\n}\n/**\n* divide text by space.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {Array} divided texts\n* @example\nimport {spliceSpace} from \"@daybrush/utils\";\n\nconsole.log(splitSpace(\"a b c d e f g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitSpace(\"'a,b' c 'd,e' f g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\nfunction splitSpace(text) {\n  // divide comma(space)\n  return splitText(text, \"\");\n}\n/**\n* divide text by comma.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {Array} divided texts\n* @example\nimport {splitComma} from \"@daybrush/utils\";\n\nconsole.log(splitComma(\"a,b,c,d,e,f,g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitComma(\"'a,b',c,'d,e',f,g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\nfunction splitComma(text) {\n  // divide comma(,)\n  // \"[^\"]*\"|'[^']*'\n  return splitText(text, \",\");\n}\n/**\n* divide text by bracket \"(\", \")\".\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {object} divided texts\n* @example\nimport {splitBracket} from \"@daybrush/utils\";\n\nconsole.log(splitBracket(\"a(1, 2)\"));\n// {prefix: \"a\", value: \"1, 2\", suffix: \"\"}\nconsole.log(splitBracket(\"a(1, 2)b\"));\n// {prefix: \"a\", value: \"1, 2\", suffix: \"b\"}\n*/\nfunction splitBracket(text) {\n  var matches = /([^(]*)\\(([\\s\\S]*)\\)([\\s\\S]*)/g.exec(text);\n  if (!matches || matches.length < 4) {\n    return {};\n  } else {\n    return {\n      prefix: matches[1],\n      value: matches[2],\n      suffix: matches[3]\n    };\n  }\n}\n/**\n* divide text by number and unit.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {} divided texts\n* @example\nimport {splitUnit} from \"@daybrush/utils\";\n\nconsole.log(splitUnit(\"10px\"));\n// {prefix: \"\", value: 10, unit: \"px\"}\nconsole.log(splitUnit(\"-10px\"));\n// {prefix: \"\", value: -10, unit: \"px\"}\nconsole.log(splitUnit(\"a10%\"));\n// {prefix: \"a\", value: 10, unit: \"%\"}\n*/\nfunction splitUnit(text) {\n  var matches = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(text);\n  if (!matches) {\n    return {\n      prefix: \"\",\n      unit: \"\",\n      value: NaN\n    };\n  }\n  var prefix = matches[1];\n  var value = matches[2];\n  var unit = matches[3];\n  return {\n    prefix: prefix,\n    unit: unit,\n    value: parseFloat(value)\n  };\n}\n/**\n* transform strings to camel-case\n* @memberof Utils\n* @param {String} text - string\n* @return {String} camel-case string\n* @example\nimport {camelize} from \"@daybrush/utils\";\n\nconsole.log(camelize(\"transform-origin\")); // transformOrigin\nconsole.log(camelize(\"abcd_efg\")); // abcdEfg\nconsole.log(camelize(\"abcd efg\")); // abcdEfg\n*/\nfunction camelize(str) {\n  return str.replace(/[\\s-_]+([^\\s-_])/g, function (all, letter) {\n    return letter.toUpperCase();\n  });\n}\n/**\n* transform a camelized string into a lowercased string.\n* @memberof Utils\n* @param {string} text - a camel-cased string\n* @param {string} [separator=\"-\"] - a separator\n* @return {string}  a lowercased string\n* @example\nimport {decamelize} from \"@daybrush/utils\";\n\nconsole.log(decamelize(\"transformOrigin\")); // transform-origin\nconsole.log(decamelize(\"abcdEfg\", \"_\")); // abcd_efg\n*/\nfunction decamelize(str, separator) {\n  if (separator === void 0) {\n    separator = \"-\";\n  }\n  return str.replace(/([a-z])([A-Z])/g, function (all, letter, letter2) {\n    return \"\" + letter + separator + letter2.toLowerCase();\n  });\n}\n/**\n* transforms something in an array into an array.\n* @memberof Utils\n* @param - Array form\n* @return an array\n* @example\nimport {toArray} from \"@daybrush/utils\";\n\nconst arr1 = toArray(document.querySelectorAll(\".a\")); // Element[]\nconst arr2 = toArray(document.querySelectorAll<HTMLElement>(\".a\")); // HTMLElement[]\n*/\nfunction toArray(value) {\n  return [].slice.call(value);\n}\n/**\n* Date.now() method\n* @memberof CrossBrowser\n* @return {number} milliseconds\n* @example\nimport {now} from \"@daybrush/utils\";\n\nconsole.log(now()); // 12121324241(milliseconds)\n*/\nfunction now() {\n  return Date.now ? Date.now() : new Date().getTime();\n}\n/**\n* Returns the index of the first element in the array that satisfies the provided testing function.\n* @function\n* @memberof CrossBrowser\n* @param - The array `findIndex` was called upon.\n* @param - A function to execute on each value in the array until the function returns true, indicating that the satisfying element was found.\n* @param - Returns defaultIndex if not found by the function.\n* @example\nimport { findIndex } from \"@daybrush/utils\";\n\nfindIndex([{a: 1}, {a: 2}, {a: 3}, {a: 4}], ({ a }) => a === 2); // 1\n*/\nfunction findIndex(arr, callback, defaultIndex) {\n  if (defaultIndex === void 0) {\n    defaultIndex = -1;\n  }\n  var length = arr.length;\n  for (var i = 0; i < length; ++i) {\n    if (callback(arr[i], i, arr)) {\n      return i;\n    }\n  }\n  return defaultIndex;\n}\n/**\n* Returns the reverse direction index of the first element in the array that satisfies the provided testing function.\n* @function\n* @memberof CrossBrowser\n* @param - The array `findLastIndex` was called upon.\n* @param - A function to execute on each value in the array until the function returns true, indicating that the satisfying element was found.\n* @param - Returns defaultIndex if not found by the function.\n* @example\nimport { findLastIndex } from \"@daybrush/utils\";\n\nfindLastIndex([{a: 1}, {a: 2}, {a: 3}, {a: 4}], ({ a }) => a === 2); // 1\n*/\nfunction findLastIndex(arr, callback, defaultIndex) {\n  if (defaultIndex === void 0) {\n    defaultIndex = -1;\n  }\n  var length = arr.length;\n  for (var i = length - 1; i >= 0; --i) {\n    if (callback(arr[i], i, arr)) {\n      return i;\n    }\n  }\n  return defaultIndex;\n}\n/**\n* Returns the value of the reverse direction element in the array that satisfies the provided testing function.\n* @function\n* @memberof CrossBrowser\n* @param - The array `findLast` was called upon.\n* @param - A function to execute on each value in the array,\n* @param - Returns defalutValue if not found by the function.\n* @example\nimport { find } from \"@daybrush/utils\";\n\nfind([{a: 1}, {a: 2}, {a: 3}, {a: 4}], ({ a }) => a === 2); // {a: 2}\n*/\nfunction findLast(arr, callback, defalutValue) {\n  var index = findLastIndex(arr, callback);\n  return index > -1 ? arr[index] : defalutValue;\n}\n/**\n* Returns the value of the first element in the array that satisfies the provided testing function.\n* @function\n* @memberof CrossBrowser\n* @param - The array `find` was called upon.\n* @param - A function to execute on each value in the array,\n* @param - Returns defalutValue if not found by the function.\n* @example\nimport { find } from \"@daybrush/utils\";\n\nfind([{a: 1}, {a: 2}, {a: 3}, {a: 4}], ({ a }) => a === 2); // {a: 2}\n*/\nfunction find(arr, callback, defalutValue) {\n  var index = findIndex(arr, callback);\n  return index > -1 ? arr[index] : defalutValue;\n}\n/**\n* window.requestAnimationFrame() method with cross browser.\n* @function\n* @memberof CrossBrowser\n* @param {FrameRequestCallback} callback - The function to call when it's time to update your animation for the next repaint.\n* @return {number} id\n* @example\nimport {requestAnimationFrame} from \"@daybrush/utils\";\n\nrequestAnimationFrame((timestamp) => {\n  console.log(timestamp);\n});\n*/\nvar requestAnimationFrame = /*#__PURE__*/function () {\n  var firstTime = now();\n  var raf = IS_WINDOW && (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame);\n  return raf ? raf.bind(window) : function (callback) {\n    var currTime = now();\n    var id = setTimeout(function () {\n      callback(currTime - firstTime);\n    }, 1000 / 60);\n    return id;\n  };\n}();\n/**\n* window.cancelAnimationFrame() method with cross browser.\n* @function\n* @memberof CrossBrowser\n* @param {number} handle - the id obtained through requestAnimationFrame method\n* @return {void}\n* @example\nimport { requestAnimationFrame, cancelAnimationFrame } from \"@daybrush/utils\";\n\nconst id = requestAnimationFrame((timestamp) => {\n  console.log(timestamp);\n});\n\ncancelAnimationFrame(id);\n*/\nvar cancelAnimationFrame = /*#__PURE__*/function () {\n  var caf = IS_WINDOW && (window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame);\n  return caf ? caf.bind(window) : function (handle) {\n    clearTimeout(handle);\n  };\n}();\n/**\n* @function\n* @memberof Utils\n*/\nfunction getKeys(obj) {\n  return Object.keys(obj);\n}\n/**\n* @function\n* @memberof Utils\n*/\nfunction getValues(obj) {\n  var keys = getKeys(obj);\n  return keys.map(function (key) {\n    return obj[key];\n  });\n}\n/**\n* @function\n* @memberof Utils\n*/\nfunction getEntries(obj) {\n  var keys = getKeys(obj);\n  return keys.map(function (key) {\n    return [key, obj[key]];\n  });\n}\n/**\n* @function\n* @memberof Utils\n*/\nfunction sortOrders(keys, orders) {\n  if (orders === void 0) {\n    orders = [];\n  }\n  keys.sort(function (a, b) {\n    var index1 = orders.indexOf(a);\n    var index2 = orders.indexOf(b);\n    if (index2 === -1 && index1 === -1) {\n      return 0;\n    }\n    if (index1 === -1) {\n      return 1;\n    }\n    if (index2 === -1) {\n      return -1;\n    }\n    return index1 - index2;\n  });\n}\n/**\n* convert unit size to px size\n* @function\n* @memberof Utils\n*/\nfunction convertUnitSize(pos, size) {\n  var _a = splitUnit(pos),\n    value = _a.value,\n    unit = _a.unit;\n  if (isObject(size)) {\n    var sizeFunction = size[unit];\n    if (sizeFunction) {\n      if (isFunction(sizeFunction)) {\n        return sizeFunction(value);\n      } else if (DEFAULT_UNIT_PRESETS[unit]) {\n        return DEFAULT_UNIT_PRESETS[unit](value, sizeFunction);\n      }\n    }\n  } else if (unit === \"%\") {\n    return value * size / 100;\n  }\n  if (DEFAULT_UNIT_PRESETS[unit]) {\n    return DEFAULT_UNIT_PRESETS[unit](value);\n  }\n  return value;\n}\n/**\n* calculate between min, max\n* @function\n* @memberof Utils\n*/\nfunction between(value, min, max) {\n  return Math.max(min, Math.min(value, max));\n}\nfunction checkBoundSize(targetSize, compareSize, isMax, ratio) {\n  if (ratio === void 0) {\n    ratio = targetSize[0] / targetSize[1];\n  }\n  return [[throttle(compareSize[0], TINY_NUM), throttle(compareSize[0] / ratio, TINY_NUM)], [throttle(compareSize[1] * ratio, TINY_NUM), throttle(compareSize[1], TINY_NUM)]].filter(function (size) {\n    return size.every(function (value, i) {\n      var defaultSize = compareSize[i];\n      var throttledSize = throttle(defaultSize, TINY_NUM);\n      return isMax ? value <= defaultSize || value <= throttledSize : value >= defaultSize || value >= throttledSize;\n    });\n  })[0] || targetSize;\n}\n/**\n* calculate bound size\n* @function\n* @memberof Utils\n*/\nfunction calculateBoundSize(size, minSize, maxSize, keepRatio) {\n  if (!keepRatio) {\n    return size.map(function (value, i) {\n      return between(value, minSize[i], maxSize[i]);\n    });\n  }\n  var width = size[0],\n    height = size[1];\n  var ratio = keepRatio === true ? width / height : keepRatio;\n  // width : height = minWidth : minHeight;\n  var _a = checkBoundSize(size, minSize, false, ratio),\n    minWidth = _a[0],\n    minHeight = _a[1];\n  var _b = checkBoundSize(size, maxSize, true, ratio),\n    maxWidth = _b[0],\n    maxHeight = _b[1];\n  if (width < minWidth || height < minHeight) {\n    width = minWidth;\n    height = minHeight;\n  } else if (width > maxWidth || height > maxHeight) {\n    width = maxWidth;\n    height = maxHeight;\n  }\n  return [width, height];\n}\n/**\n* Add all the numbers.\n* @function\n* @memberof Utils\n*/\nfunction sum(nums) {\n  var length = nums.length;\n  var total = 0;\n  for (var i = length - 1; i >= 0; --i) {\n    total += nums[i];\n  }\n  return total;\n}\n/**\n* Average all numbers.\n* @function\n* @memberof Utils\n*/\nfunction average(nums) {\n  var length = nums.length;\n  var total = 0;\n  for (var i = length - 1; i >= 0; --i) {\n    total += nums[i];\n  }\n  return length ? total / length : 0;\n}\n/**\n* Get the angle of two points. (0 <= rad < 359)\n* @function\n* @memberof Utils\n*/\nfunction getRad(pos1, pos2) {\n  var distX = pos2[0] - pos1[0];\n  var distY = pos2[1] - pos1[1];\n  var rad = Math.atan2(distY, distX);\n  return rad >= 0 ? rad : rad + Math.PI * 2;\n}\n/**\n* Get the average point of all points.\n* @function\n* @memberof Utils\n*/\nfunction getCenterPoint(points) {\n  return [0, 1].map(function (i) {\n    return average(points.map(function (pos) {\n      return pos[i];\n    }));\n  });\n}\n/**\n* Gets the direction of the shape.\n* @function\n* @memberof Utils\n*/\nfunction getShapeDirection(points) {\n  var center = getCenterPoint(points);\n  var pos1Rad = getRad(center, points[0]);\n  var pos2Rad = getRad(center, points[1]);\n  return pos1Rad < pos2Rad && pos2Rad - pos1Rad < Math.PI || pos1Rad > pos2Rad && pos2Rad - pos1Rad < -Math.PI ? 1 : -1;\n}\n/**\n* Get the distance between two points.\n* @function\n* @memberof Utils\n*/\nfunction getDist(a, b) {\n  return Math.sqrt(Math.pow((b ? b[0] : 0) - a[0], 2) + Math.pow((b ? b[1] : 0) - a[1], 2));\n}\n/**\n* throttle number depending on the unit.\n* @function\n* @memberof Utils\n*/\nfunction throttle(num, unit) {\n  if (!unit) {\n    return num;\n  }\n  var reverseUnit = 1 / unit;\n  return Math.round(num / unit) / reverseUnit;\n}\n/**\n* throttle number array depending on the unit.\n* @function\n* @memberof Utils\n*/\nfunction throttleArray(nums, unit) {\n  nums.forEach(function (_, i) {\n    nums[i] = throttle(nums[i], unit);\n  });\n  return nums;\n}\n/**\n* @function\n* @memberof Utils\n*/\nfunction counter(num) {\n  var nums = [];\n  for (var i = 0; i < num; ++i) {\n    nums.push(i);\n  }\n  return nums;\n}\n/**\n* @function\n* @memberof Utils\n*/\nfunction replaceOnce(text, fromText, toText) {\n  var isOnce = false;\n  return text.replace(fromText, function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (isOnce) {\n      return args[0];\n    }\n    isOnce = true;\n    return isString(toText) ? toText : toText.apply(void 0, args);\n  });\n}\n/**\n* @function\n* @memberof Utils\n*/\nfunction flat(arr) {\n  return arr.reduce(function (prev, cur) {\n    return prev.concat(cur);\n  }, []);\n}\n/**\n* @function\n* @memberof Utils\n*/\nfunction deepFlat(arr) {\n  return arr.reduce(function (prev, cur) {\n    if (isArray(cur)) {\n      prev.push.apply(prev, deepFlat(cur));\n    } else {\n      prev.push(cur);\n    }\n    return prev;\n  }, []);\n}\n/**\n * @function\n * @memberof Utils\n */\nfunction pushSet(elements, element) {\n  if (elements.indexOf(element) === -1) {\n    elements.push(element);\n  }\n}\n\n/**\n* @namespace\n* @name Color\n*/\n/**\n* Remove the # from the hex color.\n* @memberof Color\n* @param {} hex - hex color\n* @return {} hex color\n* @example\nimport {cutHex} from \"@daybrush/utils\";\n\nconsole.log(cutHex(\"#000000\")) // \"000000\"\n*/\nfunction cutHex(hex) {\n  return hex.replace(\"#\", \"\");\n}\n/**\n* convert hex color to rgb color.\n* @memberof Color\n* @param {} hex - hex color\n* @return {} rgb color\n* @example\nimport {hexToRGBA} from \"@daybrush/utils\";\n\nconsole.log(hexToRGBA(\"#00000005\"));\n// [0, 0, 0, 1]\nconsole.log(hexToRGBA(\"#201045\"));\n// [32, 16, 69, 1]\n*/\nfunction hexToRGBA(hex) {\n  var h = cutHex(hex);\n  var r = parseInt(h.substring(0, 2), 16);\n  var g = parseInt(h.substring(2, 4), 16);\n  var b = parseInt(h.substring(4, 6), 16);\n  var a = parseInt(h.substring(6, 8), 16) / 255;\n  if (isNaN(a)) {\n    a = 1;\n  }\n  return [r, g, b, a];\n}\n/**\n* convert 3(or 4)-digit hex color to 6(or 8)-digit hex color.\n* @memberof Color\n* @param {} hex - 3(or 4)-digit hex color\n* @return {} 6(or 8)-digit hex color\n* @example\nimport {toFullHex} from \"@daybrush/utils\";\n\nconsole.log(toFullHex(\"#123\")); // \"#112233\"\nconsole.log(toFullHex(\"#123a\")); // \"#112233aa\"\n*/\nfunction toFullHex(h) {\n  var r = h.charAt(1);\n  var g = h.charAt(2);\n  var b = h.charAt(3);\n  var a = h.charAt(4);\n  var arr = [\"#\", r, r, g, g, b, b, a, a];\n  return arr.join(\"\");\n}\n/**\n* convert hsl color to rgba color.\n* @memberof Color\n* @param {} hsl - hsl color(hue: 0 ~ 360, saturation: 0 ~ 1, lightness: 0 ~ 1, alpha: 0 ~ 1)\n* @return {} rgba color\n* @example\nimport {hslToRGBA} from \"@daybrush/utils\";\n\nconsole.log(hslToRGBA([150, 0.5, 0.4]));\n// [51, 153, 102, 1]\n*/\nfunction hslToRGBA(hsl) {\n  var _a;\n  var h = hsl[0];\n  var s = hsl[1];\n  var l = hsl[2];\n  if (h < 0) {\n    h += Math.floor((Math.abs(h) + 360) / 360) * 360;\n  }\n  h %= 360;\n  var c = (1 - Math.abs(2 * l - 1)) * s;\n  var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n  var m = l - c / 2;\n  var rgb;\n  if (h < 60) {\n    rgb = [c, x, 0];\n  } else if (h < 120) {\n    rgb = [x, c, 0];\n  } else if (h < 180) {\n    rgb = [0, c, x];\n  } else if (h < 240) {\n    rgb = [0, x, c];\n  } else if (h < 300) {\n    rgb = [x, 0, c];\n  } else if (h < 360) {\n    rgb = [c, 0, x];\n  } else {\n    rgb = [0, 0, 0];\n  }\n  return [Math.round((rgb[0] + m) * 255), Math.round((rgb[1] + m) * 255), Math.round((rgb[2] + m) * 255), (_a = hsl[3]) !== null && _a !== void 0 ? _a : 1];\n}\n/**\n* convert string to rgba color.\n* @memberof Color\n* @param {} - 3-hex(#000), 4-hex(#0000) 6-hex(#000000), 8-hex(#00000000) or RGB(A), or HSL(A)\n* @return {} rgba color\n* @example\nimport {stringToRGBA} from \"@daybrush/utils\";\n\nconsole.log(stringToRGBA(\"#000000\")); // [0, 0, 0, 1]\nconsole.log(stringToRGBA(\"rgb(100, 100, 100)\")); // [100, 100, 100, 1]\nconsole.log(stringToRGBA(\"hsl(150, 0.5, 0.4)\")); // [51, 153, 102, 1]\n*/\nfunction stringToRGBA(color) {\n  if (color.charAt(0) === \"#\") {\n    if (color.length === 4 || color.length === 5) {\n      return hexToRGBA(toFullHex(color));\n    } else {\n      return hexToRGBA(color);\n    }\n  } else if (color.indexOf(\"(\") !== -1) {\n    // in bracket.\n    var _a = splitBracket(color),\n      prefix = _a.prefix,\n      value = _a.value;\n    if (!prefix || !value) {\n      return undefined;\n    }\n    var arr = splitComma(value);\n    var colorArr = [0, 0, 0, 1];\n    var length = arr.length;\n    switch (prefix) {\n      case RGB:\n      case RGBA:\n        for (var i = 0; i < length; ++i) {\n          colorArr[i] = parseFloat(arr[i]);\n        }\n        return colorArr;\n      case HSL:\n      case HSLA:\n        for (var i = 0; i < length; ++i) {\n          if (arr[i].indexOf(\"%\") !== -1) {\n            colorArr[i] = parseFloat(arr[i]) / 100;\n          } else {\n            colorArr[i] = parseFloat(arr[i]);\n          }\n        }\n        // hsl, hsla to rgba\n        return hslToRGBA(colorArr);\n    }\n  }\n  return undefined;\n}\n\n/**\n * Returns all element descendants of node that\n * match selectors.\n */\n/**\n * Checks if the specified class value exists in the element's class attribute.\n * @memberof DOM\n * @param - A DOMString containing one or more selectors to match\n * @param - If multi is true, a DOMString containing one or more selectors to match against.\n * @example\nimport {$} from \"@daybrush/utils\";\n\nconsole.log($(\"div\")); // div element\nconsole.log($(\"div\", true)); // [div, div] elements\n*/\nfunction $(selectors, multi) {\n  if (!doc) {\n    return multi ? [] : null;\n  }\n  return multi ? doc.querySelectorAll(selectors) : doc.querySelector(selectors);\n}\n/**\n* Checks if the specified class value exists in the element's class attribute.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to search\n* @return {boolean} return false if the class is not found.\n* @example\nimport {hasClass} from \"@daybrush/utils\";\n\nconsole.log(hasClass(element, \"start\")); // true or false\n*/\nfunction hasClass(element, className) {\n  if (element.classList) {\n    return element.classList.contains(className);\n  }\n  return !!element.className.match(new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\n}\n/**\n* Add the specified class value. If these classe already exist in the element's class attribute they are ignored.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to add\n* @example\nimport {addClass} from \"@daybrush/utils\";\n\naddClass(element, \"start\");\n*/\nfunction addClass(element, className) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    element.className += \" \" + className;\n  }\n}\n/**\n* Removes the specified class value.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to remove\n* @example\nimport {removeClass} from \"@daybrush/utils\";\n\nremoveClass(element, \"start\");\n*/\nfunction removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    var reg = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n    element.className = element.className.replace(reg, \" \");\n  }\n}\n/**\n* Gets the CSS properties from the element.\n* @memberof DOM\n* @param elements - elements\n* @param properites - the CSS properties\n* @return returns CSS properties and values.\n* @example\nimport {fromCSS} from \"@daybrush/utils\";\n\nconsole.log(fromCSS(element, [\"left\", \"opacity\", \"top\"])); // {\"left\": \"10px\", \"opacity\": 1, \"top\": \"10px\"}\n*/\nfunction fromCSS(elements, properties) {\n  if (!elements || !properties || !properties.length) {\n    return {};\n  }\n  var element;\n  if (elements instanceof Element) {\n    element = elements;\n  } else if (elements.length) {\n    element = elements[0];\n  } else {\n    return {};\n  }\n  var cssObject = {};\n  var styles = getWindow(element).getComputedStyle(element);\n  var length = properties.length;\n  for (var i = 0; i < length; ++i) {\n    cssObject[properties[i]] = styles[properties[i]];\n  }\n  return cssObject;\n}\n/**\n* Sets up a function that will be called whenever the specified event is delivered to the target\n* @memberof DOM\n* @param - event target\n* @param - A case-sensitive string representing the event type to listen for.\n* @param - The object which receives a notification (an object that implements the Event interface) when an event of the specified type occurs\n* @param - An options object that specifies characteristics about the event listener.\n* @example\nimport {addEvent} from \"@daybrush/utils\";\n\naddEvent(el, \"click\", e => {\n  console.log(e);\n});\n*/\nfunction addEvent(el, type, listener, options) {\n  el.addEventListener(type, listener, options);\n}\n/**\n* removes from the EventTarget an event listener previously registered with EventTarget.addEventListener()\n* @memberof DOM\n* @param - event target\n* @param - A case-sensitive string representing the event type to listen for.\n* @param - The EventListener function of the event handler to remove from the event target.\n* @param - An options object that specifies characteristics about the event listener.\n* @example\nimport {addEvent, removeEvent} from \"@daybrush/utils\";\nconst listener = e => {\n  console.log(e);\n};\naddEvent(el, \"click\", listener);\nremoveEvent(el, \"click\", listener);\n*/\nfunction removeEvent(el, type, listener, options) {\n  el.removeEventListener(type, listener, options);\n}\nfunction getDocument(el) {\n  return (el === null || el === void 0 ? void 0 : el.ownerDocument) || doc;\n}\nfunction getDocumentElement(el) {\n  return getDocument(el).documentElement;\n}\nfunction getDocumentBody(el) {\n  return getDocument(el).body;\n}\nfunction getWindow(el) {\n  var _a;\n  return ((_a = el === null || el === void 0 ? void 0 : el.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n}\nfunction isWindow(val) {\n  return val && \"postMessage\" in val && \"blur\" in val && \"self\" in val;\n}\nfunction isNode(el) {\n  return isObject(el) && el.nodeName && el.nodeType && \"ownerDocument\" in el;\n}\n\n\n//# sourceMappingURL=utils.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@daybrush/utils/dist/utils.esm.js\n");

/***/ })

};
;