"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-moveable";
exports.ids = ["vendor-chunks/react-moveable"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-moveable/dist/moveable.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-moveable/dist/moveable.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Clippable: () => (/* binding */ Clippable),\n/* harmony export */   DIRECTIONS: () => (/* binding */ DIRECTIONS),\n/* harmony export */   Draggable: () => (/* binding */ Draggable),\n/* harmony export */   EdgeDraggable: () => (/* binding */ edgeDraggable),\n/* harmony export */   InitialMoveable: () => (/* binding */ InitialMoveable),\n/* harmony export */   MOVEABLE_ABLES: () => (/* binding */ MOVEABLE_ABLES),\n/* harmony export */   MOVEABLE_EVENTS: () => (/* binding */ MOVEABLE_EVENTS),\n/* harmony export */   MOVEABLE_METHODS: () => (/* binding */ MOVEABLE_METHODS),\n/* harmony export */   MOVEABLE_PROPS: () => (/* binding */ MOVEABLE_PROPS),\n/* harmony export */   Pinchable: () => (/* binding */ Pinchable),\n/* harmony export */   Resizable: () => (/* binding */ Resizable),\n/* harmony export */   Rotatable: () => (/* binding */ Rotatable),\n/* harmony export */   Roundable: () => (/* binding */ Roundable),\n/* harmony export */   Scalable: () => (/* binding */ Scalable),\n/* harmony export */   Snappable: () => (/* binding */ Snappable),\n/* harmony export */   Warpable: () => (/* binding */ Warpable),\n/* harmony export */   calculateElementPosition: () => (/* binding */ calculateElementPosition),\n/* harmony export */   \"default\": () => (/* binding */ Moveable),\n/* harmony export */   getElementInfo: () => (/* binding */ getElementInfo),\n/* harmony export */   makeAble: () => (/* binding */ makeAble),\n/* harmony export */   makeMoveable: () => (/* binding */ makeMoveable)\n/* harmony export */ });\n/* harmony import */ var _egjs_agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @egjs/agent */ \"(ssr)/./node_modules/@egjs/agent/dist/agent.esm.js\");\n/* harmony import */ var framework_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! framework-utils */ \"(ssr)/./node_modules/framework-utils/dist/utils.esm.js\");\n/* harmony import */ var _daybrush_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @daybrush/utils */ \"(ssr)/./node_modules/@daybrush/utils/dist/utils.esm.js\");\n/* harmony import */ var _scena_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @scena/matrix */ \"(ssr)/./node_modules/@scena/matrix/dist/matrix.esm.js\");\n/* harmony import */ var css_to_mat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! css-to-mat */ \"(ssr)/./node_modules/css-to-mat/dist/css-to-mat.esm.js\");\n/* harmony import */ var _egjs_children_differ__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @egjs/children-differ */ \"(ssr)/./node_modules/@egjs/children-differ/dist/children-differ.esm.js\");\n/* harmony import */ var _scena_dragscroll__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @scena/dragscroll */ \"(ssr)/./node_modules/@scena/dragscroll/dist/dragscroll.esm.js\");\n/* harmony import */ var overlap_area__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! overlap-area */ \"(ssr)/./node_modules/overlap-area/dist/overlap-area.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var gesto__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! gesto */ \"(ssr)/./node_modules/gesto/dist/gesto.esm.js\");\n/* harmony import */ var react_css_styled__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-css-styled */ \"(ssr)/./node_modules/react-css-styled/dist/styled.esm.js\");\n/* harmony import */ var _scena_event_emitter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @scena/event-emitter */ \"(ssr)/./node_modules/@scena/event-emitter/dist/event-emitter.esm.js\");\n/* harmony import */ var _egjs_list_differ__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @egjs/list-differ */ \"(ssr)/./node_modules/@egjs/list-differ/dist/list-differ.esm.js\");\n/*\nCopyright (c) 2019 Daybrush\nname: react-moveable\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/moveable/blob/master/packages/react-moveable\nversion: 0.56.0\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\nfunction makeAble(name, able) {\r\n    return __assign({ events: [], props: [], name: name }, able);\r\n}\n\nvar DIRECTIONS4 = [\"n\", \"w\", \"s\", \"e\"];\r\nvar DIRECTIONS = [\"n\", \"w\", \"s\", \"e\", \"nw\", \"ne\", \"sw\", \"se\"];\r\nfunction getSVGCursor(scale, degree) {\r\n    return \"data:image/svg+xml;utf8,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"\".concat(32 * scale, \"px\\\" height=\\\"\").concat(32 * scale, \"px\\\" viewBox=\\\"0 0 32 32\\\" ><path d=\\\"M 16,5 L 12,10 L 14.5,10 L 14.5,22 L 12,22 L 16,27 L 20,22 L 17.5,22 L 17.5,10 L 20, 10 L 16,5 Z\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"1.2\\\" fill=\\\"black\\\" stroke=\\\"white\\\" style=\\\"transform:rotate(\").concat(degree, \"deg);transform-origin: 16px 16px\\\"></path></svg>\");\r\n}\r\nfunction getCursorCSS(degree) {\r\n    var x1 = getSVGCursor(1, degree);\r\n    // const x2 = getSVGCursor(2, degree);\r\n    var degree45 = (Math.round(degree / 45) * 45) % 180;\r\n    var defaultCursor = \"ns-resize\";\r\n    if (degree45 === 135) {\r\n        defaultCursor = \"nwse-resize\";\r\n    }\r\n    else if (degree45 === 45) {\r\n        defaultCursor = \"nesw-resize\";\r\n    }\r\n    else if (degree45 === 90) {\r\n        defaultCursor = \"ew-resize\";\r\n    }\r\n    // tslint:disable-next-line: max-line-length\r\n    return \"cursor:\".concat(defaultCursor, \";cursor: url('\").concat(x1, \"') 16 16, \").concat(defaultCursor, \";\");\r\n}\r\nvar agent = (0,_egjs_agent__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\r\nvar IS_WEBKIT = agent.browser.webkit;\r\nvar IS_WEBKIT605 = IS_WEBKIT && (function () {\r\n    var navi = typeof window === \"undefined\" ? { userAgent: \"\" } : window.navigator;\r\n    var res = /applewebkit\\/([^\\s]+)/g.exec(navi.userAgent.toLowerCase());\r\n    return res ? parseFloat(res[1]) < 605 : false;\r\n})();\r\nvar browserName = agent.browser.name;\r\nvar browserVersion = parseInt(agent.browser.version, 10);\r\nvar IS_CHROME = browserName === \"chrome\";\r\nvar IS_CHROMIUM = agent.browser.chromium;\r\nvar chromiumVersion = parseInt(agent.browser.chromiumVersion, 10) || 0;\r\nvar IS_CHROMIUM109 = (IS_CHROME && browserVersion >= 109)\r\n    || (IS_CHROMIUM && chromiumVersion >= 109);\r\nvar IS_FIREFOX = browserName === \"firefox\";\r\nvar IS_SAFARI_ABOVE15 = parseInt(agent.browser.webkitVersion, 10) >= 612\r\n    || browserVersion >= 15;\r\nvar PREFIX = \"moveable-\";\r\nvar directionCSS = DIRECTIONS.map(function (dir) {\r\n    var top = \"\";\r\n    var left = \"\";\r\n    var originX = \"center\";\r\n    var originY = \"center\";\r\n    var offset = \"calc(var(--moveable-control-padding, 20) * -1px)\";\r\n    if (dir.indexOf(\"n\") > -1) {\r\n        top = \"top: \".concat(offset, \";\");\r\n        originY = \"bottom\";\r\n    }\r\n    if (dir.indexOf(\"s\") > -1) {\r\n        top = \"top: 0px;\";\r\n        originY = \"top\";\r\n    }\r\n    if (dir.indexOf(\"w\") > -1) {\r\n        left = \"left: \".concat(offset, \";\");\r\n        originX = \"right\";\r\n    }\r\n    if (dir.indexOf(\"e\") > -1) {\r\n        left = \"left: 0px;\";\r\n        originX = \"left\";\r\n    }\r\n    return \".around-control[data-direction*=\\\"\".concat(dir, \"\\\"] {\\n        \").concat(left).concat(top, \"\\n        transform-origin: \").concat(originX, \" \").concat(originY, \";\\n    }\");\r\n}).join(\"\\n\");\r\nvar MOVEABLE_CSS = \"\\n{\\nposition: absolute;\\nwidth: 1px;\\nheight: 1px;\\nleft: 0;\\ntop: 0;\\nz-index: 3000;\\n--moveable-color: #4af;\\n--zoom: 1;\\n--zoompx: 1px;\\n--moveable-line-padding: 0;\\n--moveable-control-padding: 0;\\nwill-change: transform;\\noutline: 1px solid transparent;\\n}\\n.control-box {\\nz-index: 0;\\n}\\n.line, .control {\\nposition: absolute;\\nleft: 0;\\ntop: 0;\\nwill-change: transform;\\n}\\n.control {\\nwidth: 14px;\\nheight: 14px;\\nborder-radius: 50%;\\nborder: 2px solid #fff;\\nbox-sizing: border-box;\\nbackground: #4af;\\nbackground: var(--moveable-color);\\nmargin-top: -7px;\\nmargin-left: -7px;\\nborder: 2px solid #fff;\\nz-index: 10;\\n}\\n.around-control {\\nposition: absolute;\\nwill-change: transform;\\nwidth: calc(var(--moveable-control-padding, 20) * 1px);\\nheight: calc(var(--moveable-control-padding, 20) * 1px);\\nleft: calc(var(--moveable-control-padding, 20) * -0.5px);\\ntop: calc(var(--moveable-control-padding, 20) * -0.5px);\\nbox-sizing: border-box;\\nbackground: transparent;\\nz-index: 8;\\ncursor: alias;\\ntransform-origin: center center;\\n}\\n\".concat(directionCSS, \"\\n.padding {\\nposition: absolute;\\ntop: 0px;\\nleft: 0px;\\nwidth: 100px;\\nheight: 100px;\\ntransform-origin: 0 0;\\n}\\n.line {\\nwidth: 1px;\\nheight: 1px;\\nbackground: #4af;\\nbackground: var(--moveable-color);\\ntransform-origin: 0px 50%;\\n}\\n.line.edge {\\nz-index: 1;\\nbackground: transparent;\\n}\\n.line.dashed {\\nbox-sizing: border-box;\\nbackground: transparent;\\n}\\n.line.dashed.horizontal {\\nborder-top: 1px dashed #4af;\\nborder-top-color: #4af;\\nborder-top-color: var(--moveable-color);\\n}\\n.line.dashed.vertical {\\nborder-left: 1px dashed #4af;\\nborder-left-color: #4af;\\nborder-left-color: var(--moveable-color);\\n}\\n.line.vertical {\\ntransform: translateX(-50%);\\n}\\n.line.horizontal {\\ntransform: translateY(-50%);\\n}\\n.line.vertical.bold {\\nwidth: 2px;\\n}\\n.line.horizontal.bold {\\nheight: 2px;\\n}\\n\\n.control.origin {\\nborder-color: #f55;\\nbackground: #fff;\\nwidth: 12px;\\nheight: 12px;\\nmargin-top: -6px;\\nmargin-left: -6px;\\npointer-events: none;\\n}\\n\").concat([0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165].map(function (degree) { return \"\\n.direction[data-rotation=\\\"\".concat(degree, \"\\\"], :global .view-control-rotation\").concat(degree, \" {\\n\").concat(getCursorCSS(degree), \"\\n}\\n\"); }).join(\"\\n\"), \"\\n\\n.line.direction:before {\\ncontent: \\\"\\\";\\nposition: absolute;\\nwidth: 100%;\\nheight: calc(var(--moveable-line-padding, 0) * 1px);\\nbottom: 0;\\nleft: 0;\\n}\\n.group {\\nz-index: -1;\\n}\\n.area {\\nposition: absolute;\\n}\\n.area-pieces {\\nposition: absolute;\\ntop: 0;\\nleft: 0;\\ndisplay: none;\\n}\\n.area.avoid, .area.pass {\\npointer-events: none;\\n}\\n.area.avoid+.area-pieces {\\ndisplay: block;\\n}\\n.area-piece {\\nposition: absolute;\\n}\\n\\n\").concat(IS_WEBKIT605 ? \":global svg *:before {\\ncontent:\\\"\\\";\\ntransform-origin: inherit;\\n}\" : \"\", \"\\n\");\r\nvar NEARBY_POS = [\r\n    [0, 1, 2],\r\n    [1, 0, 3],\r\n    [2, 0, 3],\r\n    [3, 1, 2],\r\n];\r\nvar FLOAT_POINT_NUM = 0.0001;\r\nvar TINY_NUM = 0.0000001;\r\nvar MIN_SCALE = 0.000000001;\r\nvar MAX_NUM = Math.pow(10, 10);\r\nvar MIN_NUM = -MAX_NUM;\r\nvar DIRECTION_REGION_TO_DIRECTION = {\r\n    n: [0, -1],\r\n    e: [1, 0],\r\n    s: [0, 1],\r\n    w: [-1, 0],\r\n    nw: [-1, -1],\r\n    ne: [1, -1],\r\n    sw: [-1, 1],\r\n    se: [1, 1],\r\n};\r\nvar DIRECTION_INDEXES = {\r\n    n: [0, 1],\r\n    e: [1, 3],\r\n    s: [3, 2],\r\n    w: [2, 0],\r\n    nw: [0],\r\n    ne: [1],\r\n    sw: [2],\r\n    se: [3],\r\n};\r\nvar DIRECTION_ROTATIONS = {\r\n    n: 0,\r\n    s: 180,\r\n    w: 270,\r\n    e: 90,\r\n    nw: 315,\r\n    ne: 45,\r\n    sw: 225,\r\n    se: 135,\r\n};\r\nvar MOVEABLE_METHODS = [\r\n    \"isMoveableElement\",\r\n    \"updateRect\",\r\n    \"updateTarget\",\r\n    \"destroy\",\r\n    \"dragStart\",\r\n    \"isInside\",\r\n    \"hitTest\",\r\n    \"setState\",\r\n    \"getRect\",\r\n    \"request\",\r\n    \"isDragging\",\r\n    \"getManager\",\r\n    \"forceUpdate\",\r\n    \"waitToChangeTarget\",\r\n    \"updateSelectors\",\r\n    \"getTargets\",\r\n    \"stopDrag\",\r\n    \"getControlBoxElement\",\r\n    \"getMoveables\",\r\n    \"getDragElement\",\r\n];\n\nfunction setCustomDrag(e, state, delta, isPinch, isConvert, ableName) {\r\n    var _a, _b;\r\n    if (ableName === void 0) { ableName = \"draggable\"; }\r\n    var result = (_b = (_a = state.gestos[ableName]) === null || _a === void 0 ? void 0 : _a.move(delta, e.inputEvent)) !== null && _b !== void 0 ? _b : {};\r\n    var datas = result.originalDatas || result.datas;\r\n    var ableDatas = datas[ableName] || (datas[ableName] = {});\r\n    return __assign(__assign({}, (isConvert ? convertDragDist(state, result) : result)), { isPinch: !!isPinch, parentEvent: true, datas: ableDatas, originalDatas: e.originalDatas });\r\n}\r\nvar CustomGesto = /*#__PURE__*/ (function () {\r\n    function CustomGesto(ableName) {\r\n        var _a;\r\n        if (ableName === void 0) { ableName = \"draggable\"; }\r\n        this.ableName = ableName;\r\n        this.prevX = 0;\r\n        this.prevY = 0;\r\n        this.startX = 0;\r\n        this.startY = 0;\r\n        this.isDrag = false;\r\n        this.isFlag = false;\r\n        this.datas = {\r\n            draggable: {},\r\n        };\r\n        this.datas = (_a = {},\r\n            _a[ableName] = {},\r\n            _a);\r\n    }\r\n    CustomGesto.prototype.dragStart = function (client, e) {\r\n        this.isDrag = false;\r\n        this.isFlag = false;\r\n        var originalDatas = e.originalDatas;\r\n        this.datas = originalDatas;\r\n        if (!originalDatas[this.ableName]) {\r\n            originalDatas[this.ableName] = {};\r\n        }\r\n        return __assign(__assign({}, this.move(client, e.inputEvent)), { type: \"dragstart\" });\r\n    };\r\n    CustomGesto.prototype.drag = function (client, inputEvent) {\r\n        return this.move([\r\n            client[0] - this.prevX,\r\n            client[1] - this.prevY,\r\n        ], inputEvent);\r\n    };\r\n    CustomGesto.prototype.move = function (delta, inputEvent) {\r\n        var clientX;\r\n        var clientY;\r\n        var isFirstDrag = false;\r\n        if (!this.isFlag) {\r\n            this.prevX = delta[0];\r\n            this.prevY = delta[1];\r\n            this.startX = delta[0];\r\n            this.startY = delta[1];\r\n            clientX = delta[0];\r\n            clientY = delta[1];\r\n            this.isFlag = true;\r\n        }\r\n        else {\r\n            var isPrevDrag = this.isDrag;\r\n            clientX = this.prevX + delta[0];\r\n            clientY = this.prevY + delta[1];\r\n            if (delta[0] || delta[1]) {\r\n                this.isDrag = true;\r\n            }\r\n            if (!isPrevDrag && this.isDrag) {\r\n                isFirstDrag = true;\r\n            }\r\n        }\r\n        this.prevX = clientX;\r\n        this.prevY = clientY;\r\n        return {\r\n            type: \"drag\",\r\n            clientX: clientX,\r\n            clientY: clientY,\r\n            inputEvent: inputEvent,\r\n            isFirstDrag: isFirstDrag,\r\n            isDrag: this.isDrag,\r\n            distX: clientX - this.startX,\r\n            distY: clientY - this.startY,\r\n            deltaX: delta[0],\r\n            deltaY: delta[1],\r\n            datas: this.datas[this.ableName],\r\n            originalDatas: this.datas,\r\n            parentEvent: true,\r\n            parentGesto: this,\r\n        };\r\n    };\r\n    return CustomGesto;\r\n}());\n\nfunction calculateElementPosition(matrix, origin, width, height) {\r\n    var is3d = matrix.length === 16;\r\n    var n = is3d ? 4 : 3;\r\n    var poses = calculatePoses(matrix, width, height, n);\r\n    var _a = __read(poses, 4), _b = __read(_a[0], 2), x1 = _b[0], y1 = _b[1], _c = __read(_a[1], 2), x2 = _c[0], y2 = _c[1], _d = __read(_a[2], 2), x3 = _d[0], y3 = _d[1], _e = __read(_a[3], 2), x4 = _e[0], y4 = _e[1];\r\n    var _f = __read(calculatePosition(matrix, origin, n), 2), originX = _f[0], originY = _f[1];\r\n    var left = Math.min(x1, x2, x3, x4);\r\n    var top = Math.min(y1, y2, y3, y4);\r\n    var right = Math.max(x1, x2, x3, x4);\r\n    var bottom = Math.max(y1, y2, y3, y4);\r\n    x1 = (x1 - left) || 0;\r\n    x2 = (x2 - left) || 0;\r\n    x3 = (x3 - left) || 0;\r\n    x4 = (x4 - left) || 0;\r\n    y1 = (y1 - top) || 0;\r\n    y2 = (y2 - top) || 0;\r\n    y3 = (y3 - top) || 0;\r\n    y4 = (y4 - top) || 0;\r\n    originX = (originX - left) || 0;\r\n    originY = (originY - top) || 0;\r\n    var sx = matrix[0];\r\n    var sy = matrix[n + 1];\r\n    var direction = sign(sx * sy);\r\n    return {\r\n        left: left,\r\n        top: top,\r\n        right: right,\r\n        bottom: bottom,\r\n        origin: [originX, originY],\r\n        pos1: [x1, y1],\r\n        pos2: [x2, y2],\r\n        pos3: [x3, y3],\r\n        pos4: [x4, y4],\r\n        direction: direction,\r\n    };\r\n}\n\nfunction calculatePointerDist(moveable, e) {\r\n    var clientX = e.clientX, clientY = e.clientY, datas = e.datas;\r\n    var _a = moveable.state, moveableClientRect = _a.moveableClientRect, rootMatrix = _a.rootMatrix, is3d = _a.is3d, pos1 = _a.pos1;\r\n    var left = moveableClientRect.left, top = moveableClientRect.top;\r\n    var n = is3d ? 4 : 3;\r\n    var _b = __read((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(calculateInversePosition(rootMatrix, [clientX - left, clientY - top], n), pos1), 2), posX = _b[0], posY = _b[1];\r\n    var _c = __read(getDragDist({ datas: datas, distX: posX, distY: posY }), 2), distX = _c[0], distY = _c[1];\r\n    return [distX, distY];\r\n}\r\nfunction setDragStart(moveable, _a) {\r\n    var datas = _a.datas;\r\n    var _b = moveable.state, allMatrix = _b.allMatrix, beforeMatrix = _b.beforeMatrix, is3d = _b.is3d, left = _b.left, top = _b.top, origin = _b.origin, offsetMatrix = _b.offsetMatrix, targetMatrix = _b.targetMatrix, transformOrigin = _b.transformOrigin;\r\n    var n = is3d ? 4 : 3;\r\n    datas.is3d = is3d;\r\n    datas.matrix = allMatrix;\r\n    datas.targetMatrix = targetMatrix;\r\n    datas.beforeMatrix = beforeMatrix;\r\n    datas.offsetMatrix = offsetMatrix;\r\n    datas.transformOrigin = transformOrigin;\r\n    datas.inverseMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.invert)(allMatrix, n);\r\n    datas.inverseBeforeMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.invert)(beforeMatrix, n);\r\n    datas.absoluteOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertPositionMatrix)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)([left, top], origin), n);\r\n    datas.startDragBeforeDist = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)(datas.inverseBeforeMatrix, datas.absoluteOrigin, n);\r\n    datas.startDragDist = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)(datas.inverseMatrix, datas.absoluteOrigin, n);\r\n}\r\nfunction getTransformDirection(e) {\r\n    return calculateElementPosition(e.datas.beforeTransform, [50, 50], 100, 100).direction;\r\n}\r\nfunction resolveTransformEvent(moveable, event, functionName) {\r\n    var datas = event.datas, originalDatas = event.originalDatas.beforeRenderable;\r\n    var index = datas.transformIndex;\r\n    var nextTransforms = originalDatas.nextTransforms;\r\n    var length = nextTransforms.length;\r\n    var nextTransformAppendedIndexes = originalDatas.nextTransformAppendedIndexes;\r\n    var nextIndex = -1;\r\n    if (index === -1) {\r\n        // translate => rotate => scale\r\n        if (functionName === \"translate\") {\r\n            nextIndex = 0;\r\n        }\r\n        else if (functionName === \"rotate\") {\r\n            nextIndex = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.findIndex)(nextTransforms, function (text) { return text.match(/scale\\(/g); });\r\n        }\r\n        if (nextIndex === -1) {\r\n            nextIndex = nextTransforms.length;\r\n        }\r\n        datas.transformIndex = nextIndex;\r\n    }\r\n    else if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.find)(nextTransformAppendedIndexes, function (info) { return info.index === index && info.functionName === functionName; })) {\r\n        nextIndex = index;\r\n    }\r\n    else {\r\n        nextIndex = index + nextTransformAppendedIndexes.filter(function (info) { return info.index < index; }).length;\r\n    }\r\n    var result = convertTransformInfo(nextTransforms, moveable.state, nextIndex);\r\n    var targetFunction = result.targetFunction;\r\n    var matFunctionName = functionName === \"rotate\" ? \"rotateZ\" : functionName;\r\n    datas.beforeFunctionTexts = result.beforeFunctionTexts;\r\n    datas.afterFunctionTexts = result.afterFunctionTexts;\r\n    datas.beforeTransform = result.beforeFunctionMatrix;\r\n    datas.beforeTransform2 = result.beforeFunctionMatrix2;\r\n    datas.targetTansform = result.targetFunctionMatrix;\r\n    datas.afterTransform = result.afterFunctionMatrix;\r\n    datas.afterTransform2 = result.afterFunctionMatrix2;\r\n    datas.targetAllTransform = result.allFunctionMatrix;\r\n    if (targetFunction.functionName === matFunctionName) {\r\n        datas.afterFunctionTexts.splice(0, 1);\r\n        datas.isAppendTransform = false;\r\n    }\r\n    else if (length > nextIndex) {\r\n        datas.isAppendTransform = true;\r\n        originalDatas.nextTransformAppendedIndexes = __spreadArray(__spreadArray([], __read(nextTransformAppendedIndexes), false), [{\r\n                functionName: functionName,\r\n                index: nextIndex,\r\n                isAppend: true,\r\n            }], false);\r\n    }\r\n}\r\nfunction convertTransformFormat(datas, value, dist) {\r\n    return \"\".concat(datas.beforeFunctionTexts.join(\" \"), \" \").concat(datas.isAppendTransform ? dist : value, \" \").concat(datas.afterFunctionTexts.join(\" \"));\r\n}\r\nfunction getTransformDist(_a) {\r\n    var datas = _a.datas, distX = _a.distX, distY = _a.distY;\r\n    var _b = __read(getBeforeDragDist({ datas: datas, distX: distX, distY: distY }), 2), bx = _b[0], by = _b[1];\r\n    // B * [tx, ty] * A = [bx, by] * targetMatrix;\r\n    // [tx, ty] = B-1 * [bx, by] * targetMatrix * A-1 * [0, 0];\r\n    var res = getTransfromMatrix(datas, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.fromTranslation)([bx, by], 4));\r\n    return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)(res, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertPositionMatrix)([0, 0, 0], 4), 4);\r\n}\r\nfunction getTransfromMatrix(datas, targetMatrix, isAfter) {\r\n    var beforeTransform = datas.beforeTransform, afterTransform = datas.afterTransform, beforeTransform2 = datas.beforeTransform2, afterTransform2 = datas.afterTransform2, targetAllTransform = datas.targetAllTransform;\r\n    // B * afterTargetMatrix * A = (targetMatrix * targetAllTransform)\r\n    // afterTargetMatrix = B-1 * targetMatrix * targetAllTransform * A-1\r\n    // nextTargetMatrix = (targetMatrix * targetAllTransform)\r\n    var nextTargetMatrix = isAfter\r\n        ? (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(targetAllTransform, targetMatrix, 4)\r\n        : (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(targetMatrix, targetAllTransform, 4);\r\n    // res1 = B-1 * nextTargetMatrix\r\n    var res1 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.invert)(isAfter ? beforeTransform2 : beforeTransform, 4), nextTargetMatrix, 4);\r\n    // res3 = res2 * A-1\r\n    var afterTargetMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(res1, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.invert)(isAfter ? afterTransform2 : afterTransform, 4), 4);\r\n    return afterTargetMatrix;\r\n}\r\nfunction getBeforeDragDist(_a) {\r\n    var datas = _a.datas, distX = _a.distX, distY = _a.distY;\r\n    // TT = BT\r\n    var inverseBeforeMatrix = datas.inverseBeforeMatrix, is3d = datas.is3d, startDragBeforeDist = datas.startDragBeforeDist, absoluteOrigin = datas.absoluteOrigin;\r\n    var n = is3d ? 4 : 3;\r\n    // ABS_ORIGIN * [distX, distY] = BM * (ORIGIN + [tx, ty])\r\n    // BM -1 * ABS_ORIGIN * [distX, distY] - ORIGIN = [tx, ty]\r\n    return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)(inverseBeforeMatrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(absoluteOrigin, [distX, distY]), n), startDragBeforeDist);\r\n}\r\nfunction getDragDist(_a, isBefore) {\r\n    var datas = _a.datas, distX = _a.distX, distY = _a.distY;\r\n    var inverseBeforeMatrix = datas.inverseBeforeMatrix, inverseMatrix = datas.inverseMatrix, is3d = datas.is3d, startDragBeforeDist = datas.startDragBeforeDist, startDragDist = datas.startDragDist, absoluteOrigin = datas.absoluteOrigin;\r\n    var n = is3d ? 4 : 3;\r\n    return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)(isBefore ? inverseBeforeMatrix : inverseMatrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(absoluteOrigin, [distX, distY]), n), isBefore ? startDragBeforeDist : startDragDist);\r\n}\r\nfunction getInverseDragDist(_a, isBefore) {\r\n    var datas = _a.datas, distX = _a.distX, distY = _a.distY;\r\n    var beforeMatrix = datas.beforeMatrix, matrix = datas.matrix, is3d = datas.is3d, startDragBeforeDist = datas.startDragBeforeDist, startDragDist = datas.startDragDist, absoluteOrigin = datas.absoluteOrigin;\r\n    var n = is3d ? 4 : 3;\r\n    return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)(isBefore ? beforeMatrix : matrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(isBefore ? startDragBeforeDist : startDragDist, [distX, distY]), n), absoluteOrigin);\r\n}\r\nfunction calculateTransformOrigin(transformOrigin, width, height, prevWidth, prevHeight, prevOrigin) {\r\n    if (prevWidth === void 0) { prevWidth = width; }\r\n    if (prevHeight === void 0) { prevHeight = height; }\r\n    if (prevOrigin === void 0) { prevOrigin = [0, 0]; }\r\n    if (!transformOrigin) {\r\n        return prevOrigin;\r\n    }\r\n    return transformOrigin.map(function (pos, i) {\r\n        var _a = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitUnit)(pos), value = _a.value, unit = _a.unit;\r\n        var prevSize = (i ? prevHeight : prevWidth);\r\n        var size = (i ? height : width);\r\n        if (pos === \"%\" || isNaN(value)) {\r\n            // no value but %\r\n            var measureRatio = prevSize ? prevOrigin[i] / prevSize : 0;\r\n            return size * measureRatio;\r\n        }\r\n        else if (unit !== \"%\") {\r\n            return value;\r\n        }\r\n        return size * value / 100;\r\n    });\r\n}\r\nfunction getPosIndexesByDirection(direction) {\r\n    var indexes = [];\r\n    if (direction[1] >= 0) {\r\n        if (direction[0] >= 0) {\r\n            indexes.push(3);\r\n        }\r\n        if (direction[0] <= 0) {\r\n            indexes.push(2);\r\n        }\r\n    }\r\n    if (direction[1] <= 0) {\r\n        if (direction[0] >= 0) {\r\n            indexes.push(1);\r\n        }\r\n        if (direction[0] <= 0) {\r\n            indexes.push(0);\r\n        }\r\n    }\r\n    return indexes;\r\n}\r\nfunction getPosesByDirection(poses, direction) {\r\n    /*\r\n    [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\r\n    [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\r\n    [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\r\n    */\r\n    return getPosIndexesByDirection(direction).map(function (index) { return poses[index]; });\r\n}\r\nfunction getPosBySingleDirection(poses, direction) {\r\n    var ratio = (direction + 1) / 2;\r\n    return [\r\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.dot)(poses[0][0], poses[1][0], ratio, 1 - ratio),\r\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.dot)(poses[0][1], poses[1][1], ratio, 1 - ratio),\r\n    ];\r\n}\r\nfunction getPosByDirection(poses, direction) {\r\n    var top = getPosBySingleDirection([poses[0], poses[1]], direction[0]);\r\n    var bottom = getPosBySingleDirection([poses[2], poses[3]], direction[0]);\r\n    return getPosBySingleDirection([top, bottom], direction[1]);\r\n}\r\nfunction getDist(startPos, matrix, width, height, n, fixedDirection) {\r\n    var poses = calculatePoses(matrix, width, height, n);\r\n    var fixedPos = getPosByDirection(poses, fixedDirection);\r\n    var distX = startPos[0] - fixedPos[0];\r\n    var distY = startPos[1] - fixedPos[1];\r\n    return [distX, distY];\r\n}\r\nfunction getNextMatrix(offsetMatrix, targetMatrix, origin, n) {\r\n    return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(offsetMatrix, getAbsoluteMatrix(targetMatrix, n, origin), n);\r\n}\r\nfunction getNextTransformMatrix(state, datas, transform, isAllTransform) {\r\n    var transformOrigin = state.transformOrigin, offsetMatrix = state.offsetMatrix, is3d = state.is3d;\r\n    var n = is3d ? 4 : 3;\r\n    var targetTransform;\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isString)(transform)) {\r\n        var beforeTransform = datas.beforeTransform, afterTransform = datas.afterTransform;\r\n        if (isAllTransform) {\r\n            targetTransform = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertDimension)((0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.parseMat)(transform), 4, n);\r\n        }\r\n        else {\r\n            targetTransform = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertDimension)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(beforeTransform, (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.parseMat)([transform]), 4), afterTransform, 4), 4, n);\r\n        }\r\n    }\r\n    else {\r\n        targetTransform = transform;\r\n    }\r\n    return getNextMatrix(offsetMatrix, targetTransform, transformOrigin, n);\r\n}\r\nfunction scaleMatrix(state, scale) {\r\n    var transformOrigin = state.transformOrigin, offsetMatrix = state.offsetMatrix, is3d = state.is3d, targetMatrix = state.targetMatrix, targetAllTransform = state.targetAllTransform;\r\n    var n = is3d ? 4 : 3;\r\n    return getNextMatrix(offsetMatrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(targetAllTransform || targetMatrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createScaleMatrix)(scale, n), n), transformOrigin, n);\r\n}\r\nfunction fillTransformStartEvent(moveable, e) {\r\n    var originalDatas = getBeforeRenderableDatas(e);\r\n    return {\r\n        setTransform: function (transform, index) {\r\n            if (index === void 0) { index = -1; }\r\n            originalDatas.startTransforms = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(transform) ? transform : (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitSpace)(transform);\r\n            setTransformIndex(moveable, e, index);\r\n        },\r\n        setTransformIndex: function (index) {\r\n            setTransformIndex(moveable, e, index);\r\n        },\r\n    };\r\n}\r\nfunction setDefaultTransformIndex(moveable, e, property) {\r\n    var originalDatas = getBeforeRenderableDatas(e);\r\n    var startTransforms = originalDatas.startTransforms;\r\n    setTransformIndex(moveable, e, (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.findIndex)(startTransforms, function (func) { return func.indexOf(\"\".concat(property, \"(\")) === 0; }));\r\n}\r\nfunction setTransformIndex(moveable, e, index) {\r\n    var originalDatas = getBeforeRenderableDatas(e);\r\n    var datas = e.datas;\r\n    datas.transformIndex = index;\r\n    if (index === -1) {\r\n        return;\r\n    }\r\n    var transform = originalDatas.startTransforms[index];\r\n    if (!transform) {\r\n        return;\r\n    }\r\n    var state = moveable.state;\r\n    var info = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.parse)([transform], {\r\n        \"x%\": function (v) { return v / 100 * state.offsetWidth; },\r\n        \"y%\": function (v) { return v / 100 * state.offsetHeight; },\r\n    });\r\n    datas.startValue = info[0].functionValue;\r\n}\r\nfunction fillOriginalTransform(e, transform) {\r\n    var originalDatas = getBeforeRenderableDatas(e);\r\n    originalDatas.nextTransforms = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitSpace)(transform);\r\n    // originalDatas.nextTargetMatrix = parseMat(transform);\r\n}\r\nfunction getBeforeRenderableDatas(e) {\r\n    return e.originalDatas.beforeRenderable;\r\n}\r\nfunction getNextTransforms(e) {\r\n    var originalDatas = e.originalDatas.beforeRenderable;\r\n    return originalDatas.nextTransforms;\r\n}\r\nfunction getNextTransformText(e) {\r\n    return (getNextTransforms(e) || []).join(\" \");\r\n}\r\nfunction getNextStyle(e) {\r\n    return getBeforeRenderableDatas(e).nextStyle;\r\n}\r\nfunction fillTransformEvent(moveable, nextTransform, delta, isPinch, e) {\r\n    fillOriginalTransform(e, nextTransform);\r\n    var drag = Draggable.drag(moveable, setCustomDrag(e, moveable.state, delta, isPinch, false));\r\n    var afterTransform = drag ? drag.transform : nextTransform;\r\n    return __assign(__assign({ transform: nextTransform, drag: drag }, fillCSSObject({\r\n        transform: afterTransform,\r\n    }, e)), { afterTransform: afterTransform });\r\n}\r\nfunction getTranslateFixedPosition(moveable, transform, fixedDirection, fixedOffset, datas, isAllTransform) {\r\n    var nextMatrix = getNextTransformMatrix(moveable.state, datas, transform, isAllTransform);\r\n    var nextFixedPosition = getDirectionOffset(moveable, fixedDirection, fixedOffset, nextMatrix);\r\n    return nextFixedPosition;\r\n}\r\nfunction getTranslateDist(moveable, transform, fixedDirection, fixedPosition, fixedOffset, datas, isAllTransform) {\r\n    var nextFixedPosition = getTranslateFixedPosition(moveable, transform, fixedDirection, fixedOffset, datas, isAllTransform);\r\n    var state = moveable.state;\r\n    var left = state.left, top = state.top;\r\n    var groupable = moveable.props.groupable;\r\n    var groupLeft = groupable ? left : 0;\r\n    var groupTop = groupable ? top : 0;\r\n    var dist = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(fixedPosition, nextFixedPosition);\r\n    return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(dist, [groupLeft, groupTop]);\r\n}\r\nfunction getScaleDist(moveable, transform, fixedDirection, fixedPosition, fixedOffset, datas, isAllTransform) {\r\n    var dist = getTranslateDist(moveable, transform, fixedDirection, fixedPosition, fixedOffset, datas, isAllTransform);\r\n    return dist;\r\n}\r\nfunction getDirectionByPos(pos, width, height) {\r\n    return [\r\n        width ? -1 + pos[0] / (width / 2) : 0,\r\n        height ? -1 + pos[1] / (height / 2) : 0,\r\n    ];\r\n}\r\nfunction getDirectionOffset(moveable, fixedDirection, fixedOffset, nextMatrix) {\r\n    if (nextMatrix === void 0) { nextMatrix = moveable.state.allMatrix; }\r\n    var _a = moveable.state, width = _a.width, height = _a.height, is3d = _a.is3d;\r\n    var n = is3d ? 4 : 3;\r\n    var fixedOffsetPosition = [\r\n        width / 2 * (1 + fixedDirection[0]) + fixedOffset[0],\r\n        height / 2 * (1 + fixedDirection[1]) + fixedOffset[1],\r\n    ];\r\n    return calculatePosition(nextMatrix, fixedOffsetPosition, n);\r\n}\r\nfunction getRotateDist(moveable, rotateDist, datas) {\r\n    var fixedDirection = datas.fixedDirection;\r\n    var fixedPosition = datas.fixedPosition;\r\n    var fixedOffset = datas.fixedOffset;\r\n    return getTranslateDist(moveable, \"rotate(\".concat(rotateDist, \"deg)\"), fixedDirection, fixedPosition, fixedOffset, datas);\r\n}\r\nfunction getResizeDist(moveable, width, height, fixedPosition, transformOrigin, datas) {\r\n    var groupable = moveable.props.groupable;\r\n    var state = moveable.state;\r\n    var prevOrigin = state.transformOrigin, offsetMatrix = state.offsetMatrix, is3d = state.is3d, prevWidth = state.width, prevHeight = state.height, left = state.left, top = state.top;\r\n    var fixedDirection = datas.fixedDirection;\r\n    var targetMatrix = datas.nextTargetMatrix || state.targetMatrix;\r\n    var n = is3d ? 4 : 3;\r\n    var nextOrigin = calculateTransformOrigin(transformOrigin, width, height, prevWidth, prevHeight, prevOrigin);\r\n    var groupLeft = groupable ? left : 0;\r\n    var groupTop = groupable ? top : 0;\r\n    var nextMatrix = getNextMatrix(offsetMatrix, targetMatrix, nextOrigin, n);\r\n    var dist = getDist(fixedPosition, nextMatrix, width, height, n, fixedDirection);\r\n    return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(dist, [groupLeft, groupTop]);\r\n}\r\nfunction getAbsolutePosition(moveable, direction) {\r\n    return getPosByDirection(getAbsolutePosesByState(moveable.state), direction);\r\n}\n\nfunction getGestoData(moveable, ableName) {\r\n    var targetGesto = moveable.targetGesto;\r\n    var controlGesto = moveable.controlGesto;\r\n    var data;\r\n    if (targetGesto === null || targetGesto === void 0 ? void 0 : targetGesto.isFlag()) {\r\n        data = targetGesto.getEventData()[ableName];\r\n    }\r\n    if (!data && (controlGesto === null || controlGesto === void 0 ? void 0 : controlGesto.isFlag())) {\r\n        data = controlGesto.getEventData()[ableName];\r\n    }\r\n    return data || {};\r\n}\n\nfunction getShadowRoot(parentElement) {\r\n    if (parentElement && parentElement.getRootNode) {\r\n        var rootNode = parentElement.getRootNode();\r\n        if (rootNode.nodeType === 11) {\r\n            return rootNode;\r\n        }\r\n    }\r\n    return;\r\n}\r\nfunction getIndividualTransforms(getStyle) {\r\n    var scale = getStyle(\"scale\");\r\n    var rotate = getStyle(\"rotate\");\r\n    var translate = getStyle(\"translate\");\r\n    var individualTransforms = [];\r\n    if (translate && translate !== \"0px\" && translate !== \"none\") {\r\n        individualTransforms.push(\"translate(\".concat(translate.split(/\\s+/).join(\",\"), \")\"));\r\n    }\r\n    if (rotate && rotate !== \"1\" && rotate !== \"none\") {\r\n        individualTransforms.push(\"rotate(\".concat(rotate, \")\"));\r\n    }\r\n    if (scale && scale !== \"1\" && scale !== \"none\") {\r\n        individualTransforms.push(\"scale(\".concat(scale.split(/\\s+/).join(\",\"), \")\"));\r\n    }\r\n    return individualTransforms;\r\n}\r\nfunction getMatrixStackInfo(target, container, checkContainer) {\r\n    var el = target;\r\n    var matrixes = [];\r\n    var documentElement = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentElement)(target) || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentBody)(target);\r\n    var requestEnd = !checkContainer && target === container || target === documentElement;\r\n    var isEnd = requestEnd;\r\n    var is3d = false;\r\n    var n = 3;\r\n    var transformOrigin;\r\n    var targetTransformOrigin;\r\n    var targetMatrix;\r\n    var hasFixed = false;\r\n    var offsetContainer = getOffsetInfo(container, container, true).offsetParent;\r\n    var zoom = 1;\r\n    while (el && !isEnd) {\r\n        isEnd = requestEnd;\r\n        var getStyle = getCachedStyle(el);\r\n        var position = getStyle(\"position\");\r\n        var transform = getElementTransform(el);\r\n        var isFixed = position === \"fixed\";\r\n        var individualTransforms = getIndividualTransforms(getStyle);\r\n        var matrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertCSStoMatrix)(getTransformMatrix(transform));\r\n        var offsetParent = void 0;\r\n        var isOffsetEnd = false;\r\n        var isStatic = false;\r\n        var parentClientLeft = 0;\r\n        var parentClientTop = 0;\r\n        var fixedClientLeft = 0;\r\n        var fixedClientTop = 0;\r\n        var fixedInfo = {\r\n            hasTransform: false,\r\n            fixedContainer: null,\r\n        };\r\n        if (isFixed) {\r\n            hasFixed = true;\r\n            fixedInfo = getPositionFixedInfo(el);\r\n            offsetContainer = fixedInfo.fixedContainer;\r\n        }\r\n        // convert 3 to 4\r\n        var length_1 = matrix.length;\r\n        if (!is3d && (length_1 === 16 || individualTransforms.length)) {\r\n            is3d = true;\r\n            n = 4;\r\n            convert3DMatrixes(matrixes);\r\n            if (targetMatrix) {\r\n                targetMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertDimension)(targetMatrix, 3, 4);\r\n            }\r\n        }\r\n        if (is3d && length_1 === 9) {\r\n            matrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertDimension)(matrix, 3, 4);\r\n        }\r\n        var _a = getOffsetPosInfo(el, target), tagName = _a.tagName, hasOffset = _a.hasOffset, isSVG = _a.isSVG, origin_1 = _a.origin, targetOrigin = _a.targetOrigin, offsetPos = _a.offset;\r\n        var _b = __read(offsetPos, 2), offsetLeft = _b[0], offsetTop = _b[1];\r\n        // no target with svg\r\n        if (tagName === \"svg\" && !el.ownerSVGElement && targetMatrix) {\r\n            // scale matrix for svg's SVGElements.\r\n            matrixes.push({\r\n                type: \"target\",\r\n                target: el,\r\n                matrix: getSVGMatrix(el, n),\r\n            });\r\n            matrixes.push({\r\n                type: \"offset\",\r\n                target: el,\r\n                matrix: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n),\r\n            });\r\n        }\r\n        var targetZoom = parseFloat(getStyle(\"zoom\")) || 1;\r\n        if (isFixed) {\r\n            offsetParent = fixedInfo.fixedContainer;\r\n            isOffsetEnd = true;\r\n        }\r\n        else {\r\n            var offsetInfo = getOffsetInfo(el, container, false, true, getStyle);\r\n            var offsetZoom = offsetInfo.offsetZoom;\r\n            offsetParent = offsetInfo.offsetParent;\r\n            isOffsetEnd = offsetInfo.isEnd;\r\n            isStatic = offsetInfo.isStatic;\r\n            zoom *= offsetZoom;\r\n            if ((offsetInfo.isCustomElement || offsetZoom !== 1) && isStatic) {\r\n                offsetLeft -= offsetParent.offsetLeft;\r\n                offsetTop -= offsetParent.offsetTop;\r\n            }\r\n            else if (IS_FIREFOX || IS_CHROMIUM109) {\r\n                var parentSlotElement = offsetInfo.parentSlotElement;\r\n                if (parentSlotElement) {\r\n                    var customOffsetParent = offsetParent;\r\n                    var customOffsetLeft = 0;\r\n                    var customOffsetTop = 0;\r\n                    while (customOffsetParent) {\r\n                        if (!getShadowRoot(customOffsetParent)) {\r\n                            break;\r\n                        }\r\n                        customOffsetLeft += customOffsetParent.offsetLeft;\r\n                        customOffsetTop += customOffsetParent.offsetTop;\r\n                        customOffsetParent = customOffsetParent.offsetParent;\r\n                    }\r\n                    offsetLeft -= customOffsetLeft;\r\n                    offsetTop -= customOffsetTop;\r\n                }\r\n            }\r\n        }\r\n        if (IS_WEBKIT && !IS_SAFARI_ABOVE15\r\n            && hasOffset && !isSVG && isStatic\r\n            && (position === \"relative\" || position === \"static\")) {\r\n            offsetLeft -= offsetParent.offsetLeft;\r\n            offsetTop -= offsetParent.offsetTop;\r\n            requestEnd = requestEnd || isOffsetEnd;\r\n        }\r\n        if (isFixed) {\r\n            if (hasOffset && fixedInfo.hasTransform) {\r\n                // border\r\n                fixedClientLeft = offsetParent.clientLeft;\r\n                fixedClientTop = offsetParent.clientTop;\r\n            }\r\n        }\r\n        else {\r\n            if (hasOffset && offsetContainer !== offsetParent) {\r\n                // border\r\n                parentClientLeft = offsetParent.clientLeft;\r\n                parentClientTop = offsetParent.clientTop;\r\n            }\r\n            if (hasOffset && offsetParent === documentElement) {\r\n                var margin = getBodyOffset(el, false);\r\n                offsetLeft += margin[0];\r\n                offsetTop += margin[1];\r\n            }\r\n        }\r\n        matrixes.push({\r\n            type: \"target\",\r\n            target: el,\r\n            matrix: getAbsoluteMatrix(matrix, n, origin_1),\r\n        });\r\n        if (individualTransforms.length) {\r\n            matrixes.push({\r\n                type: \"offset\",\r\n                target: el,\r\n                matrix: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n),\r\n            });\r\n            matrixes.push({\r\n                type: \"target\",\r\n                target: el,\r\n                matrix: getAbsoluteMatrix((0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.parseMat)(individualTransforms), n, origin_1),\r\n            });\r\n        }\r\n        if (hasOffset) {\r\n            var isElementTarget = el === target;\r\n            var scrollLeft = isElementTarget ? 0 : el.scrollLeft;\r\n            var scrollTop = isElementTarget ? 0 : el.scrollTop;\r\n            matrixes.push({\r\n                type: \"offset\",\r\n                target: el,\r\n                matrix: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createOriginMatrix)([\r\n                    offsetLeft - scrollLeft + parentClientLeft - fixedClientLeft,\r\n                    offsetTop - scrollTop + parentClientTop - fixedClientTop,\r\n                ], n),\r\n            });\r\n        }\r\n        else {\r\n            // svg\r\n            matrixes.push({\r\n                type: \"offset\",\r\n                target: el,\r\n                origin: origin_1,\r\n            });\r\n        }\r\n        // transform으로 계산되지 않는 zoom을 위한 (0, 0) 을 기준 matrix 추가.\r\n        if (targetZoom !== 1) {\r\n            matrixes.push({\r\n                type: \"zoom\",\r\n                target: el,\r\n                matrix: getAbsoluteMatrix((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createScaleMatrix)([targetZoom, targetZoom], n), n, [0, 0]),\r\n            });\r\n        }\r\n        if (!targetMatrix) {\r\n            targetMatrix = matrix;\r\n        }\r\n        if (!transformOrigin) {\r\n            transformOrigin = origin_1;\r\n        }\r\n        if (!targetTransformOrigin) {\r\n            targetTransformOrigin = targetOrigin;\r\n        }\r\n        if (isEnd || isFixed) {\r\n            break;\r\n        }\r\n        else {\r\n            el = offsetParent;\r\n            requestEnd = isOffsetEnd;\r\n        }\r\n        if (!checkContainer || el === documentElement) {\r\n            isEnd = requestEnd;\r\n        }\r\n    }\r\n    if (!targetMatrix) {\r\n        targetMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n);\r\n    }\r\n    if (!transformOrigin) {\r\n        transformOrigin = [0, 0];\r\n    }\r\n    if (!targetTransformOrigin) {\r\n        targetTransformOrigin = [0, 0];\r\n    }\r\n    return {\r\n        zoom: zoom,\r\n        offsetContainer: offsetContainer,\r\n        matrixes: matrixes,\r\n        targetMatrix: targetMatrix,\r\n        transformOrigin: transformOrigin,\r\n        targetOrigin: targetTransformOrigin,\r\n        is3d: is3d,\r\n        hasFixed: hasFixed,\r\n    };\r\n}\n\nvar cacheStyleMap = null;\r\nvar clientRectStyleMap = null;\r\nvar matrixContainerInfos = null;\r\nfunction setStoreCache(useCache) {\r\n    if (useCache) {\r\n        if (window.Map) {\r\n            cacheStyleMap = new Map();\r\n            clientRectStyleMap = new Map();\r\n        }\r\n        matrixContainerInfos = [];\r\n    }\r\n    else {\r\n        cacheStyleMap = null;\r\n        matrixContainerInfos = null;\r\n        clientRectStyleMap = null;\r\n    }\r\n}\r\nfunction getCachedClientRect(el) {\r\n    var clientRect = clientRectStyleMap === null || clientRectStyleMap === void 0 ? void 0 : clientRectStyleMap.get(el);\r\n    if (clientRect) {\r\n        return clientRect;\r\n    }\r\n    var nextClientRect = getClientRect(el, true);\r\n    if (clientRectStyleMap) {\r\n        clientRectStyleMap.set(el, nextClientRect);\r\n    }\r\n    return nextClientRect;\r\n}\r\nfunction getCachedMatrixContainerInfo(target, container) {\r\n    if (matrixContainerInfos) {\r\n        var result_1 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.find)(matrixContainerInfos, function (info) { return info[0][0] == target && info[0][1] == container; });\r\n        if (result_1) {\r\n            return result_1[1];\r\n        }\r\n    }\r\n    var result = getMatrixStackInfo(target, container, true);\r\n    if (matrixContainerInfos) {\r\n        matrixContainerInfos.push([[target, container], result]);\r\n    }\r\n    return result;\r\n}\r\nfunction getCachedStyle(element) {\r\n    var cache = cacheStyleMap === null || cacheStyleMap === void 0 ? void 0 : cacheStyleMap.get(element);\r\n    if (!cache) {\r\n        var nextStyle_1 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getWindow)(element).getComputedStyle(element);\r\n        if (!cacheStyleMap) {\r\n            return function (property) {\r\n                return nextStyle_1[property];\r\n            };\r\n        }\r\n        cache = {\r\n            style: nextStyle_1,\r\n            cached: {},\r\n        };\r\n        cacheStyleMap.set(element, cache);\r\n    }\r\n    var cached = cache.cached;\r\n    var style = cache.style;\r\n    return function (property) {\r\n        if (!(property in cached)) {\r\n            cached[property] = style[property];\r\n        }\r\n        return cached[property];\r\n    };\r\n}\n\nfunction fillChildEvents(moveable, name, e) {\r\n    var datas = e.originalDatas;\r\n    datas.groupable = datas.groupable || {};\r\n    var groupableDatas = datas.groupable;\r\n    groupableDatas.childDatas = groupableDatas.childDatas || [];\r\n    var childDatas = groupableDatas.childDatas;\r\n    return moveable.moveables.map(function (_, i) {\r\n        childDatas[i] = childDatas[i] || {};\r\n        childDatas[i][name] = childDatas[i][name] || {};\r\n        return __assign(__assign({}, e), { isRequestChild: true, datas: childDatas[i][name], originalDatas: childDatas[i] });\r\n    });\r\n}\r\nfunction triggerChildGesto(moveable, able, type, delta, e, isConvert, ableName) {\r\n    var isStart = !!type.match(/Start$/g);\r\n    var isEnd = !!type.match(/End$/g);\r\n    var isPinch = e.isPinch;\r\n    var datas = e.datas;\r\n    var events = fillChildEvents(moveable, able.name, e);\r\n    var moveables = moveable.moveables;\r\n    var childEvents = [];\r\n    var eventParams = events.map(function (ev, i) {\r\n        var childMoveable = moveables[i];\r\n        var state = childMoveable.state;\r\n        var gestos = state.gestos;\r\n        var childEvent = ev;\r\n        if (isStart) {\r\n            childEvent = new CustomGesto(ableName).dragStart(delta, ev);\r\n            childEvents.push(childEvent);\r\n        }\r\n        else {\r\n            if (!gestos[ableName]) {\r\n                gestos[ableName] = datas.childGestos[i];\r\n            }\r\n            if (!gestos[ableName]) {\r\n                return;\r\n            }\r\n            childEvent = setCustomDrag(ev, state, delta, isPinch, isConvert, ableName);\r\n            childEvents.push(childEvent);\r\n        }\r\n        var result = able[type](childMoveable, __assign(__assign({}, childEvent), { parentFlag: true }));\r\n        if (isEnd) {\r\n            gestos[ableName] = null;\r\n        }\r\n        return result;\r\n    });\r\n    if (isStart) {\r\n        datas.childGestos = moveables.map(function (child) { return child.state.gestos[ableName]; });\r\n    }\r\n    return {\r\n        eventParams: eventParams,\r\n        childEvents: childEvents,\r\n    };\r\n}\r\nfunction triggerChildAbles(moveable, able, type, e, eachEvent, callback) {\r\n    if (eachEvent === void 0) { eachEvent = function (_, ev) { return ev; }; }\r\n    var isEnd = !!type.match(/End$/g);\r\n    var events = fillChildEvents(moveable, able.name, e);\r\n    var moveables = moveable.moveables;\r\n    var childs = events.map(function (ev, i) {\r\n        var childMoveable = moveables[i];\r\n        var childEvent = ev;\r\n        childEvent = eachEvent(childMoveable, ev);\r\n        var result = able[type](childMoveable, __assign(__assign({}, childEvent), { parentFlag: true }));\r\n        result && callback && callback(childMoveable, ev, result, i);\r\n        if (isEnd) {\r\n            childMoveable.state.gestos = {};\r\n        }\r\n        return result;\r\n    });\r\n    return childs;\r\n}\r\nfunction startChildDist(moveable, child, parentDatas, childEvent) {\r\n    var fixedDirection = parentDatas.fixedDirection;\r\n    var fixedPosition = parentDatas.fixedPosition;\r\n    var startPositions = childEvent.datas.startPositions || getAbsolutePosesByState(child.state);\r\n    var pos = getPosByDirection(startPositions, fixedDirection);\r\n    var _a = __read((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createRotateMatrix)(-moveable.rotation / 180 * Math.PI, 3), [pos[0] - fixedPosition[0], pos[1] - fixedPosition[1], 1], 3), 2), originalX = _a[0], originalY = _a[1];\r\n    childEvent.datas.originalX = originalX;\r\n    childEvent.datas.originalY = originalY;\r\n    return childEvent;\r\n}\n\nfunction renderDirectionControlsByInfos(moveable, ableName, renderDirections, React) {\r\n    var _a = moveable.getState(), renderPoses = _a.renderPoses, rotationRad = _a.rotation, direction = _a.direction;\r\n    var zoom = getProps(moveable.props, ableName).zoom;\r\n    var degRotation = absDegree(rotationRad / Math.PI * 180);\r\n    var directionMap = {};\r\n    var renderState = moveable.renderState;\r\n    if (!renderState.renderDirectionMap) {\r\n        renderState.renderDirectionMap = {};\r\n    }\r\n    var renderDirectionMap = renderState.renderDirectionMap;\r\n    renderDirections.forEach(function (_a) {\r\n        var dir = _a.dir;\r\n        directionMap[dir] = true;\r\n    });\r\n    var directionSign = sign(direction);\r\n    return renderDirections.map(function (_a) {\r\n        var data = _a.data, classNames = _a.classNames, dir = _a.dir;\r\n        var indexes = DIRECTION_INDEXES[dir];\r\n        if (!indexes || !directionMap[dir]) {\r\n            return null;\r\n        }\r\n        renderDirectionMap[dir] = true;\r\n        var directionRotation = ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(degRotation, 15) + directionSign * DIRECTION_ROTATIONS[dir] + 720) % 180;\r\n        var dataAttrs = {};\r\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getKeys)(data).forEach(function (name) {\r\n            dataAttrs[\"data-\".concat(name)] = data[name];\r\n        });\r\n        return (React.createElement(\"div\", __assign({ className: prefix.apply(void 0, __spreadArray([\"control\", \"direction\", dir, ableName], __read(classNames), false)), \"data-rotation\": directionRotation, \"data-direction\": dir }, dataAttrs, { key: \"direction-\".concat(dir), style: getControlTransform.apply(void 0, __spreadArray([rotationRad, zoom], __read(indexes.map(function (index) { return renderPoses[index]; })), false)) })));\r\n    });\r\n}\r\nfunction renderDirectionControls(moveable, defaultDirections, ableName, React) {\r\n    var _a = getProps(moveable.props, ableName), _b = _a.renderDirections, directions = _b === void 0 ? defaultDirections : _b, displayAroundControls = _a.displayAroundControls;\r\n    if (!directions) {\r\n        return [];\r\n    }\r\n    var renderDirections = directions === true ? DIRECTIONS : directions;\r\n    return __spreadArray(__spreadArray([], __read((displayAroundControls ? renderAroundControls(moveable, React, ableName, renderDirections) : [])), false), __read(renderDirectionControlsByInfos(moveable, ableName, renderDirections.map(function (dir) {\r\n        return {\r\n            data: {},\r\n            classNames: [],\r\n            dir: dir,\r\n        };\r\n    }), React)), false);\r\n}\r\nfunction renderLine(React, direction, pos1, pos2, zoom, key) {\r\n    var classNames = [];\r\n    for (var _i = 6; _i < arguments.length; _i++) {\r\n        classNames[_i - 6] = arguments[_i];\r\n    }\r\n    var rad = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(pos1, pos2);\r\n    var rotation = direction ? ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(rad / Math.PI * 180, 15)) % 180 : -1;\r\n    return React.createElement(\"div\", { key: \"line-\".concat(key), className: prefix.apply(void 0, __spreadArray([\"line\", \"direction\", direction ? \"edge\" : \"\", direction], __read(classNames), false)), \"data-rotation\": rotation, \"data-line-key\": key, \"data-direction\": direction, style: getLineStyle(pos1, pos2, zoom, rad) });\r\n}\r\nfunction renderEdgeLines(React, ableName, edge, poses, zoom) {\r\n    var directions = edge === true ? DIRECTIONS4 : edge;\r\n    return directions.map(function (direction, i) {\r\n        var _a = __read(DIRECTION_INDEXES[direction], 2), index1 = _a[0], index2 = _a[1];\r\n        if (index2 == null) {\r\n            return;\r\n        }\r\n        return renderLine(React, direction, poses[index1], poses[index2], zoom, \"\".concat(ableName, \"Edge\").concat(i), ableName);\r\n    }).filter(Boolean);\r\n}\r\nfunction getRenderDirections(ableName) {\r\n    return function (moveable, React) {\r\n        var edge = getProps(moveable.props, ableName).edge;\r\n        if (edge && (edge === true || edge.length)) {\r\n            return __spreadArray(__spreadArray([], __read(renderEdgeLines(React, ableName, edge, moveable.getState().renderPoses, moveable.props.zoom)), false), __read(renderDiagonalDirections(moveable, ableName, React)), false);\r\n        }\r\n        return renderAllDirections(moveable, ableName, React);\r\n    };\r\n}\r\nfunction renderAllDirections(moveable, ableName, React) {\r\n    return renderDirectionControls(moveable, DIRECTIONS, ableName, React);\r\n}\r\nfunction renderDiagonalDirections(moveable, ableName, React) {\r\n    return renderDirectionControls(moveable, [\"nw\", \"ne\", \"sw\", \"se\"], ableName, React);\r\n}\r\nfunction renderAroundControls(moveable, React, ableName, renderDirections) {\r\n    var renderState = moveable.renderState;\r\n    if (!renderState.renderDirectionMap) {\r\n        renderState.renderDirectionMap = {};\r\n    }\r\n    var _a = moveable.getState(), renderPoses = _a.renderPoses, rotationRad = _a.rotation, direction = _a.direction;\r\n    var renderDirectionMap = renderState.renderDirectionMap;\r\n    var zoom = moveable.props.zoom;\r\n    var directionSign = sign(direction);\r\n    var degRotation = rotationRad / Math.PI * 180;\r\n    return (renderDirections || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getKeys)(renderDirectionMap)).map(function (dir) {\r\n        var indexes = DIRECTION_INDEXES[dir];\r\n        if (!indexes) {\r\n            return null;\r\n        }\r\n        var directionRotation = ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(degRotation, 15) + directionSign * DIRECTION_ROTATIONS[dir] + 720) % 180;\r\n        var classNames = [\"around-control\"];\r\n        if (ableName) {\r\n            classNames.push(\"direction\", ableName);\r\n        }\r\n        return (React.createElement(\"div\", { className: prefix.apply(void 0, __spreadArray([], __read(classNames), false)), \"data-rotation\": directionRotation, \"data-direction\": dir, key: \"direction-around-\".concat(dir), style: getControlTransform.apply(void 0, __spreadArray([rotationRad, zoom], __read(indexes.map(function (index) { return renderPoses[index]; })), false)) }));\r\n    });\r\n}\n\nfunction checkBoundPoses(bounds, verticalPoses, horizontalPoses) {\r\n    var _a = bounds || {}, _b = _a.position, position = _b === void 0 ? \"client\" : _b, _c = _a.left, left = _c === void 0 ? -Infinity : _c, _d = _a.top, top = _d === void 0 ? -Infinity : _d, _e = _a.right, right = _e === void 0 ? Infinity : _e, _f = _a.bottom, bottom = _f === void 0 ? Infinity : _f;\r\n    var nextBounds = {\r\n        position: position,\r\n        left: left,\r\n        top: top,\r\n        right: right,\r\n        bottom: bottom,\r\n    };\r\n    return {\r\n        vertical: checkBounds(nextBounds, verticalPoses, true),\r\n        horizontal: checkBounds(nextBounds, horizontalPoses, false),\r\n    };\r\n}\r\nfunction getBounds(moveable, externalBounds) {\r\n    var _a = moveable.state, _b = _a.containerClientRect, containerHeight = _b.clientHeight, containerWidth = _b.clientWidth, clientLeft = _b.clientLeft, clientTop = _b.clientTop, _c = _a.snapOffset, snapOffsetLeft = _c.left, snapOffsetTop = _c.top, snapOffsetRight = _c.right, snapOffsetBottom = _c.bottom;\r\n    var bounds = externalBounds || moveable.props.bounds || {};\r\n    var position = bounds.position || \"client\";\r\n    var isCSS = position === \"css\";\r\n    var _d = bounds.left, left = _d === void 0 ? -Infinity : _d, _e = bounds.top, top = _e === void 0 ? -Infinity : _e;\r\n    var _f = bounds.right, right = _f === void 0 ? isCSS ? -Infinity : Infinity : _f, _g = bounds.bottom, bottom = _g === void 0 ? isCSS ? -Infinity : Infinity : _g;\r\n    if (isCSS) {\r\n        right = containerWidth + snapOffsetRight - snapOffsetLeft - right;\r\n        bottom = containerHeight + snapOffsetBottom - snapOffsetTop - bottom;\r\n    }\r\n    return {\r\n        left: left + snapOffsetLeft - clientLeft,\r\n        right: right + snapOffsetLeft - clientLeft,\r\n        top: top + snapOffsetTop - clientTop,\r\n        bottom: bottom + snapOffsetTop - clientTop,\r\n    };\r\n}\r\nfunction checkBoundKeepRatio(moveable, startPos, endPos) {\r\n    var _a = getBounds(moveable), left = _a.left, top = _a.top, right = _a.right, bottom = _a.bottom;\r\n    var _b = __read(endPos, 2), endX = _b[0], endY = _b[1];\r\n    var _c = __read((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(endPos, startPos), 2), dx = _c[0], dy = _c[1];\r\n    if (abs(dx) < TINY_NUM) {\r\n        dx = 0;\r\n    }\r\n    if (abs(dy) < TINY_NUM) {\r\n        dy = 0;\r\n    }\r\n    var isBottom = dy > 0;\r\n    var isRight = dx > 0;\r\n    var verticalInfo = {\r\n        isBound: false,\r\n        offset: 0,\r\n        pos: 0,\r\n    };\r\n    var horizontalInfo = {\r\n        isBound: false,\r\n        offset: 0,\r\n        pos: 0,\r\n    };\r\n    if (dx === 0 && dy === 0) {\r\n        return {\r\n            vertical: verticalInfo,\r\n            horizontal: horizontalInfo,\r\n        };\r\n    }\r\n    else if (dx === 0) {\r\n        if (isBottom) {\r\n            if (bottom < endY) {\r\n                horizontalInfo.pos = bottom;\r\n                horizontalInfo.offset = endY - bottom;\r\n            }\r\n        }\r\n        else {\r\n            if (top > endY) {\r\n                horizontalInfo.pos = top;\r\n                horizontalInfo.offset = endY - top;\r\n            }\r\n        }\r\n    }\r\n    else if (dy === 0) {\r\n        if (isRight) {\r\n            if (right < endX) {\r\n                verticalInfo.pos = right;\r\n                verticalInfo.offset = endX - right;\r\n            }\r\n        }\r\n        else {\r\n            if (left > endX) {\r\n                verticalInfo.pos = left;\r\n                verticalInfo.offset = endX - left;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // y - y1 = a * (x - x1)\r\n        var a = dy / dx;\r\n        var b = endPos[1] - a * endX;\r\n        var y = 0;\r\n        var x = 0;\r\n        var isBound = false;\r\n        if (isRight && right <= endX) {\r\n            y = a * right + b;\r\n            x = right;\r\n            isBound = true;\r\n        }\r\n        else if (!isRight && endX <= left) {\r\n            y = a * left + b;\r\n            x = left;\r\n            isBound = true;\r\n        }\r\n        if (isBound) {\r\n            if (y < top || y > bottom) {\r\n                isBound = false;\r\n            }\r\n        }\r\n        if (!isBound) {\r\n            if (isBottom && bottom <= endY) {\r\n                y = bottom;\r\n                x = (y - b) / a;\r\n                isBound = true;\r\n            }\r\n            else if (!isBottom && endY <= top) {\r\n                y = top;\r\n                x = (y - b) / a;\r\n                isBound = true;\r\n            }\r\n        }\r\n        if (isBound) {\r\n            verticalInfo.isBound = true;\r\n            verticalInfo.pos = x;\r\n            verticalInfo.offset = endX - x;\r\n            horizontalInfo.isBound = true;\r\n            horizontalInfo.pos = y;\r\n            horizontalInfo.offset = endY - y;\r\n        }\r\n    }\r\n    return {\r\n        vertical: verticalInfo,\r\n        horizontal: horizontalInfo,\r\n    };\r\n}\r\nfunction checkBounds(bounds, poses, isVertical) {\r\n    // 0   [100 - 200]  300\r\n    var startBoundPos = bounds[isVertical ? \"left\" : \"top\"];\r\n    var endBoundPos = bounds[isVertical ? \"right\" : \"bottom\"];\r\n    // 450\r\n    var minPos = Math.min.apply(Math, __spreadArray([], __read(poses), false));\r\n    var maxPos = Math.max.apply(Math, __spreadArray([], __read(poses), false));\r\n    var boundInfos = [];\r\n    if (startBoundPos + 1 > minPos) {\r\n        boundInfos.push({\r\n            direction: \"start\",\r\n            isBound: true,\r\n            offset: minPos - startBoundPos,\r\n            pos: startBoundPos,\r\n        });\r\n    }\r\n    if (endBoundPos - 1 < maxPos) {\r\n        boundInfos.push({\r\n            direction: \"end\",\r\n            isBound: true,\r\n            offset: maxPos - endBoundPos,\r\n            pos: endBoundPos,\r\n        });\r\n    }\r\n    if (!boundInfos.length) {\r\n        boundInfos.push({\r\n            isBound: false,\r\n            offset: 0,\r\n            pos: 0,\r\n        });\r\n    }\r\n    return boundInfos.sort(function (a, b) { return abs(b.offset) - abs(a.offset); });\r\n}\r\nfunction isBoundRotate$1(relativePoses, boundRect, rad) {\r\n    var nextPoses = rad ? relativePoses.map(function (pos) { return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.rotate)(pos, rad); }) : relativePoses;\r\n    return nextPoses.some(function (pos) {\r\n        return (pos[0] < boundRect.left && abs(pos[0] - boundRect.left) > 0.1)\r\n            || (pos[0] > boundRect.right && abs(pos[0] - boundRect.right) > 0.1)\r\n            || (pos[1] < boundRect.top && abs(pos[1] - boundRect.top) > 0.1)\r\n            || (pos[1] > boundRect.bottom && abs(pos[1] - boundRect.bottom) > 0.1);\r\n    });\r\n}\r\nfunction boundRotate(vec, boundPos, index) {\r\n    var r = getDistSize(vec);\r\n    var nextPos = Math.sqrt(r * r - boundPos * boundPos) || 0;\r\n    return [nextPos, -nextPos].sort(function (a, b) {\r\n        return abs(a - vec[index ? 0 : 1]) - abs(b - vec[index ? 0 : 1]);\r\n    }).map(function (pos) {\r\n        return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)([0, 0], index ? [pos, boundPos] : [boundPos, pos]);\r\n    });\r\n}\r\nfunction checkRotateBounds(moveable, prevPoses, nextPoses, origin, rotation) {\r\n    if (!moveable.props.bounds) {\r\n        return [];\r\n    }\r\n    var rad = rotation * Math.PI / 180;\r\n    var _a = getBounds(moveable), left = _a.left, top = _a.top, right = _a.right, bottom = _a.bottom;\r\n    var relativeLeft = left - origin[0];\r\n    var relativeRight = right - origin[0];\r\n    var relativeTop = top - origin[1];\r\n    var relativeBottom = bottom - origin[1];\r\n    var boundRect = {\r\n        left: relativeLeft,\r\n        top: relativeTop,\r\n        right: relativeRight,\r\n        bottom: relativeBottom,\r\n    };\r\n    if (!isBoundRotate$1(nextPoses, boundRect, 0)) {\r\n        return [];\r\n    }\r\n    var result = [];\r\n    [\r\n        [relativeLeft, 0],\r\n        [relativeRight, 0],\r\n        [relativeTop, 1],\r\n        [relativeBottom, 1],\r\n    ].forEach(function (_a) {\r\n        var _b = __read(_a, 2), boundPos = _b[0], index = _b[1];\r\n        nextPoses.forEach(function (nextPos) {\r\n            var relativeRad1 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)([0, 0], nextPos);\r\n            result.push.apply(result, __spreadArray([], __read(boundRotate(nextPos, boundPos, index)\r\n                .map(function (relativeRad2) { return rad + relativeRad2 - relativeRad1; })\r\n                .filter(function (nextRad) { return !isBoundRotate$1(prevPoses, boundRect, nextRad); })\r\n                .map(function (nextRad) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(nextRad * 180 / Math.PI, TINY_NUM); })), false));\r\n        });\r\n    });\r\n    return result;\r\n}\n\nvar VERTICAL_NAMES = [\"left\", \"right\", \"center\"];\r\nvar HORIZONTAL_NAMES = [\"top\", \"bottom\", \"middle\"];\r\nvar SNAP_SKIP_NAMES_MAP = {\r\n    \"left\": \"start\",\r\n    \"right\": \"end\",\r\n    \"center\": \"center\",\r\n    \"top\": \"start\",\r\n    \"bottom\": \"end\",\r\n    \"middle\": \"center\",\r\n};\r\nvar VERTICAL_NAMES_MAP = {\r\n    start: \"left\",\r\n    end: \"right\",\r\n    center: \"center\",\r\n};\r\nvar HORIZONTAL_NAMES_MAP = {\r\n    start: \"top\",\r\n    end: \"bottom\",\r\n    center: \"middle\",\r\n};\r\nfunction getInitialBounds() {\r\n    return {\r\n        left: false,\r\n        top: false,\r\n        right: false,\r\n        bottom: false,\r\n    };\r\n}\r\nfunction hasGuidelines(moveable, ableName) {\r\n    var _a = moveable.props, snappable = _a.snappable, bounds = _a.bounds, innerBounds = _a.innerBounds, verticalGuidelines = _a.verticalGuidelines, horizontalGuidelines = _a.horizontalGuidelines, snapGridWidth = _a.snapGridWidth, snapGridHeight = _a.snapGridHeight, _b = moveable.state, guidelines = _b.guidelines, enableSnap = _b.enableSnap;\r\n    if (!snappable ||\r\n        !enableSnap ||\r\n        (ableName && snappable !== true && snappable.indexOf(ableName) < 0)) {\r\n        return false;\r\n    }\r\n    if (snapGridWidth ||\r\n        snapGridHeight ||\r\n        bounds ||\r\n        innerBounds ||\r\n        (guidelines && guidelines.length) ||\r\n        (verticalGuidelines && verticalGuidelines.length) ||\r\n        (horizontalGuidelines && horizontalGuidelines.length)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction getSnapDirections(snapDirections) {\r\n    if (snapDirections === false) {\r\n        return {};\r\n    }\r\n    else if (snapDirections === true || !snapDirections) {\r\n        return { left: true, right: true, top: true, bottom: true };\r\n    }\r\n    return snapDirections;\r\n}\r\nfunction mapSnapDirectionPoses(snapDirections, snapPoses) {\r\n    var nextSnapDirections = getSnapDirections(snapDirections);\r\n    var nextSnapPoses = {};\r\n    for (var name_1 in nextSnapDirections) {\r\n        if (name_1 in snapPoses && nextSnapDirections[name_1]) {\r\n            nextSnapPoses[name_1] = snapPoses[name_1];\r\n        }\r\n    }\r\n    return nextSnapPoses;\r\n}\r\nfunction splitSnapDirectionPoses(snapDirections, snapPoses) {\r\n    var nextSnapPoses = mapSnapDirectionPoses(snapDirections, snapPoses);\r\n    var horizontalNames = HORIZONTAL_NAMES.filter(function (name) { return name in nextSnapPoses; });\r\n    var verticalNames = VERTICAL_NAMES.filter(function (name) { return name in nextSnapPoses; });\r\n    return {\r\n        horizontalNames: horizontalNames,\r\n        verticalNames: verticalNames,\r\n        horizontal: horizontalNames.map(function (name) { return nextSnapPoses[name]; }),\r\n        vertical: verticalNames.map(function (name) { return nextSnapPoses[name]; }),\r\n    };\r\n}\r\nfunction calculateContainerPos(rootMatrix, containerRect, n) {\r\n    var clientPos = calculatePosition(rootMatrix, [containerRect.clientLeft, containerRect.clientTop], n);\r\n    return [\r\n        containerRect.left + clientPos[0],\r\n        containerRect.top + clientPos[1],\r\n    ];\r\n}\r\nfunction solveLineConstants(_a) {\r\n    var _b = __read(_a, 2), point1 = _b[0], point2 = _b[1];\r\n    var dx = point2[0] - point1[0];\r\n    var dy = point2[1] - point1[1];\r\n    if (Math.abs(dx) < _daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.TINY_NUM) {\r\n        dx = 0;\r\n    }\r\n    if (Math.abs(dy) < _daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.TINY_NUM) {\r\n        dy = 0;\r\n    }\r\n    // b > 0\r\n    // ax + by + c = 0\r\n    var a = 0;\r\n    var b = 0;\r\n    var c = 0;\r\n    if (!dx) {\r\n        // -x + 1 = 0\r\n        a = -1;\r\n        c = point1[0];\r\n    }\r\n    else if (!dy) {\r\n        // y - 1 = 0\r\n        b = 1;\r\n        c = -point1[1];\r\n    }\r\n    else {\r\n        // y = -a(x - x1) + y1\r\n        // ax + y + a * x1 - y1 = 0\r\n        a = -dy / dx;\r\n        b = 1;\r\n        c = a * point1[0] - point1[1];\r\n    }\r\n    return [a, b, c].map(function (v) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(v, _daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.TINY_NUM); });\r\n}\n\nvar NAME_snapRotationThreshold = \"snapRotationThreshold\";\r\nvar NAME_snapRotationDegrees = \"snapRotationDegrees\";\r\nvar NAME_snapHorizontalThreshold = \"snapHorizontalThreshold\";\r\nvar NAME_snapVerticalThreshold = \"snapVerticalThreshold\";\n\nfunction checkMoveableSnapPoses(moveable, posesX, posesY, dirXs, dirYs, customSnapVerticalThreshold, customSnapHorizontalThreshold) {\r\n    var _a;\r\n    if (dirXs === void 0) { dirXs = []; }\r\n    if (dirYs === void 0) { dirYs = []; }\r\n    var props = moveable.props;\r\n    var snapThresholdMultiples = ((_a = moveable.state.snapThresholdInfo) === null || _a === void 0 ? void 0 : _a.multiples) || [1, 1];\r\n    var snapHorizontalThreshold = selectValue(customSnapHorizontalThreshold, props[NAME_snapHorizontalThreshold], 5);\r\n    var snapVerticalThreshold = selectValue(customSnapVerticalThreshold, props[NAME_snapVerticalThreshold], 5);\r\n    return checkSnapPoses(moveable.state.guidelines, posesX, posesY, dirXs, dirYs, snapHorizontalThreshold, snapVerticalThreshold, snapThresholdMultiples);\r\n}\r\nfunction checkSnapPoses(guidelines, posesX, posesY, dirXs, dirYs, snapHorizontalThreshold, snapVerticalThreshold, multiples) {\r\n    return {\r\n        vertical: checkSnap(guidelines, \"vertical\", posesX, snapVerticalThreshold * multiples[0], dirXs),\r\n        horizontal: checkSnap(guidelines, \"horizontal\", posesY, snapHorizontalThreshold * multiples[1], dirYs),\r\n    };\r\n}\r\nfunction checkSnapKeepRatio(moveable, startPos, endPos) {\r\n    var _a = __read(endPos, 2), endX = _a[0], endY = _a[1];\r\n    var _b = __read(startPos, 2), startX = _b[0], startY = _b[1];\r\n    var _c = __read((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(endPos, startPos), 2), dx = _c[0], dy = _c[1];\r\n    var isBottom = dy > 0;\r\n    var isRight = dx > 0;\r\n    dx = getTinyDist(dx);\r\n    dy = getTinyDist(dy);\r\n    var verticalInfo = {\r\n        isSnap: false,\r\n        offset: 0,\r\n        pos: 0,\r\n    };\r\n    var horizontalInfo = {\r\n        isSnap: false,\r\n        offset: 0,\r\n        pos: 0,\r\n    };\r\n    if (dx === 0 && dy === 0) {\r\n        return {\r\n            vertical: verticalInfo,\r\n            horizontal: horizontalInfo,\r\n        };\r\n    }\r\n    var _d = checkMoveableSnapPoses(moveable, dx ? [endX] : [], dy ? [endY] : [], [], [], undefined, undefined), verticalSnapInfo = _d.vertical, horizontalSnapInfo = _d.horizontal;\r\n    verticalSnapInfo.posInfos.filter(function (_a) {\r\n        var pos = _a.pos;\r\n        return isRight ? pos >= startX : pos <= startX;\r\n    });\r\n    horizontalSnapInfo.posInfos.filter(function (_a) {\r\n        var pos = _a.pos;\r\n        return isBottom ? pos >= startY : pos <= startY;\r\n    });\r\n    verticalSnapInfo.isSnap = verticalSnapInfo.posInfos.length > 0;\r\n    horizontalSnapInfo.isSnap = horizontalSnapInfo.posInfos.length > 0;\r\n    var _e = getNearestSnapGuidelineInfo(verticalSnapInfo), isVerticalSnap = _e.isSnap, verticalGuideline = _e.guideline;\r\n    var _f = getNearestSnapGuidelineInfo(horizontalSnapInfo), isHorizontalSnap = _f.isSnap, horizontalGuideline = _f.guideline;\r\n    var horizontalPos = isHorizontalSnap ? horizontalGuideline.pos[1] : 0;\r\n    var verticalPos = isVerticalSnap ? verticalGuideline.pos[0] : 0;\r\n    if (dx === 0) {\r\n        if (isHorizontalSnap) {\r\n            horizontalInfo.isSnap = true;\r\n            horizontalInfo.pos = horizontalGuideline.pos[1];\r\n            horizontalInfo.offset = endY - horizontalInfo.pos;\r\n        }\r\n    }\r\n    else if (dy === 0) {\r\n        if (isVerticalSnap) {\r\n            verticalInfo.isSnap = true;\r\n            verticalInfo.pos = verticalPos;\r\n            verticalInfo.offset = endX - verticalPos;\r\n        }\r\n    }\r\n    else {\r\n        // y - y1 = a * (x - x1)\r\n        var a = dy / dx;\r\n        var b = endPos[1] - a * endX;\r\n        var y = 0;\r\n        var x = 0;\r\n        var isSnap = false;\r\n        if (isVerticalSnap) {\r\n            x = verticalPos;\r\n            y = a * x + b;\r\n            isSnap = true;\r\n        }\r\n        else if (isHorizontalSnap) {\r\n            y = horizontalPos;\r\n            x = (y - b) / a;\r\n            isSnap = true;\r\n        }\r\n        if (isSnap) {\r\n            verticalInfo.isSnap = true;\r\n            verticalInfo.pos = x;\r\n            verticalInfo.offset = endX - x;\r\n            horizontalInfo.isSnap = true;\r\n            horizontalInfo.pos = y;\r\n            horizontalInfo.offset = endY - y;\r\n        }\r\n    }\r\n    return {\r\n        vertical: verticalInfo,\r\n        horizontal: horizontalInfo,\r\n    };\r\n}\r\nfunction getStringDirection(dir) {\r\n    var stringDirection = \"\";\r\n    if (dir === -1 || dir === \"top\" || dir === \"left\") {\r\n        stringDirection = \"start\";\r\n    }\r\n    else if (dir === 0 || dir === \"center\" || dir === \"middle\") {\r\n        stringDirection = \"center\";\r\n    }\r\n    else if (dir === 1 || dir === \"right\" || dir === \"bottom\") {\r\n        stringDirection = \"end\";\r\n    }\r\n    return stringDirection;\r\n}\r\nfunction checkSnaps(moveable, rect, customSnapVerticalThreshold, customSnapHorizontalThreshold) {\r\n    var poses = splitSnapDirectionPoses(moveable.props.snapDirections, rect);\r\n    var result = checkMoveableSnapPoses(moveable, poses.vertical, poses.horizontal, poses.verticalNames.map(function (name) { return getStringDirection(name); }), poses.horizontalNames.map(function (name) { return getStringDirection(name); }), customSnapVerticalThreshold, customSnapHorizontalThreshold);\r\n    var horizontalDirection = getStringDirection(poses.horizontalNames[result.horizontal.index]);\r\n    var verticalDirection = getStringDirection(poses.verticalNames[result.vertical.index]);\r\n    return {\r\n        vertical: __assign(__assign({}, result.vertical), { direction: verticalDirection }),\r\n        horizontal: __assign(__assign({}, result.horizontal), { direction: horizontalDirection }),\r\n    };\r\n}\r\nfunction getNearestSnapGuidelineInfo(snapInfo) {\r\n    var isSnap = snapInfo.isSnap;\r\n    if (!isSnap) {\r\n        return {\r\n            isSnap: false,\r\n            offset: 0,\r\n            dist: -1,\r\n            pos: 0,\r\n            guideline: null,\r\n        };\r\n    }\r\n    var posInfo = snapInfo.posInfos[0];\r\n    var guidelineInfo = posInfo.guidelineInfos[0];\r\n    var offset = guidelineInfo.offset;\r\n    var dist = guidelineInfo.dist;\r\n    var guideline = guidelineInfo.guideline;\r\n    return {\r\n        isSnap: isSnap,\r\n        offset: offset,\r\n        dist: dist,\r\n        pos: posInfo.pos,\r\n        guideline: guideline,\r\n    };\r\n}\r\nfunction checkSnap(guidelines, targetType, targetPoses, snapThreshold, dirs) {\r\n    var _a, _b;\r\n    if (dirs === void 0) { dirs = []; }\r\n    if (!guidelines || !guidelines.length) {\r\n        return {\r\n            isSnap: false,\r\n            index: -1,\r\n            direction: \"\",\r\n            posInfos: [],\r\n        };\r\n    }\r\n    var isVertical = targetType === \"vertical\";\r\n    var posType = isVertical ? 0 : 1;\r\n    var snapPosInfos = targetPoses.map(function (targetPos, index) {\r\n        var direction = dirs[index] || \"\";\r\n        var guidelineInfos = guidelines.map(function (guideline) {\r\n            var pos = guideline.pos;\r\n            var offset = targetPos - pos[posType];\r\n            return {\r\n                offset: offset,\r\n                dist: abs(offset),\r\n                guideline: guideline,\r\n                direction: direction,\r\n            };\r\n        }).filter(function (_a) {\r\n            var guideline = _a.guideline, dist = _a.dist;\r\n            var type = guideline.type;\r\n            if (type !== targetType\r\n                || dist > snapThreshold) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }).sort(function (a, b) { return a.dist - b.dist; });\r\n        return {\r\n            pos: targetPos,\r\n            index: index,\r\n            guidelineInfos: guidelineInfos,\r\n            direction: direction,\r\n        };\r\n    }).filter(function (snapPosInfo) {\r\n        return snapPosInfo.guidelineInfos.length > 0;\r\n    }).sort(function (a, b) {\r\n        return a.guidelineInfos[0].dist - b.guidelineInfos[0].dist;\r\n    });\r\n    var isSnap = snapPosInfos.length > 0;\r\n    return {\r\n        isSnap: isSnap,\r\n        index: isSnap ? snapPosInfos[0].index : -1,\r\n        direction: (_b = (_a = snapPosInfos[0]) === null || _a === void 0 ? void 0 : _a.direction) !== null && _b !== void 0 ? _b : \"\",\r\n        posInfos: snapPosInfos,\r\n    };\r\n}\r\nfunction getSnapInfosByDirection(moveable, \r\n// pos1 pos2 pos3 pos4\r\nposes, snapDirection, customSnapVerticalThreshold, customSnapHorizontalThreshold) {\r\n    var dirs = [];\r\n    if (snapDirection[0] && snapDirection[1]) {\r\n        dirs = [\r\n            snapDirection,\r\n            [-snapDirection[0], snapDirection[1]],\r\n            [snapDirection[0], -snapDirection[1]],\r\n        ];\r\n    }\r\n    else if (!snapDirection[0] && !snapDirection[1]) {\r\n        [\r\n            [-1, -1],\r\n            [1, -1],\r\n            [1, 1],\r\n            [-1, 1],\r\n        ].forEach(function (dir, i, arr) {\r\n            var nextDir = (arr[i + 1] || arr[0]);\r\n            dirs.push(dir);\r\n            dirs.push([\r\n                (dir[0] + nextDir[0]) / 2,\r\n                (dir[1] + nextDir[1]) / 2,\r\n            ]);\r\n        });\r\n    }\r\n    else {\r\n        if (moveable.props.keepRatio) {\r\n            dirs.push([-1, -1], [-1, 1], [1, -1], [1, 1], snapDirection);\r\n        }\r\n        else {\r\n            dirs.push.apply(dirs, __spreadArray([], __read(getPosesByDirection([\r\n                [-1, -1],\r\n                [1, -1],\r\n                [-1, -1],\r\n                [1, 1],\r\n            ], snapDirection)), false));\r\n            if (dirs.length > 1) {\r\n                dirs.push([\r\n                    (dirs[0][0] + dirs[1][0]) / 2,\r\n                    (dirs[0][1] + dirs[1][1]) / 2,\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n    var nextPoses = dirs.map(function (dir) { return getPosByDirection(poses, dir); });\r\n    var xs = nextPoses.map(function (pos) { return pos[0]; });\r\n    var ys = nextPoses.map(function (pos) { return pos[1]; });\r\n    var result = checkMoveableSnapPoses(moveable, xs, ys, dirs.map(function (dir) { return getStringDirection(dir[0]); }), dirs.map(function (dir) { return getStringDirection(dir[1]); }), customSnapVerticalThreshold, customSnapHorizontalThreshold);\r\n    var verticalDirection = getStringDirection(dirs.map(function (dir) { return dir[0]; })[result.vertical.index]);\r\n    var horizontalDirection = getStringDirection(dirs.map(function (dir) { return dir[1]; })[result.horizontal.index]);\r\n    return {\r\n        vertical: __assign(__assign({}, result.vertical), { direction: verticalDirection }),\r\n        horizontal: __assign(__assign({}, result.horizontal), { direction: horizontalDirection }),\r\n    };\r\n}\r\nfunction checkSnapBoundPriority(a, b) {\r\n    var aDist = abs(a.offset);\r\n    var bDist = abs(b.offset);\r\n    if (a.isBound && b.isBound) {\r\n        return bDist - aDist;\r\n    }\r\n    else if (a.isBound) {\r\n        return -1;\r\n    }\r\n    else if (b.isBound) {\r\n        return 1;\r\n    }\r\n    else if (a.isSnap && b.isSnap) {\r\n        return bDist - aDist;\r\n    }\r\n    else if (a.isSnap) {\r\n        return -1;\r\n    }\r\n    else if (b.isSnap) {\r\n        return 1;\r\n    }\r\n    else if (aDist < TINY_NUM) {\r\n        return 1;\r\n    }\r\n    else if (bDist < TINY_NUM) {\r\n        return -1;\r\n    }\r\n    return aDist - bDist;\r\n}\r\nfunction getNearOffsetInfo(offsets, index) {\r\n    return offsets.slice().sort(function (a, b) {\r\n        var aSign = a.sign[index];\r\n        var bSign = b.sign[index];\r\n        var aOffset = a.offset[index];\r\n        var bOffset = b.offset[index];\r\n        // -1 The positions of a and b do not change.\r\n        // 1 The positions of a and b are reversed.\r\n        if (!aSign) {\r\n            return 1;\r\n        }\r\n        else if (!bSign) {\r\n            return -1;\r\n        }\r\n        return checkSnapBoundPriority({ isBound: a.isBound, isSnap: a.isSnap, offset: aOffset }, { isBound: b.isBound, isSnap: b.isSnap, offset: bOffset });\r\n    })[0];\r\n}\r\nfunction getCheckSnapDirections(direction, fixedDirection, keepRatio) {\r\n    var directions = [];\r\n    // const fixedDirection = [-direction[0], -direction[1]];\r\n    if (keepRatio) {\r\n        if (abs(fixedDirection[0]) !== 1 || abs(fixedDirection[1]) !== 1) {\r\n            directions.push([fixedDirection, [-1, -1]], [fixedDirection, [-1, 1]], [fixedDirection, [1, -1]], [fixedDirection, [1, 1]]);\r\n        }\r\n        else {\r\n            directions.push([fixedDirection, [direction[0], -direction[1]]], [fixedDirection, [-direction[0], direction[1]]]);\r\n        }\r\n        directions.push([fixedDirection, direction]);\r\n    }\r\n    else {\r\n        if ((direction[0] && direction[1]) || (!direction[0] && !direction[1])) {\r\n            var endDirection_1 = direction[0] ? direction : [1, 1];\r\n            [1, -1].forEach(function (signX) {\r\n                [1, -1].forEach(function (signY) {\r\n                    var nextDirection = [signX * endDirection_1[0], signY * endDirection_1[1]];\r\n                    if (fixedDirection[0] === nextDirection[0]\r\n                        && fixedDirection[1] === nextDirection[1]) {\r\n                        return;\r\n                    }\r\n                    directions.push([fixedDirection, nextDirection]);\r\n                });\r\n            });\r\n        }\r\n        else if (direction[0]) {\r\n            var signs = abs(fixedDirection[0]) === 1 ? [1] : [1, -1];\r\n            signs.forEach(function (sign) {\r\n                directions.push([\r\n                    [fixedDirection[0], -1],\r\n                    [sign * direction[0], -1],\r\n                ], [\r\n                    [fixedDirection[0], 0],\r\n                    [sign * direction[0], 0],\r\n                ], [\r\n                    [fixedDirection[0], 1],\r\n                    [sign * direction[0], 1],\r\n                ]);\r\n            });\r\n        }\r\n        else if (direction[1]) {\r\n            var signs = abs(fixedDirection[1]) === 1 ? [1] : [1, -1];\r\n            signs.forEach(function (sign) {\r\n                directions.push([\r\n                    [-1, fixedDirection[1]],\r\n                    [-1, sign * direction[1]],\r\n                ], [\r\n                    [0, fixedDirection[1]],\r\n                    [0, sign * direction[1]],\r\n                ], [\r\n                    [1, fixedDirection[1]],\r\n                    [1, sign * direction[1]],\r\n                ]);\r\n            });\r\n        }\r\n    }\r\n    return directions;\r\n}\n\nfunction isStartLine(dot, line) {\r\n    // l    o     => true\r\n    // o    l    => false\r\n    var cx = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.average)([line[0][0], line[1][0]]);\r\n    var cy = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.average)([line[0][1], line[1][1]]);\r\n    return {\r\n        vertical: cx <= dot[0],\r\n        horizontal: cy <= dot[1],\r\n    };\r\n}\r\nfunction hitTestLine(dot, _a) {\r\n    var _b = __read(_a, 2), pos1 = _b[0], pos2 = _b[1];\r\n    var dx = pos2[0] - pos1[0];\r\n    var dy = pos2[1] - pos1[1];\r\n    if (abs(dx) < TINY_NUM) {\r\n        dx = 0;\r\n    }\r\n    if (abs(dy) < TINY_NUM) {\r\n        dy = 0;\r\n    }\r\n    var test1;\r\n    var test2;\r\n    if (!dx) {\r\n        test1 = pos1[0];\r\n        test2 = dot[0];\r\n    }\r\n    else if (!dy) {\r\n        test1 = pos1[1];\r\n        test2 = dot[1];\r\n    }\r\n    else {\r\n        var a = dy / dx;\r\n        // y = a * (x - pos1) + pos1\r\n        test1 = a * (dot[0] - pos1[0]) + pos1[1];\r\n        test2 = dot[1];\r\n    }\r\n    return test1 - test2;\r\n}\r\nfunction isSameStartLine(dots, line, centerSign, error) {\r\n    if (error === void 0) { error = TINY_NUM; }\r\n    return dots.every(function (dot) {\r\n        var value = hitTestLine(dot, line);\r\n        var sign = value <= 0;\r\n        return sign === centerSign || abs(value) <= error;\r\n    });\r\n}\r\nfunction checkInnerBoundDot(pos, start, end, isStart, threshold) {\r\n    if (threshold === void 0) { threshold = 0; }\r\n    if ((isStart && start - threshold <= pos)\r\n        || (!isStart && pos <= end + threshold)) {\r\n        // false 402 565 602 => 37 ([0, 37])\r\n        // true 400 524.9712603540036 600 => 124 ([124, 0])\r\n        // true 400 410 600 => 10 ([10, 0])\r\n        return {\r\n            isBound: true,\r\n            offset: isStart ? start - pos : end - pos,\r\n        };\r\n    }\r\n    return {\r\n        isBound: false,\r\n        offset: 0,\r\n    };\r\n}\r\nfunction checkInnerBound(moveable, _a) {\r\n    var line = _a.line, centerSign = _a.centerSign, verticalSign = _a.verticalSign, horizontalSign = _a.horizontalSign, lineConstants = _a.lineConstants;\r\n    var bounds = moveable.props.innerBounds;\r\n    if (!bounds) {\r\n        return {\r\n            isAllBound: false,\r\n            isBound: false,\r\n            isVerticalBound: false,\r\n            isHorizontalBound: false,\r\n            offset: [0, 0],\r\n        };\r\n    }\r\n    var left = bounds.left, top = bounds.top, width = bounds.width, height = bounds.height;\r\n    var leftLine = [[left, top], [left, top + height]];\r\n    var topLine = [[left, top], [left + width, top]];\r\n    var rightLine = [[left + width, top], [left + width, top + height]];\r\n    var bottomLine = [[left, top + height], [left + width, top + height]];\r\n    if (isSameStartLine([\r\n        [left, top],\r\n        [left + width, top],\r\n        [left, top + height],\r\n        [left + width, top + height],\r\n    ], line, centerSign)) {\r\n        return {\r\n            isAllBound: false,\r\n            isBound: false,\r\n            isVerticalBound: false,\r\n            isHorizontalBound: false,\r\n            offset: [0, 0],\r\n        };\r\n    }\r\n    // test vertical\r\n    var topBoundInfo = checkLineBoundCollision(line, lineConstants, topLine, verticalSign);\r\n    var bottomBoundInfo = checkLineBoundCollision(line, lineConstants, bottomLine, verticalSign);\r\n    // test horizontal\r\n    var leftBoundInfo = checkLineBoundCollision(line, lineConstants, leftLine, horizontalSign);\r\n    var rightBoundInfo = checkLineBoundCollision(line, lineConstants, rightLine, horizontalSign);\r\n    var isAllVerticalBound = topBoundInfo.isBound && bottomBoundInfo.isBound;\r\n    var isVerticalBound = topBoundInfo.isBound || bottomBoundInfo.isBound;\r\n    var isAllHorizontalBound = leftBoundInfo.isBound && rightBoundInfo.isBound;\r\n    var isHorizontalBound = leftBoundInfo.isBound || rightBoundInfo.isBound;\r\n    var verticalOffset = maxOffset(topBoundInfo.offset, bottomBoundInfo.offset);\r\n    var horizontalOffset = maxOffset(leftBoundInfo.offset, rightBoundInfo.offset);\r\n    var offset = [0, 0];\r\n    var isBound = false;\r\n    var isAllBound = false;\r\n    if (abs(horizontalOffset) < abs(verticalOffset)) {\r\n        offset = [verticalOffset, 0];\r\n        isBound = isVerticalBound;\r\n        isAllBound = isAllVerticalBound;\r\n    }\r\n    else {\r\n        offset = [0, horizontalOffset];\r\n        isBound = isHorizontalBound;\r\n        isAllBound = isAllHorizontalBound;\r\n    }\r\n    return {\r\n        isAllBound: isAllBound,\r\n        isVerticalBound: isVerticalBound,\r\n        isHorizontalBound: isHorizontalBound,\r\n        isBound: isBound,\r\n        offset: offset,\r\n    };\r\n}\r\nfunction checkLineBoundCollision(line, _a, boundLine, isStart, threshold, isRender) {\r\n    var _b = __read(_a, 2), a = _b[0], b = _b[1];\r\n    var dot1 = line[0];\r\n    // const dot2 = line[1];\r\n    var boundDot1 = boundLine[0];\r\n    var boundDot2 = boundLine[1];\r\n    // const dy1 = getTinyDist(dot2[1] - dot1[1]);\r\n    // const dx1 = getTinyDist(dot2[0] - dot1[0]);\r\n    var dy2 = getTinyDist(boundDot2[1] - boundDot1[1]);\r\n    var dx2 = getTinyDist(boundDot2[0] - boundDot1[0]);\r\n    var hasDx = b;\r\n    var hasDy = a;\r\n    var slope = -a / b;\r\n    // lineConstants\r\n    // ax + by + c = 0\r\n    // dx2 or dy2 is zero\r\n    if (!dx2) {\r\n        // vertical\r\n        // by + c = 0\r\n        if (isRender && !hasDy) {\r\n            // 90deg\r\n            return {\r\n                isBound: false,\r\n                offset: 0,\r\n            };\r\n        }\r\n        else if (hasDx) {\r\n            // ax + by + c = 0\r\n            // const y = dy1 ? dy1 / dx1 * (boundDot1[0] - dot1[0]) + dot1[1] : dot1[1];\r\n            var y = slope * (boundDot1[0] - dot1[0]) + dot1[1];\r\n            // boundDot1[1] <= y  <= boundDot2[1]\r\n            return checkInnerBoundDot(y, boundDot1[1], boundDot2[1], isStart, threshold);\r\n        }\r\n        else {\r\n            // ax + c = 0\r\n            var offset = boundDot1[0] - dot1[0];\r\n            var isBound = abs(offset) <= (threshold || 0);\r\n            return {\r\n                isBound: isBound,\r\n                offset: isBound ? offset : 0,\r\n            };\r\n        }\r\n    }\r\n    else if (!dy2) {\r\n        // horizontal\r\n        if (isRender && !hasDx) {\r\n            // 90deg\r\n            return {\r\n                isBound: false,\r\n                offset: 0,\r\n            };\r\n        }\r\n        else if (hasDy) {\r\n            // y = a * (x - x1) + y1\r\n            // x = (y - y1) / a + x1\r\n            // const a = dy1 / dx1;\r\n            // const x = dx1 ? (boundDot1[1] - dot1[1]) / a + dot1[0] : dot1[0];\r\n            var x = (boundDot1[1] - dot1[1]) / slope + dot1[0];\r\n            // boundDot1[0] <= x && x <= boundDot2[0]\r\n            return checkInnerBoundDot(x, boundDot1[0], boundDot2[0], isStart, threshold);\r\n        }\r\n        else {\r\n            var offset = boundDot1[1] - dot1[1];\r\n            var isBound = abs(offset) <= (threshold || 0);\r\n            return {\r\n                isBound: isBound,\r\n                offset: isBound ? offset : 0,\r\n            };\r\n        }\r\n    }\r\n    return {\r\n        isBound: false,\r\n        offset: 0,\r\n    };\r\n}\r\nfunction getInnerBoundInfo(moveable, lineInfos, datas) {\r\n    return lineInfos.map(function (info) {\r\n        var _a = checkInnerBound(moveable, info), isBound = _a.isBound, offset = _a.offset, isVerticalBound = _a.isVerticalBound, isHorizontalBound = _a.isHorizontalBound;\r\n        var multiple = info.multiple;\r\n        var sizeOffset = getDragDist({\r\n            datas: datas,\r\n            distX: offset[0],\r\n            distY: offset[1],\r\n        }).map(function (size, i) { return size * (multiple[i] ? 2 / multiple[i] : 0); });\r\n        return {\r\n            sign: multiple,\r\n            isBound: isBound,\r\n            isVerticalBound: isVerticalBound,\r\n            isHorizontalBound: isHorizontalBound,\r\n            isSnap: false,\r\n            offset: sizeOffset,\r\n        };\r\n    });\r\n}\r\nfunction getInnerBoundDragInfo(moveable, poses, datas) {\r\n    var _a;\r\n    var lines = getCheckInnerBoundLineInfos(moveable, poses, [0, 0], false).map(function (info) {\r\n        return __assign(__assign({}, info), { multiple: info.multiple.map(function (dir) { return abs(dir) * 2; }) });\r\n    });\r\n    var innerBoundInfo = getInnerBoundInfo(moveable, lines, datas);\r\n    var widthOffsetInfo = getNearOffsetInfo(innerBoundInfo, 0);\r\n    var heightOffsetInfo = getNearOffsetInfo(innerBoundInfo, 1);\r\n    var verticalOffset = 0;\r\n    var horizontalOffset = 0;\r\n    var isVerticalBound = widthOffsetInfo.isVerticalBound || heightOffsetInfo.isVerticalBound;\r\n    var isHorizontalBound = widthOffsetInfo.isHorizontalBound || heightOffsetInfo.isHorizontalBound;\r\n    if (isVerticalBound || isHorizontalBound) {\r\n        _a = __read(getInverseDragDist({\r\n            datas: datas,\r\n            distX: -widthOffsetInfo.offset[0],\r\n            distY: -heightOffsetInfo.offset[1],\r\n        }), 2), verticalOffset = _a[0], horizontalOffset = _a[1];\r\n    }\r\n    return {\r\n        vertical: {\r\n            isBound: isVerticalBound,\r\n            offset: verticalOffset,\r\n        },\r\n        horizontal: {\r\n            isBound: isHorizontalBound,\r\n            offset: horizontalOffset,\r\n        },\r\n    };\r\n}\r\nfunction getCheckSnapLineDirections(direction, keepRatio) {\r\n    var lineDirections = [];\r\n    var x = direction[0];\r\n    var y = direction[1];\r\n    if (x && y) {\r\n        lineDirections.push([[0, y * 2], direction, [-x, y]], [[x * 2, 0], direction, [x, -y]]);\r\n    }\r\n    else if (x) {\r\n        // vertcal\r\n        lineDirections.push([[x * 2, 0], [x, 1], [x, -1]]);\r\n        if (keepRatio) {\r\n            lineDirections.push([[0, -1], [x, -1], [-x, -1]], [[0, 1], [x, 1], [-x, 1]]);\r\n        }\r\n    }\r\n    else if (y) {\r\n        // horizontal\r\n        lineDirections.push([[0, y * 2], [1, y], [-1, y]]);\r\n        if (keepRatio) {\r\n            lineDirections.push([[-1, 0], [-1, y], [-1, -y]], [[1, 0], [1, y], [1, -y]]);\r\n        }\r\n    }\r\n    else {\r\n        // [0, 0] to all direction\r\n        lineDirections.push([[-1, 0], [-1, -1], [-1, 1]], [[1, 0], [1, -1], [1, 1]], [[0, -1], [-1, -1], [1, -1]], [[0, 1], [-1, 1], [1, 1]]);\r\n    }\r\n    return lineDirections;\r\n}\r\nfunction getCheckInnerBoundLineInfos(moveable, poses, direction, keepRatio) {\r\n    var _a = moveable.state, allMatrix = _a.allMatrix, is3d = _a.is3d;\r\n    var virtualPoses = calculatePoses(allMatrix, 100, 100, is3d ? 4 : 3);\r\n    var center = getPosByDirection(virtualPoses, [0, 0]);\r\n    return getCheckSnapLineDirections(direction, keepRatio).map(function (_a) {\r\n        var _b = __read(_a, 3), multiple = _b[0], dir1 = _b[1], dir2 = _b[2];\r\n        var virtualLine = [\r\n            getPosByDirection(virtualPoses, dir1),\r\n            getPosByDirection(virtualPoses, dir2),\r\n        ];\r\n        var lineConstants = solveLineConstants(virtualLine);\r\n        var _c = isStartLine(center, virtualLine), verticalSign = _c.vertical, horizontalSign = _c.horizontal;\r\n        var centerSign = hitTestLine(center, virtualLine) <= 0;\r\n        return {\r\n            multiple: multiple,\r\n            centerSign: centerSign,\r\n            verticalSign: verticalSign,\r\n            horizontalSign: horizontalSign,\r\n            lineConstants: lineConstants,\r\n            line: [\r\n                getPosByDirection(poses, dir1),\r\n                getPosByDirection(poses, dir2),\r\n            ],\r\n        };\r\n    });\r\n}\r\nfunction isBoundRotate(relativePoses, boundDots, center, rad) {\r\n    var nextPoses = rad ? relativePoses.map(function (pos) { return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.rotate)(pos, rad); }) : relativePoses;\r\n    return [\r\n        [nextPoses[0], nextPoses[1]],\r\n        [nextPoses[1], nextPoses[3]],\r\n        [nextPoses[3], nextPoses[2]],\r\n        [nextPoses[2], nextPoses[0]],\r\n    ].some(function (line) {\r\n        var centerSign = hitTestLine(center, line) <= 0;\r\n        return !isSameStartLine(boundDots, line, centerSign);\r\n    });\r\n}\r\nfunction getDistPointLine(_a) {\r\n    // x = 0, y = 0\r\n    // d = (ax + by + c) / root(a2 + b2)\r\n    var _b = __read(_a, 2), pos1 = _b[0], pos2 = _b[1];\r\n    var dx = pos2[0] - pos1[0];\r\n    var dy = pos2[1] - pos1[1];\r\n    if (!dx) {\r\n        return abs(pos1[0]);\r\n    }\r\n    if (!dy) {\r\n        return abs(pos1[1]);\r\n    }\r\n    // y - y1 = a(x - x1)\r\n    // 0 = ax -y + -a * x1 + y1\r\n    var a = dy / dx;\r\n    return abs((-a * pos1[0] + pos1[1]) / Math.sqrt(Math.pow(a, 2) + 1));\r\n}\r\nfunction solveReverseLine(_a) {\r\n    var _b = __read(_a, 2), pos1 = _b[0], pos2 = _b[1];\r\n    var dx = pos2[0] - pos1[0];\r\n    var dy = pos2[1] - pos1[1];\r\n    if (!dx) {\r\n        return [pos1[0], 0];\r\n    }\r\n    if (!dy) {\r\n        return [0, pos1[1]];\r\n    }\r\n    var a = dy / dx;\r\n    // y - y1 = a (x  - x1)\r\n    // y = ax - a * x1 + y1\r\n    var b = -a * pos1[0] + pos1[1];\r\n    // y = ax + b = -1/a x\r\n    // x = -b / (a + 1 / a)\r\n    // y = b / (1 + 1 / a^2)\r\n    return [\r\n        -b / (a + 1 / a),\r\n        b / ((a * a) + 1),\r\n    ];\r\n}\r\nfunction checkRotateInnerBounds(moveable, prevPoses, nextPoses, origin, rotation) {\r\n    var bounds = moveable.props.innerBounds;\r\n    var rad = rotation * Math.PI / 180;\r\n    if (!bounds) {\r\n        return [];\r\n    }\r\n    var left = bounds.left, top = bounds.top, width = bounds.width, height = bounds.height;\r\n    var relativeLeft = left - origin[0];\r\n    var relativeRight = left + width - origin[0];\r\n    var relativeTop = top - origin[1];\r\n    var relativeBottom = top + height - origin[1];\r\n    var dots = [\r\n        [relativeLeft, relativeTop],\r\n        [relativeRight, relativeTop],\r\n        [relativeLeft, relativeBottom],\r\n        [relativeRight, relativeBottom],\r\n    ];\r\n    var center = getPosByDirection(nextPoses, [0, 0]);\r\n    if (!isBoundRotate(nextPoses, dots, center, 0)) {\r\n        return [];\r\n    }\r\n    var result = [];\r\n    var dotInfos = dots.map(function (dot) { return [\r\n        getDistSize(dot),\r\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)([0, 0], dot),\r\n    ]; });\r\n    [\r\n        [nextPoses[0], nextPoses[1]],\r\n        [nextPoses[1], nextPoses[3]],\r\n        [nextPoses[3], nextPoses[2]],\r\n        [nextPoses[2], nextPoses[0]],\r\n    ].forEach(function (line) {\r\n        var lineRad = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)([0, 0], solveReverseLine(line));\r\n        var lineDist = getDistPointLine(line);\r\n        result.push.apply(result, __spreadArray([], __read(dotInfos\r\n            .filter(function (_a) {\r\n            var _b = __read(_a, 1), dotDist = _b[0];\r\n            return dotDist && lineDist <= dotDist;\r\n        })\r\n            .map(function (_a) {\r\n            var _b = __read(_a, 2), dotDist = _b[0], dotRad = _b[1];\r\n            var distRad = Math.acos(dotDist ? lineDist / dotDist : 0);\r\n            var nextRad1 = dotRad + distRad;\r\n            var nextRad2 = dotRad - distRad;\r\n            return [\r\n                rad + nextRad1 - lineRad,\r\n                rad + nextRad2 - lineRad,\r\n            ];\r\n        })\r\n            .reduce(function (prev, cur) {\r\n            prev.push.apply(prev, __spreadArray([], __read(cur), false));\r\n            return prev;\r\n        }, [])\r\n            .filter(function (nextRad) { return !isBoundRotate(prevPoses, dots, center, nextRad); })\r\n            .map(function (nextRad) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(nextRad * 180 / Math.PI, TINY_NUM); })), false));\r\n    });\r\n    return result;\r\n}\r\nfunction checkInnerBoundPoses(moveable) {\r\n    var innerBounds = moveable.props.innerBounds;\r\n    var boundMap = getInitialBounds();\r\n    if (!innerBounds) {\r\n        return {\r\n            boundMap: boundMap,\r\n            vertical: [],\r\n            horizontal: [],\r\n        };\r\n    }\r\n    var _a = moveable.getRect(), pos1 = _a.pos1, pos2 = _a.pos2, pos3 = _a.pos3, pos4 = _a.pos4;\r\n    var poses = [pos1, pos2, pos3, pos4];\r\n    var center = getPosByDirection(poses, [0, 0]);\r\n    var left = innerBounds.left, top = innerBounds.top, width = innerBounds.width, height = innerBounds.height;\r\n    var leftLine = [[left, top], [left, top + height]];\r\n    var topLine = [[left, top], [left + width, top]];\r\n    var rightLine = [[left + width, top], [left + width, top + height]];\r\n    var bottomLine = [[left, top + height], [left + width, top + height]];\r\n    var lineInfos = getCheckInnerBoundLineInfos(moveable, poses, [0, 0], false);\r\n    var horizontalPoses = [];\r\n    var verticalPoses = [];\r\n    lineInfos.forEach(function (lineInfo) {\r\n        var line = lineInfo.line, lineConstants = lineInfo.lineConstants;\r\n        var _a = isStartLine(center, line), isHorizontalStart = _a.horizontal, isVerticalStart = _a.vertical;\r\n        // test vertical\r\n        var topBoundInfo = checkLineBoundCollision(line, lineConstants, topLine, isVerticalStart, 1, true);\r\n        var bottomBoundInfo = checkLineBoundCollision(line, lineConstants, bottomLine, isVerticalStart, 1, true);\r\n        // test horizontal\r\n        var leftBoundInfo = checkLineBoundCollision(line, lineConstants, leftLine, isHorizontalStart, 1, true);\r\n        var rightBoundInfo = checkLineBoundCollision(line, lineConstants, rightLine, isHorizontalStart, 1, true);\r\n        if (topBoundInfo.isBound && !boundMap.top) {\r\n            horizontalPoses.push(top);\r\n            boundMap.top = true;\r\n        }\r\n        if (bottomBoundInfo.isBound && !boundMap.bottom) {\r\n            horizontalPoses.push(top + height);\r\n            boundMap.bottom = true;\r\n        }\r\n        if (leftBoundInfo.isBound && !boundMap.left) {\r\n            verticalPoses.push(left);\r\n            boundMap.left = true;\r\n        }\r\n        if (rightBoundInfo.isBound && !boundMap.right) {\r\n            verticalPoses.push(left + width);\r\n            boundMap.right = true;\r\n        }\r\n    });\r\n    return {\r\n        boundMap: boundMap,\r\n        horizontal: horizontalPoses,\r\n        vertical: verticalPoses,\r\n    };\r\n}\n\nfunction solveEquation(pos1, pos2, snapOffset, isVertical) {\r\n    var dx = pos2[0] - pos1[0];\r\n    var dy = pos2[1] - pos1[1];\r\n    if (abs(dx) < _daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.TINY_NUM) {\r\n        dx = 0;\r\n    }\r\n    if (abs(dy) < _daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.TINY_NUM) {\r\n        dy = 0;\r\n    }\r\n    if (!dx) {\r\n        // y = 0 * x + b\r\n        // only horizontal\r\n        if (!isVertical) {\r\n            return [0, snapOffset];\r\n        }\r\n        return [0, 0];\r\n    }\r\n    if (!dy) {\r\n        // only vertical\r\n        if (isVertical) {\r\n            return [snapOffset, 0];\r\n        }\r\n        return [0, 0];\r\n    }\r\n    // y = ax + b\r\n    var a = dy / dx;\r\n    var b = pos1[1] - a * pos1[0];\r\n    if (isVertical) {\r\n        // y = a * x + b\r\n        var y = a * (pos2[0] + snapOffset) + b;\r\n        return [snapOffset, y - pos2[1]];\r\n    }\r\n    else {\r\n        // x = (y - b) / a\r\n        var x = (pos2[1] + snapOffset - b) / a;\r\n        return [x - pos2[0], snapOffset];\r\n    }\r\n}\r\nfunction solveNextOffset(pos1, pos2, offset, isVertical, datas) {\r\n    var sizeOffset = solveEquation(pos1, pos2, offset, isVertical);\r\n    if (!sizeOffset) {\r\n        return {\r\n            isOutside: false,\r\n            offset: [0, 0],\r\n        };\r\n    }\r\n    var size = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDist)(pos1, pos2);\r\n    var dist1 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDist)(sizeOffset, pos1);\r\n    var dist2 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDist)(sizeOffset, pos2);\r\n    var isOutside = dist1 > size || dist2 > size;\r\n    var _a = __read(getDragDist({\r\n        datas: datas,\r\n        distX: sizeOffset[0],\r\n        distY: sizeOffset[1],\r\n    }), 2), widthOffset = _a[0], heightOffset = _a[1];\r\n    return {\r\n        offset: [widthOffset, heightOffset],\r\n        isOutside: isOutside,\r\n    };\r\n}\r\nfunction getSnapBound(boundInfo, snapInfo) {\r\n    if (boundInfo.isBound) {\r\n        return boundInfo.offset;\r\n    }\r\n    else if (snapInfo.isSnap) {\r\n        return getNearestSnapGuidelineInfo(snapInfo).offset;\r\n    }\r\n    return 0;\r\n}\r\nfunction checkThrottleDragRotate(throttleDragRotate, _a, _b, _c, _d) {\r\n    var _e = __read(_a, 2), distX = _e[0], distY = _e[1];\r\n    var _f = __read(_b, 2), isVerticalBound = _f[0], isHorizontalBound = _f[1];\r\n    var _g = __read(_c, 2), isVerticalSnap = _g[0], isHorizontalSnap = _g[1];\r\n    var _h = __read(_d, 2), verticalOffset = _h[0], horizontalOffset = _h[1];\r\n    var offsetX = -verticalOffset;\r\n    var offsetY = -horizontalOffset;\r\n    if (throttleDragRotate && distX && distY) {\r\n        offsetX = 0;\r\n        offsetY = 0;\r\n        var adjustPoses = [];\r\n        if (isVerticalBound && isHorizontalBound) {\r\n            adjustPoses.push([0, horizontalOffset], [verticalOffset, 0]);\r\n        }\r\n        else if (isVerticalBound) {\r\n            adjustPoses.push([verticalOffset, 0]);\r\n        }\r\n        else if (isHorizontalBound) {\r\n            adjustPoses.push([0, horizontalOffset]);\r\n        }\r\n        else if (isVerticalSnap && isHorizontalSnap) {\r\n            adjustPoses.push([0, horizontalOffset], [verticalOffset, 0]);\r\n        }\r\n        else if (isVerticalSnap) {\r\n            adjustPoses.push([verticalOffset, 0]);\r\n        }\r\n        else if (isHorizontalSnap) {\r\n            adjustPoses.push([0, horizontalOffset]);\r\n        }\r\n        if (adjustPoses.length) {\r\n            adjustPoses.sort(function (a, b) {\r\n                return (getDistSize((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)([distX, distY], a)) -\r\n                    getDistSize((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)([distX, distY], b)));\r\n            });\r\n            var adjustPos = adjustPoses[0];\r\n            if (adjustPos[0] && abs(distX) > _daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.TINY_NUM) {\r\n                offsetX = -adjustPos[0];\r\n                offsetY =\r\n                    (distY * abs(distX + offsetX)) / abs(distX) -\r\n                        distY;\r\n            }\r\n            else if (adjustPos[1] && abs(distY) > _daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.TINY_NUM) {\r\n                var prevDistY = distY;\r\n                offsetY = -adjustPos[1];\r\n                offsetX =\r\n                    (distX * abs(distY + offsetY)) / abs(prevDistY) -\r\n                        distX;\r\n            }\r\n            if (throttleDragRotate && isHorizontalBound && isVerticalBound) {\r\n                if (abs(offsetX) > _daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.TINY_NUM &&\r\n                    abs(offsetX) < abs(verticalOffset)) {\r\n                    var scale = abs(verticalOffset) / abs(offsetX);\r\n                    offsetX *= scale;\r\n                    offsetY *= scale;\r\n                }\r\n                else if (abs(offsetY) > _daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.TINY_NUM &&\r\n                    abs(offsetY) < abs(horizontalOffset)) {\r\n                    var scale = abs(horizontalOffset) / abs(offsetY);\r\n                    offsetX *= scale;\r\n                    offsetY *= scale;\r\n                }\r\n                else {\r\n                    offsetX = maxOffset(-verticalOffset, offsetX);\r\n                    offsetY = maxOffset(-horizontalOffset, offsetY);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        offsetX = distX || isVerticalBound ? -verticalOffset : 0;\r\n        offsetY = distY || isHorizontalBound ? -horizontalOffset : 0;\r\n    }\r\n    return [offsetX, offsetY];\r\n}\r\nfunction checkSnapBoundsDrag(moveable, distX, distY, throttleDragRotate, ignoreSnap, datas) {\r\n    if (!hasGuidelines(moveable, \"draggable\")) {\r\n        return [\r\n            {\r\n                isSnap: false,\r\n                isBound: false,\r\n                offset: 0,\r\n            },\r\n            {\r\n                isSnap: false,\r\n                isBound: false,\r\n                offset: 0,\r\n            },\r\n        ];\r\n    }\r\n    var poses = getAbsolutePoses(datas.absolutePoses, [distX, distY]);\r\n    var _a = getRect(poses), left = _a.left, right = _a.right, top = _a.top, bottom = _a.bottom;\r\n    var boundPoses = {\r\n        horizontal: poses.map(function (pos) { return pos[1]; }),\r\n        vertical: poses.map(function (pos) { return pos[0]; }),\r\n    };\r\n    var snapDirections = getSnapDirections(moveable.props.snapDirections);\r\n    var snapPoses = splitSnapDirectionPoses(snapDirections, {\r\n        left: left,\r\n        right: right,\r\n        top: top,\r\n        bottom: bottom,\r\n        center: (left + right) / 2,\r\n        middle: (top + bottom) / 2,\r\n    });\r\n    var _b = checkMoveableSnapBounds(moveable, ignoreSnap, snapPoses, boundPoses), verticalSnapBoundInfo = _b.vertical, horizontalSnapBoundInfo = _b.horizontal;\r\n    var _c = getInnerBoundDragInfo(moveable, poses, datas), verticalInnerBoundInfo = _c.vertical, horizontalInnerBoundInfo = _c.horizontal;\r\n    var isVerticalSnap = verticalSnapBoundInfo.isSnap;\r\n    var isHorizontalSnap = horizontalSnapBoundInfo.isSnap;\r\n    var isVerticalBound = verticalSnapBoundInfo.isBound || verticalInnerBoundInfo.isBound;\r\n    var isHorizontalBound = horizontalSnapBoundInfo.isBound || horizontalInnerBoundInfo.isBound;\r\n    var verticalOffset = maxOffset(verticalSnapBoundInfo.offset, verticalInnerBoundInfo.offset);\r\n    var horizontalOffset = maxOffset(horizontalSnapBoundInfo.offset, horizontalInnerBoundInfo.offset);\r\n    var _d = __read(checkThrottleDragRotate(throttleDragRotate, [distX, distY], [isVerticalBound, isHorizontalBound], [isVerticalSnap, isHorizontalSnap], [verticalOffset, horizontalOffset]), 2), offsetX = _d[0], offsetY = _d[1];\r\n    return [\r\n        {\r\n            isBound: isVerticalBound,\r\n            isSnap: isVerticalSnap,\r\n            offset: offsetX,\r\n        },\r\n        {\r\n            isBound: isHorizontalBound,\r\n            isSnap: isHorizontalSnap,\r\n            offset: offsetY,\r\n        },\r\n    ];\r\n}\r\nfunction checkMoveableSnapBounds(moveable, ignoreSnap, poses, boundPoses) {\r\n    if (boundPoses === void 0) { boundPoses = poses; }\r\n    var _a = checkBoundPoses(getBounds(moveable), boundPoses.vertical, boundPoses.horizontal), horizontalBoundInfos = _a.horizontal, verticalBoundInfos = _a.vertical;\r\n    var _b = ignoreSnap ? {\r\n        horizontal: { isSnap: false, index: -1 },\r\n        vertical: { isSnap: false, index: -1 },\r\n    } : checkMoveableSnapPoses(moveable, poses.vertical, poses.horizontal, undefined, undefined, undefined, undefined), horizontalSnapInfo = _b.horizontal, verticalSnapInfo = _b.vertical;\r\n    var horizontalOffset = getSnapBound(horizontalBoundInfos[0], horizontalSnapInfo);\r\n    var verticalOffset = getSnapBound(verticalBoundInfos[0], verticalSnapInfo);\r\n    var horizontalDist = abs(horizontalOffset);\r\n    var verticalDist = abs(verticalOffset);\r\n    return {\r\n        horizontal: {\r\n            isBound: horizontalBoundInfos[0].isBound,\r\n            isSnap: horizontalSnapInfo.isSnap,\r\n            snapIndex: horizontalSnapInfo.index,\r\n            offset: horizontalOffset,\r\n            dist: horizontalDist,\r\n            bounds: horizontalBoundInfos,\r\n            snap: horizontalSnapInfo,\r\n        },\r\n        vertical: {\r\n            isBound: verticalBoundInfos[0].isBound,\r\n            isSnap: verticalSnapInfo.isSnap,\r\n            snapIndex: verticalSnapInfo.index,\r\n            offset: verticalOffset,\r\n            dist: verticalDist,\r\n            bounds: verticalBoundInfos,\r\n            snap: verticalSnapInfo,\r\n        },\r\n    };\r\n}\r\nfunction checkSnapBounds(guideines, bounds, posesX, posesY, snapHorizontalThreshold, snapVerticalThreshold, multiples) {\r\n    if (multiples === void 0) { multiples = [1, 1]; }\r\n    var _a = checkBoundPoses(bounds, posesX, posesY), horizontalBoundInfos = _a.horizontal, verticalBoundInfos = _a.vertical;\r\n    // options.isRequest ? {\r\n    //     horizontal: { isSnap: false, index: -1 } as SnapInfo,\r\n    //     vertical: { isSnap: false, index: -1 } as SnapInfo,\r\n    // } :\r\n    var _b = checkSnapPoses(guideines, posesX, posesY, [], [], snapHorizontalThreshold, snapVerticalThreshold, multiples), horizontalSnapInfo = _b.horizontal, verticalSnapInfo = _b.vertical;\r\n    var horizontalOffset = getSnapBound(horizontalBoundInfos[0], horizontalSnapInfo);\r\n    var verticalOffset = getSnapBound(verticalBoundInfos[0], verticalSnapInfo);\r\n    var horizontalDist = abs(horizontalOffset);\r\n    var verticalDist = abs(verticalOffset);\r\n    return {\r\n        horizontal: {\r\n            isBound: horizontalBoundInfos[0].isBound,\r\n            isSnap: horizontalSnapInfo.isSnap,\r\n            snapIndex: horizontalSnapInfo.index,\r\n            offset: horizontalOffset,\r\n            dist: horizontalDist,\r\n            bounds: horizontalBoundInfos,\r\n            snap: horizontalSnapInfo,\r\n        },\r\n        vertical: {\r\n            isBound: verticalBoundInfos[0].isBound,\r\n            isSnap: verticalSnapInfo.isSnap,\r\n            snapIndex: verticalSnapInfo.index,\r\n            offset: verticalOffset,\r\n            dist: verticalDist,\r\n            bounds: verticalBoundInfos,\r\n            snap: verticalSnapInfo,\r\n        },\r\n    };\r\n}\r\nfunction checkSnapRightLine(startPos, endPos, snapBoundInfo, keepRatio) {\r\n    var rad = ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(startPos, endPos) / Math.PI) * 180;\r\n    var _a = snapBoundInfo.vertical, isVerticalBound = _a.isBound, isVerticalSnap = _a.isSnap, verticalDist = _a.dist, _b = snapBoundInfo.horizontal, isHorizontalBound = _b.isBound, isHorizontalSnap = _b.isSnap, horizontalDist = _b.dist;\r\n    var rad180 = rad % 180;\r\n    var isHorizontalLine = rad180 < 3 || rad180 > 177;\r\n    var isVerticalLine = rad180 > 87 && rad180 < 93;\r\n    if (horizontalDist < verticalDist) {\r\n        if (isVerticalBound ||\r\n            (isVerticalSnap &&\r\n                !isVerticalLine &&\r\n                (!keepRatio || !isHorizontalLine))) {\r\n            return \"vertical\";\r\n        }\r\n    }\r\n    if (isHorizontalBound ||\r\n        (isHorizontalSnap &&\r\n            !isHorizontalLine &&\r\n            (!keepRatio || !isVerticalLine))) {\r\n        return \"horizontal\";\r\n    }\r\n    return \"\";\r\n}\r\nfunction getSnapBoundInfo(moveable, poses, directions, keepRatio, isRequest, datas) {\r\n    return directions.map(function (_a) {\r\n        var _b = __read(_a, 2), startDirection = _b[0], endDirection = _b[1];\r\n        var otherStartPos = getPosByDirection(poses, startDirection);\r\n        var otherEndPos = getPosByDirection(poses, endDirection);\r\n        var snapBoundInfo = keepRatio\r\n            ? checkSnapBoundsKeepRatio(moveable, otherStartPos, otherEndPos, isRequest)\r\n            : checkMoveableSnapBounds(moveable, isRequest, {\r\n                vertical: [otherEndPos[0]],\r\n                horizontal: [otherEndPos[1]],\r\n            });\r\n        var _c = snapBoundInfo.horizontal, \r\n        // dist: otherHorizontalDist,\r\n        otherHorizontalOffset = _c.offset, isOtherHorizontalBound = _c.isBound, isOtherHorizontalSnap = _c.isSnap, _d = snapBoundInfo.vertical, \r\n        // dist: otherVerticalDist,\r\n        otherVerticalOffset = _d.offset, isOtherVerticalBound = _d.isBound, isOtherVerticalSnap = _d.isSnap;\r\n        var multiple = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(endDirection, startDirection);\r\n        if (!otherVerticalOffset && !otherHorizontalOffset) {\r\n            return {\r\n                isBound: isOtherVerticalBound || isOtherHorizontalBound,\r\n                isSnap: isOtherVerticalSnap || isOtherHorizontalSnap,\r\n                sign: multiple,\r\n                offset: [0, 0],\r\n            };\r\n        }\r\n        var snapLine = checkSnapRightLine(otherStartPos, otherEndPos, snapBoundInfo, keepRatio);\r\n        if (!snapLine) {\r\n            return {\r\n                sign: multiple,\r\n                isBound: false,\r\n                isSnap: false,\r\n                offset: [0, 0],\r\n            };\r\n        }\r\n        var isVertical = snapLine === \"vertical\";\r\n        var sizeOffset = [0, 0];\r\n        if (!keepRatio\r\n            && abs(endDirection[0]) === 1\r\n            && abs(endDirection[1]) === 1\r\n            && startDirection[0] !== endDirection[0]\r\n            && startDirection[1] !== endDirection[1]) {\r\n            sizeOffset = getDragDist({\r\n                datas: datas,\r\n                distX: -otherVerticalOffset,\r\n                distY: -otherHorizontalOffset,\r\n            });\r\n        }\r\n        else {\r\n            sizeOffset = solveNextOffset(otherStartPos, otherEndPos, -(isVertical ? otherVerticalOffset : otherHorizontalOffset), isVertical, datas).offset;\r\n        }\r\n        sizeOffset = sizeOffset.map(function (size, i) { return size * (multiple[i] ? 2 / multiple[i] : 0); });\r\n        return {\r\n            sign: multiple,\r\n            isBound: isVertical ? isOtherVerticalBound : isOtherHorizontalBound,\r\n            isSnap: isVertical ? isOtherVerticalSnap : isOtherHorizontalSnap,\r\n            offset: sizeOffset,\r\n        };\r\n    });\r\n}\r\nfunction getSnapBoundOffset(boundInfo, snapInfo) {\r\n    if (boundInfo.isBound) {\r\n        return boundInfo.offset;\r\n    }\r\n    else if (snapInfo.isSnap) {\r\n        return snapInfo.offset;\r\n    }\r\n    return 0;\r\n}\r\nfunction checkSnapBoundsKeepRatio(moveable, startPos, endPos, isRequest) {\r\n    var _a = checkBoundKeepRatio(moveable, startPos, endPos), horizontalBoundInfo = _a.horizontal, verticalBoundInfo = _a.vertical;\r\n    var _b = isRequest ? {\r\n        horizontal: { isSnap: false },\r\n        vertical: { isSnap: false },\r\n    } : checkSnapKeepRatio(moveable, startPos, endPos), horizontalSnapInfo = _b.horizontal, verticalSnapInfo = _b.vertical;\r\n    var horizontalOffset = getSnapBoundOffset(horizontalBoundInfo, horizontalSnapInfo);\r\n    var verticalOffset = getSnapBoundOffset(verticalBoundInfo, verticalSnapInfo);\r\n    var horizontalDist = abs(horizontalOffset);\r\n    var verticalDist = abs(verticalOffset);\r\n    return {\r\n        horizontal: {\r\n            isBound: horizontalBoundInfo.isBound,\r\n            isSnap: horizontalSnapInfo.isSnap,\r\n            offset: horizontalOffset,\r\n            dist: horizontalDist,\r\n        },\r\n        vertical: {\r\n            isBound: verticalBoundInfo.isBound,\r\n            isSnap: verticalSnapInfo.isSnap,\r\n            offset: verticalOffset,\r\n            dist: verticalDist,\r\n        },\r\n    };\r\n}\r\nfunction checkMaxBounds(moveable, poses, direction, fixedPosition, datas) {\r\n    var fixedDirection = [-direction[0], -direction[1]];\r\n    var _a = moveable.state, width = _a.width, height = _a.height;\r\n    var bounds = moveable.props.bounds;\r\n    var maxWidth = Infinity;\r\n    var maxHeight = Infinity;\r\n    if (bounds) {\r\n        var directions = [\r\n            [direction[0], -direction[1]],\r\n            [-direction[0], direction[1]],\r\n        ];\r\n        var _b = bounds.left, left_1 = _b === void 0 ? -Infinity : _b, _c = bounds.top, top_1 = _c === void 0 ? -Infinity : _c, _d = bounds.right, right_1 = _d === void 0 ? Infinity : _d, _e = bounds.bottom, bottom_1 = _e === void 0 ? Infinity : _e;\r\n        directions.forEach(function (otherDirection) {\r\n            var isCheckVertical = otherDirection[0] !== fixedDirection[0];\r\n            var isCheckHorizontal = otherDirection[1] !== fixedDirection[1];\r\n            var otherPos = getPosByDirection(poses, otherDirection);\r\n            var deg = ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(fixedPosition, otherPos) * 360) / Math.PI;\r\n            if (isCheckHorizontal) {\r\n                var nextOtherPos = otherPos.slice();\r\n                if (abs(deg - 360) < 2 || abs(deg - 180) < 2) {\r\n                    nextOtherPos[1] = fixedPosition[1];\r\n                }\r\n                var _a = solveNextOffset(fixedPosition, nextOtherPos, (fixedPosition[1] < otherPos[1] ? bottom_1 : top_1) -\r\n                    otherPos[1], false, datas), _b = __read(_a.offset, 2), heightOffset = _b[1], isHeightOutside = _a.isOutside;\r\n                if (!isNaN(heightOffset)) {\r\n                    maxHeight = height + (isHeightOutside ? 1 : -1) * abs(heightOffset);\r\n                }\r\n            }\r\n            if (isCheckVertical) {\r\n                var nextOtherPos = otherPos.slice();\r\n                if (abs(deg - 90) < 2 || abs(deg - 270) < 2) {\r\n                    nextOtherPos[0] = fixedPosition[0];\r\n                }\r\n                var _c = solveNextOffset(fixedPosition, nextOtherPos, (fixedPosition[0] < otherPos[0] ? right_1 : left_1) - otherPos[0], true, datas), _d = __read(_c.offset, 1), widthOffset = _d[0], isWidthOutside = _c.isOutside;\r\n                if (!isNaN(widthOffset)) {\r\n                    maxWidth = width + (isWidthOutside ? 1 : -1) * abs(widthOffset);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return {\r\n        maxWidth: maxWidth,\r\n        maxHeight: maxHeight,\r\n    };\r\n}\n\n/**\r\n * @namespace Draggable\r\n * @memberof Moveable\r\n * @description Draggable refers to the ability to drag and move targets.\r\n */\r\nvar Draggable = {\r\n    name: \"draggable\",\r\n    props: [\r\n        \"draggable\",\r\n        \"throttleDrag\",\r\n        \"throttleDragRotate\",\r\n        \"hideThrottleDragRotateLine\",\r\n        \"startDragRotate\",\r\n        \"edgeDraggable\",\r\n    ],\r\n    events: [\r\n        \"dragStart\",\r\n        \"drag\",\r\n        \"dragEnd\",\r\n        \"dragGroupStart\",\r\n        \"dragGroup\",\r\n        \"dragGroupEnd\",\r\n    ],\r\n    requestStyle: function () {\r\n        return [\"left\", \"top\", \"right\", \"bottom\"];\r\n    },\r\n    requestChildStyle: function () {\r\n        return [\"left\", \"top\", \"right\", \"bottom\"];\r\n    },\r\n    render: function (moveable, React) {\r\n        var _a = moveable.props, hideThrottleDragRotateLine = _a.hideThrottleDragRotateLine, throttleDragRotate = _a.throttleDragRotate, zoom = _a.zoom;\r\n        var _b = moveable.getState(), dragInfo = _b.dragInfo, beforeOrigin = _b.beforeOrigin;\r\n        if (hideThrottleDragRotateLine || !throttleDragRotate || !dragInfo) {\r\n            return [];\r\n        }\r\n        var dist = dragInfo.dist;\r\n        if (!dist[0] && !dist[1]) {\r\n            return [];\r\n        }\r\n        var width = getDistSize(dist);\r\n        var rad = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(dist, [0, 0]);\r\n        return [React.createElement(\"div\", { className: prefix(\"line\", \"horizontal\", \"dragline\", \"dashed\"), key: \"dragRotateGuideline\", style: {\r\n                    width: \"\".concat(width, \"px\"),\r\n                    transform: \"translate(\".concat(beforeOrigin[0], \"px, \").concat(beforeOrigin[1], \"px) rotate(\").concat(rad, \"rad) scaleY(\").concat(zoom, \")\"),\r\n                } })];\r\n    },\r\n    dragStart: function (moveable, e) {\r\n        var datas = e.datas, parentEvent = e.parentEvent, parentGesto = e.parentGesto;\r\n        var state = moveable.state;\r\n        var gestos = state.gestos, style = state.style;\r\n        if (gestos.draggable) {\r\n            return false;\r\n        }\r\n        gestos.draggable = parentGesto || moveable.targetGesto;\r\n        datas.datas = {};\r\n        datas.left = parseFloat(style.left || \"\") || 0;\r\n        datas.top = parseFloat(style.top || \"\") || 0;\r\n        datas.bottom = parseFloat(style.bottom || \"\") || 0;\r\n        datas.right = parseFloat(style.right || \"\") || 0;\r\n        datas.startValue = [0, 0];\r\n        setDragStart(moveable, e);\r\n        setDefaultTransformIndex(moveable, e, \"translate\");\r\n        startCheckSnapDrag(moveable, datas);\r\n        datas.prevDist = [0, 0];\r\n        datas.prevBeforeDist = [0, 0];\r\n        datas.isDrag = false;\r\n        datas.deltaOffset = [0, 0];\r\n        var params = fillParams(moveable, e, __assign({ set: function (translate) {\r\n                datas.startValue = translate;\r\n            } }, fillTransformStartEvent(moveable, e)));\r\n        var result = parentEvent || triggerEvent(moveable, \"onDragStart\", params);\r\n        if (result !== false) {\r\n            datas.isDrag = true;\r\n            moveable.state.dragInfo = {\r\n                startRect: moveable.getRect(),\r\n                dist: [0, 0],\r\n            };\r\n        }\r\n        else {\r\n            gestos.draggable = null;\r\n            datas.isPinch = false;\r\n        }\r\n        return datas.isDrag ? params : false;\r\n    },\r\n    drag: function (moveable, e) {\r\n        if (!e) {\r\n            return;\r\n        }\r\n        resolveTransformEvent(moveable, e, \"translate\");\r\n        var datas = e.datas, parentEvent = e.parentEvent, parentFlag = e.parentFlag, isPinch = e.isPinch, deltaOffset = e.deltaOffset, useSnap = e.useSnap, isRequest = e.isRequest, isGroup = e.isGroup, parentThrottleDrag = e.parentThrottleDrag;\r\n        var distX = e.distX, distY = e.distY;\r\n        var isDrag = datas.isDrag, prevDist = datas.prevDist, prevBeforeDist = datas.prevBeforeDist, startValue = datas.startValue;\r\n        if (!isDrag) {\r\n            return;\r\n        }\r\n        if (deltaOffset) {\r\n            distX += deltaOffset[0];\r\n            distY += deltaOffset[1];\r\n        }\r\n        var props = moveable.props;\r\n        var parentMoveable = props.parentMoveable;\r\n        var throttleDrag = isGroup ? 0 : (props.throttleDrag || parentThrottleDrag || 0);\r\n        var throttleDragRotate = parentEvent ? 0 : (props.throttleDragRotate || 0);\r\n        var dragRotateRad = 0;\r\n        var isVerticalSnap = false;\r\n        var isVerticalBound = false;\r\n        var isHorizontalSnap = false;\r\n        var isHorizontalBound = false;\r\n        if (!parentEvent && throttleDragRotate > 0 && (distX || distY)) {\r\n            var startDragRotate = props.startDragRotate || 0;\r\n            var deg = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(startDragRotate + (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)([0, 0], [distX, distY]) * 180 / Math.PI, throttleDragRotate)\r\n                - startDragRotate;\r\n            var ry = distY * Math.abs(Math.cos((deg - 90) / 180 * Math.PI));\r\n            var rx = distX * Math.abs(Math.cos(deg / 180 * Math.PI));\r\n            var r = getDistSize([rx, ry]);\r\n            dragRotateRad = deg * Math.PI / 180;\r\n            distX = r * Math.cos(dragRotateRad);\r\n            distY = r * Math.sin(dragRotateRad);\r\n        }\r\n        if (!isPinch && !parentEvent && !parentFlag) {\r\n            var _a = __read(checkSnapBoundsDrag(moveable, distX, distY, throttleDragRotate, (!useSnap && isRequest) || deltaOffset, datas), 2), verticalInfo = _a[0], horizontalInfo = _a[1];\r\n            isVerticalSnap = verticalInfo.isSnap;\r\n            isVerticalBound = verticalInfo.isBound;\r\n            isHorizontalSnap = horizontalInfo.isSnap;\r\n            isHorizontalBound = horizontalInfo.isBound;\r\n            var verticalOffset = verticalInfo.offset;\r\n            var horizontalOffset = horizontalInfo.offset;\r\n            distX += verticalOffset;\r\n            distY += horizontalOffset;\r\n        }\r\n        var beforeTranslate = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(getBeforeDragDist({ datas: datas, distX: distX, distY: distY }), startValue);\r\n        var translate = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(getTransformDist({ datas: datas, distX: distX, distY: distY }), startValue);\r\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttleArray)(translate, TINY_NUM);\r\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttleArray)(beforeTranslate, TINY_NUM);\r\n        if (!throttleDragRotate) {\r\n            if (!isVerticalSnap && !isVerticalBound) {\r\n                translate[0] = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(translate[0], throttleDrag);\r\n                beforeTranslate[0] = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(beforeTranslate[0], throttleDrag);\r\n            }\r\n            if (!isHorizontalSnap && !isHorizontalBound) {\r\n                translate[1] = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(translate[1], throttleDrag);\r\n                beforeTranslate[1] = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(beforeTranslate[1], throttleDrag);\r\n            }\r\n        }\r\n        var beforeDist = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(beforeTranslate, startValue);\r\n        var dist = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(translate, startValue);\r\n        var delta = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(dist, prevDist);\r\n        var beforeDelta = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(beforeDist, prevBeforeDist);\r\n        datas.prevDist = dist;\r\n        datas.prevBeforeDist = beforeDist;\r\n        datas.passDelta = delta; //distX - (datas.passDistX || 0);\r\n        // datas.passDeltaY = distY - (datas.passDistY || 0);\r\n        datas.passDist = dist; //distX;\r\n        // datas.passDistY = distY;\r\n        var left = datas.left + beforeDist[0];\r\n        var top = datas.top + beforeDist[1];\r\n        var right = datas.right - beforeDist[0];\r\n        var bottom = datas.bottom - beforeDist[1];\r\n        var nextTransform = convertTransformFormat(datas, \"translate(\".concat(translate[0], \"px, \").concat(translate[1], \"px)\"), \"translate(\".concat(dist[0], \"px, \").concat(dist[1], \"px)\"));\r\n        fillOriginalTransform(e, nextTransform);\r\n        moveable.state.dragInfo.dist = parentEvent ? [0, 0] : dist;\r\n        if (!parentEvent && !parentMoveable && delta.every(function (num) { return !num; }) && beforeDelta.some(function (num) { return !num; })) {\r\n            return;\r\n        }\r\n        var _b = moveable.state, width = _b.width, height = _b.height;\r\n        var params = fillParams(moveable, e, __assign({ transform: nextTransform, dist: dist, delta: delta, translate: translate, beforeDist: beforeDist, beforeDelta: beforeDelta, beforeTranslate: beforeTranslate, left: left, top: top, right: right, bottom: bottom, width: width, height: height, isPinch: isPinch }, fillCSSObject({\r\n            transform: nextTransform,\r\n        }, e)));\r\n        !parentEvent && triggerEvent(moveable, \"onDrag\", params);\r\n        return params;\r\n    },\r\n    dragAfter: function (moveable, e) {\r\n        var datas = e.datas;\r\n        var deltaOffset = datas.deltaOffset;\r\n        if (deltaOffset[0] || deltaOffset[1]) {\r\n            datas.deltaOffset = [0, 0];\r\n            return this.drag(moveable, __assign(__assign({}, e), { deltaOffset: deltaOffset }));\r\n        }\r\n        return false;\r\n    },\r\n    dragEnd: function (moveable, e) {\r\n        var parentEvent = e.parentEvent, datas = e.datas;\r\n        moveable.state.dragInfo = null;\r\n        if (!datas.isDrag) {\r\n            return;\r\n        }\r\n        datas.isDrag = false;\r\n        var param = fillEndParams(moveable, e, {});\r\n        !parentEvent && triggerEvent(moveable, \"onDragEnd\", param);\r\n        return param;\r\n    },\r\n    dragGroupStart: function (moveable, e) {\r\n        var _a, _b;\r\n        var datas = e.datas, clientX = e.clientX, clientY = e.clientY;\r\n        var params = this.dragStart(moveable, e);\r\n        if (!params) {\r\n            return false;\r\n        }\r\n        var _c = triggerChildGesto(moveable, this, \"dragStart\", [\r\n            clientX || 0,\r\n            clientY || 0,\r\n        ], e, false, \"draggable\"), childEvents = _c.childEvents, eventParams = _c.eventParams;\r\n        var nextParams = __assign(__assign({}, params), { targets: moveable.props.targets, events: eventParams });\r\n        var result = triggerEvent(moveable, \"onDragGroupStart\", nextParams);\r\n        datas.isDrag = result !== false;\r\n        // find data.startValue and based on first child moveable\r\n        var startValue = (_b = (_a = childEvents[0]) === null || _a === void 0 ? void 0 : _a.datas.startValue) !== null && _b !== void 0 ? _b : [0, 0];\r\n        datas.throttleOffset = [startValue[0] % 1, startValue[1] % 1];\r\n        return datas.isDrag ? params : false;\r\n    },\r\n    dragGroup: function (moveable, e) {\r\n        var datas = e.datas;\r\n        if (!datas.isDrag) {\r\n            return;\r\n        }\r\n        var params = this.drag(moveable, __assign(__assign({}, e), { parentThrottleDrag: moveable.props.throttleDrag }));\r\n        var passDelta = e.datas.passDelta;\r\n        var eventParams = triggerChildGesto(moveable, this, \"drag\", passDelta, e, false, \"draggable\").eventParams;\r\n        if (!params) {\r\n            return;\r\n        }\r\n        var nextParams = __assign({ targets: moveable.props.targets, events: eventParams }, params);\r\n        triggerEvent(moveable, \"onDragGroup\", nextParams);\r\n        return nextParams;\r\n    },\r\n    dragGroupEnd: function (moveable, e) {\r\n        var isDrag = e.isDrag, datas = e.datas;\r\n        if (!datas.isDrag) {\r\n            return;\r\n        }\r\n        this.dragEnd(moveable, e);\r\n        var eventParams = triggerChildGesto(moveable, this, \"dragEnd\", [0, 0], e, false, \"draggable\").eventParams;\r\n        triggerEvent(moveable, \"onDragGroupEnd\", fillEndParams(moveable, e, {\r\n            targets: moveable.props.targets,\r\n            events: eventParams,\r\n        }));\r\n        return isDrag;\r\n    },\r\n    /**\r\n     * @method Moveable.Draggable#request\r\n     * @param {object} [e] - the draggable's request parameter\r\n     * @param {number} [e.x] - x position\r\n     * @param {number} [e.y] - y position\r\n     * @param {number} [e.deltaX] - X number to move\r\n     * @param {number} [e.deltaY] - Y number to move\r\n     * @return {Moveable.Requester} Moveable Requester\r\n     * @example\r\n\n     * // Instantly Request (requestStart - request - requestEnd)\r\n     * // Use Relative Value\r\n     * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10 }, true);\r\n     * // Use Absolute Value\r\n     * moveable.request(\"draggable\", { x: 200, y: 100 }, true);\r\n     *\r\n     * // requestStart\r\n     * const requester = moveable.request(\"draggable\");\r\n     *\r\n     * // request\r\n     * // Use Relative Value\r\n     * requester.request({ deltaX: 10, deltaY: 10 });\r\n     * requester.request({ deltaX: 10, deltaY: 10 });\r\n     * requester.request({ deltaX: 10, deltaY: 10 });\r\n     * // Use Absolute Value\r\n     * moveable.request(\"draggable\", { x: 200, y: 100 });\r\n     * moveable.request(\"draggable\", { x: 220, y: 100 });\r\n     * moveable.request(\"draggable\", { x: 240, y: 100 });\r\n     *\r\n     * // requestEnd\r\n     * requester.requestEnd();\r\n     */\r\n    request: function (moveable) {\r\n        var datas = {};\r\n        var rect = moveable.getRect();\r\n        var distX = 0;\r\n        var distY = 0;\r\n        var useSnap = false;\r\n        return {\r\n            isControl: false,\r\n            requestStart: function (e) {\r\n                useSnap = e.useSnap;\r\n                return { datas: datas, useSnap: useSnap };\r\n            },\r\n            request: function (e) {\r\n                if (\"x\" in e) {\r\n                    distX = e.x - rect.left;\r\n                }\r\n                else if (\"deltaX\" in e) {\r\n                    distX += e.deltaX;\r\n                }\r\n                if (\"y\" in e) {\r\n                    distY = e.y - rect.top;\r\n                }\r\n                else if (\"deltaY\" in e) {\r\n                    distY += e.deltaY;\r\n                }\r\n                return { datas: datas, distX: distX, distY: distY, useSnap: useSnap };\r\n            },\r\n            requestEnd: function () {\r\n                return { datas: datas, isDrag: true, useSnap: useSnap };\r\n            },\r\n        };\r\n    },\r\n    unset: function (moveable) {\r\n        moveable.state.gestos.draggable = null;\r\n        moveable.state.dragInfo = null;\r\n    },\r\n};\r\n/**\r\n * Whether or not target can be dragged. (default: false)\r\n * @name Moveable.Draggable#draggable\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.draggable = true;\r\n */\r\n/**\r\n * throttle of x, y when drag.\r\n * @name Moveable.Draggable#throttleDrag\r\n * @default 0\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.throttleDrag = 1;\r\n */\r\n/**\r\n* throttle of angle of x, y when drag.\r\n* @name Moveable.Draggable#throttleDragRotate\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body);\r\n*\r\n* moveable.throttleDragRotate = 45;\r\n*/\r\n/**\r\n* start angle of throttleDragRotate of x, y when drag.\r\n* @name Moveable.Draggable#startDragRotate\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body);\r\n*\r\n* // 45, 135, 225, 315\r\n* moveable.throttleDragRotate = 90;\r\n* moveable.startDragRotate = 45;\r\n*/\r\n/**\r\n * When the drag starts, the dragStart event is called.\r\n * @memberof Moveable.Draggable\r\n * @event dragStart\r\n * @param {Moveable.Draggable.OnDragStart} - Parameters for the dragStart event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { draggable: true });\r\n * moveable.on(\"dragStart\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n */\r\n/**\r\n * When dragging, the drag event is called.\r\n * @memberof Moveable.Draggable\r\n * @event drag\r\n * @param {Moveable.Draggable.OnDrag} - Parameters for the drag event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { draggable: true });\r\n * moveable.on(\"drag\", ({ target, transform }) => {\r\n *     target.style.transform = transform;\r\n * });\r\n */\r\n/**\r\n * When the drag finishes, the dragEnd event is called.\r\n * @memberof Moveable.Draggable\r\n * @event dragEnd\r\n * @param {Moveable.Draggable.OnDragEnd} - Parameters for the dragEnd event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { draggable: true });\r\n * moveable.on(\"dragEnd\", ({ target, isDrag }) => {\r\n *     console.log(target, isDrag);\r\n * });\r\n */\r\n/**\r\n* When the group drag starts, the `dragGroupStart` event is called.\r\n* @memberof Moveable.Draggable\r\n* @event dragGroupStart\r\n* @param {Moveable.Draggable.OnDragGroupStart} - Parameters for the `dragGroupStart` event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n*     draggable: true\r\n* });\r\n* moveable.on(\"dragGroupStart\", ({ targets }) => {\r\n*     console.log(\"onDragGroupStart\", targets);\r\n* });\r\n*/\r\n/**\r\n* When the group drag, the `dragGroup` event is called.\r\n* @memberof Moveable.Draggable\r\n* @event dragGroup\r\n* @param {Moveable.Draggable.OnDragGroup} - Parameters for the `dragGroup` event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n*     draggable: true\r\n* });\r\n* moveable.on(\"dragGroup\", ({ targets, events }) => {\r\n*     console.log(\"onDragGroup\", targets);\r\n*     events.forEach(ev => {\r\n*          // drag event\r\n*          console.log(\"onDrag left, top\", ev.left, ev.top);\r\n*          // ev.target!.style.left = `${ev.left}px`;\r\n*          // ev.target!.style.top = `${ev.top}px`;\r\n*          console.log(\"onDrag translate\", ev.dist);\r\n*          ev.target!.style.transform = ev.transform;)\r\n*     });\r\n* });\r\n*/\r\n/**\r\n * When the group drag finishes, the `dragGroupEnd` event is called.\r\n * @memberof Moveable.Draggable\r\n * @event dragGroupEnd\r\n * @param {Moveable.Draggable.OnDragGroupEnd} - Parameters for the `dragGroupEnd` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n *     draggable: true\r\n * });\r\n * moveable.on(\"dragGroupEnd\", ({ targets, isDrag }) => {\r\n *     console.log(\"onDragGroupEnd\", targets, isDrag);\r\n * });\r\n */\n\nfunction getFixedDirectionInfo(startPositions, fixedDirection) {\r\n    var fixedPosition = getPosByDirection(startPositions, fixedDirection);\r\n    var fixedOffset = [0, 0];\r\n    return {\r\n        fixedPosition: fixedPosition,\r\n        fixedDirection: fixedDirection,\r\n        fixedOffset: fixedOffset,\r\n    };\r\n}\r\nfunction getOffsetFixedDirectionInfo(state, fixedDirection) {\r\n    // for start\r\n    var allMatrix = state.allMatrix, is3d = state.is3d, width = state.width, height = state.height;\r\n    var n = is3d ? 4 : 3;\r\n    var nextFixedOffset = [\r\n        width / 2 * (1 + fixedDirection[0]),\r\n        height / 2 * (1 + fixedDirection[1]),\r\n    ];\r\n    var fixedPosition = calculatePosition(allMatrix, nextFixedOffset, n);\r\n    var fixedOffset = [0, 0];\r\n    return {\r\n        fixedPosition: fixedPosition,\r\n        fixedDirection: fixedDirection,\r\n        fixedOffset: fixedOffset,\r\n    };\r\n}\r\nfunction getOffsetFixedPositionInfo(state, offsetFixedPosition) {\r\n    // for start\r\n    var allMatrix = state.allMatrix, is3d = state.is3d, width = state.width, height = state.height;\r\n    var n = is3d ? 4 : 3;\r\n    var fixedDirection = getDirectionByPos(offsetFixedPosition, width, height);\r\n    var nextFixedPosition = calculatePosition(allMatrix, offsetFixedPosition, n);\r\n    var fixedOffset = [\r\n        width ? 0 : offsetFixedPosition[0],\r\n        height ? 0 : offsetFixedPosition[1],\r\n    ];\r\n    return {\r\n        fixedPosition: nextFixedPosition,\r\n        fixedDirection: fixedDirection,\r\n        fixedOffset: fixedOffset,\r\n    };\r\n}\n\n/**\r\n * @namespace Resizable\r\n * @memberof Moveable\r\n * @description Resizable indicates whether the target's width and height can be increased or decreased.\r\n */\r\nvar directionCondition$2 = getDirectionCondition(\"resizable\");\r\nvar Resizable = {\r\n    name: \"resizable\",\r\n    ableGroup: \"size\",\r\n    canPinch: true,\r\n    props: [\r\n        \"resizable\",\r\n        \"throttleResize\",\r\n        \"renderDirections\",\r\n        \"displayAroundControls\",\r\n        \"keepRatio\",\r\n        \"resizeFormat\",\r\n        \"keepRatioFinally\",\r\n        \"edge\",\r\n        \"checkResizableError\",\r\n    ],\r\n    events: [\r\n        \"resizeStart\",\r\n        \"beforeResize\",\r\n        \"resize\",\r\n        \"resizeEnd\",\r\n        \"resizeGroupStart\",\r\n        \"beforeResizeGroup\",\r\n        \"resizeGroup\",\r\n        \"resizeGroupEnd\",\r\n    ],\r\n    render: getRenderDirections(\"resizable\"),\r\n    dragControlCondition: directionCondition$2,\r\n    viewClassName: getDirectionViewClassName(\"resizable\"),\r\n    dragControlStart: function (moveable, e) {\r\n        var _a;\r\n        var inputEvent = e.inputEvent, isPinch = e.isPinch, isGroup = e.isGroup, parentDirection = e.parentDirection, parentGesto = e.parentGesto, datas = e.datas, parentFixedDirection = e.parentFixedDirection, parentEvent = e.parentEvent;\r\n        var direction = getTotalDirection(parentDirection, isPinch, inputEvent, datas);\r\n        var state = moveable.state;\r\n        var target = state.target, width = state.width, height = state.height, gestos = state.gestos;\r\n        if (!direction || !target) {\r\n            return false;\r\n        }\r\n        if (gestos.resizable) {\r\n            return false;\r\n        }\r\n        gestos.resizable = parentGesto || moveable.controlGesto;\r\n        !isPinch && setDragStart(moveable, e);\r\n        datas.datas = {};\r\n        datas.direction = direction;\r\n        datas.startOffsetWidth = width;\r\n        datas.startOffsetHeight = height;\r\n        datas.prevWidth = 0;\r\n        datas.prevHeight = 0;\r\n        datas.minSize = [0, 0];\r\n        datas.startWidth = state.inlineCSSWidth || state.cssWidth;\r\n        datas.startHeight = state.inlineCSSHeight || state.cssHeight;\r\n        datas.maxSize = [Infinity, Infinity];\r\n        if (!isGroup) {\r\n            datas.minSize = [\r\n                state.minOffsetWidth,\r\n                state.minOffsetHeight,\r\n            ];\r\n            datas.maxSize = [\r\n                state.maxOffsetWidth,\r\n                state.maxOffsetHeight,\r\n            ];\r\n        }\r\n        var transformOrigin = moveable.props.transformOrigin || \"% %\";\r\n        datas.transformOrigin = transformOrigin && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isString)(transformOrigin)\r\n            ? transformOrigin.split(\" \")\r\n            : transformOrigin;\r\n        datas.startOffsetMatrix = state.offsetMatrix;\r\n        datas.startTransformOrigin = state.transformOrigin;\r\n        datas.isWidth = (_a = e === null || e === void 0 ? void 0 : e.parentIsWidth) !== null && _a !== void 0 ? _a : ((!direction[0] && !direction[1]) || direction[0] || !direction[1]);\r\n        function setRatio(ratio) {\r\n            datas.ratio = ratio && isFinite(ratio) ? ratio : 0;\r\n        }\r\n        datas.startPositions = getAbsolutePosesByState(moveable.state);\r\n        function setFixedDirection(fixedDirection) {\r\n            var result = getFixedDirectionInfo(datas.startPositions, fixedDirection);\r\n            datas.fixedDirection = result.fixedDirection;\r\n            datas.fixedPosition = result.fixedPosition;\r\n            datas.fixedOffset = result.fixedOffset;\r\n        }\r\n        function setFixedPosition(fixedPosition) {\r\n            var result = getOffsetFixedPositionInfo(moveable.state, fixedPosition);\r\n            datas.fixedDirection = result.fixedDirection;\r\n            datas.fixedPosition = result.fixedPosition;\r\n            datas.fixedOffset = result.fixedOffset;\r\n        }\r\n        function setMin(minSize) {\r\n            datas.minSize = [\r\n                (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(\"\".concat(minSize[0]), 0) || 0,\r\n                (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(\"\".concat(minSize[1]), 0) || 0,\r\n            ];\r\n        }\r\n        function setMax(maxSize) {\r\n            var nextMaxSize = [\r\n                maxSize[0] || Infinity,\r\n                maxSize[1] || Infinity,\r\n            ];\r\n            if (!(0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isNumber)(nextMaxSize[0]) || isFinite(nextMaxSize[0])) {\r\n                nextMaxSize[0] = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(\"\".concat(nextMaxSize[0]), 0) || Infinity;\r\n            }\r\n            if (!(0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isNumber)(nextMaxSize[1]) || isFinite(nextMaxSize[1])) {\r\n                nextMaxSize[1] = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(\"\".concat(nextMaxSize[1]), 0) || Infinity;\r\n            }\r\n            datas.maxSize = nextMaxSize;\r\n        }\r\n        setRatio(width / height);\r\n        setFixedDirection(parentFixedDirection || [-direction[0], -direction[1]]);\r\n        datas.setFixedDirection = setFixedDirection;\r\n        datas.setFixedPosition = setFixedPosition;\r\n        datas.setMin = setMin;\r\n        datas.setMax = setMax;\r\n        var params = fillParams(moveable, e, {\r\n            direction: direction,\r\n            startRatio: datas.ratio,\r\n            set: function (_a) {\r\n                var _b = __read(_a, 2), startWidth = _b[0], startHeight = _b[1];\r\n                datas.startWidth = startWidth;\r\n                datas.startHeight = startHeight;\r\n            },\r\n            setMin: setMin,\r\n            setMax: setMax,\r\n            setRatio: setRatio,\r\n            setFixedDirection: setFixedDirection,\r\n            setFixedPosition: setFixedPosition,\r\n            setOrigin: function (origin) {\r\n                datas.transformOrigin = origin;\r\n            },\r\n            dragStart: Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e)),\r\n        });\r\n        var result = parentEvent || triggerEvent(moveable, \"onResizeStart\", params);\r\n        datas.startFixedDirection = datas.fixedDirection;\r\n        datas.startFixedPosition = datas.fixedPosition;\r\n        if (result !== false) {\r\n            datas.isResize = true;\r\n            moveable.state.snapRenderInfo = {\r\n                request: e.isRequest,\r\n                direction: direction,\r\n            };\r\n        }\r\n        return datas.isResize ? params : false;\r\n    },\r\n    dragControl: function (moveable, e) {\r\n        var _a;\r\n        var datas = e.datas, parentFlag = e.parentFlag, isPinch = e.isPinch, parentKeepRatio = e.parentKeepRatio, dragClient = e.dragClient, parentDist = e.parentDist, useSnap = e.useSnap, isRequest = e.isRequest, isGroup = e.isGroup, parentEvent = e.parentEvent, resolveMatrix = e.resolveMatrix;\r\n        var isResize = datas.isResize, transformOrigin = datas.transformOrigin, startWidth = datas.startWidth, startHeight = datas.startHeight, prevWidth = datas.prevWidth, prevHeight = datas.prevHeight, minSize = datas.minSize, maxSize = datas.maxSize, ratio = datas.ratio, startOffsetWidth = datas.startOffsetWidth, startOffsetHeight = datas.startOffsetHeight, isWidth = datas.isWidth;\r\n        if (!isResize) {\r\n            return;\r\n        }\r\n        if (resolveMatrix) {\r\n            var is3d = moveable.state.is3d;\r\n            var startOffsetMatrix = datas.startOffsetMatrix, startTransformOrigin = datas.startTransformOrigin;\r\n            var n = is3d ? 4 : 3;\r\n            var targetMatrix = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.parseMat)(getNextTransforms(e));\r\n            var targetN = Math.sqrt(targetMatrix.length);\r\n            if (n !== targetN) {\r\n                targetMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertDimension)(targetMatrix, targetN, n);\r\n            }\r\n            var nextAllMatrix = getNextMatrix(startOffsetMatrix, targetMatrix, startTransformOrigin, n);\r\n            var poses = calculatePoses(nextAllMatrix, startOffsetWidth, startOffsetHeight, n);\r\n            datas.startPositions = poses;\r\n            datas.nextTargetMatrix = targetMatrix;\r\n            datas.nextAllMatrix = nextAllMatrix;\r\n        }\r\n        var props = getProps(moveable.props, \"resizable\");\r\n        var resizeFormat = props.resizeFormat, _b = props.throttleResize, throttleResize = _b === void 0 ? parentFlag ? 0 : 1 : _b, parentMoveable = props.parentMoveable, keepRatioFinally = props.keepRatioFinally;\r\n        var direction = datas.direction;\r\n        var sizeDirection = direction;\r\n        var distWidth = 0;\r\n        var distHeight = 0;\r\n        if (!direction[0] && !direction[1]) {\r\n            sizeDirection = [1, 1];\r\n        }\r\n        var keepRatio = (ratio && (parentKeepRatio != null ? parentKeepRatio : props.keepRatio)) || false;\r\n        function getNextBoundingSize() {\r\n            var fixedDirection = datas.fixedDirection;\r\n            var nextSize = getOffsetSizeDist(sizeDirection, keepRatio, datas, e);\r\n            distWidth = nextSize.distWidth;\r\n            distHeight = nextSize.distHeight;\r\n            var nextWidth = (sizeDirection[0] - fixedDirection[0]) || keepRatio\r\n                ? Math.max(startOffsetWidth + distWidth, TINY_NUM) : startOffsetWidth;\r\n            var nextHeight = (sizeDirection[1] - fixedDirection[1]) || keepRatio\r\n                ? Math.max(startOffsetHeight + distHeight, TINY_NUM) : startOffsetHeight;\r\n            if (keepRatio && startOffsetWidth && startOffsetHeight) {\r\n                // startOffsetWidth : startOffsetHeight = nextWidth : nextHeight\r\n                if (isWidth) {\r\n                    nextHeight = nextWidth / ratio;\r\n                }\r\n                else {\r\n                    nextWidth = nextHeight * ratio;\r\n                }\r\n            }\r\n            return [nextWidth, nextHeight];\r\n        }\r\n        var _c = __read(getNextBoundingSize(), 2), boundingWidth = _c[0], boundingHeight = _c[1];\r\n        if (!parentEvent) {\r\n            datas.setFixedDirection(datas.fixedDirection);\r\n            triggerEvent(moveable, \"onBeforeResize\", fillParams(moveable, e, {\r\n                startFixedDirection: datas.startFixedDirection,\r\n                startFixedPosition: datas.startFixedPosition,\r\n                setFixedDirection: function (nextFixedDirection) {\r\n                    var _a;\r\n                    datas.setFixedDirection(nextFixedDirection);\r\n                    _a = __read(getNextBoundingSize(), 2), boundingWidth = _a[0], boundingHeight = _a[1];\r\n                    return [boundingWidth, boundingHeight];\r\n                },\r\n                setFixedPosition: function (nextFixedPosition) {\r\n                    var _a;\r\n                    datas.setFixedPosition(nextFixedPosition);\r\n                    _a = __read(getNextBoundingSize(), 2), boundingWidth = _a[0], boundingHeight = _a[1];\r\n                    return [boundingWidth, boundingHeight];\r\n                },\r\n                boundingWidth: boundingWidth,\r\n                boundingHeight: boundingHeight,\r\n                setSize: function (size) {\r\n                    var _a;\r\n                    _a = __read(size, 2), boundingWidth = _a[0], boundingHeight = _a[1];\r\n                },\r\n            }, true));\r\n        }\r\n        var fixedPosition = dragClient;\r\n        if (!dragClient) {\r\n            if (!parentFlag && isPinch) {\r\n                fixedPosition = getAbsolutePosition(moveable, [0, 0]);\r\n            }\r\n            else {\r\n                fixedPosition = datas.fixedPosition;\r\n            }\r\n        }\r\n        var snapDist = [0, 0];\r\n        if (!isPinch) {\r\n            snapDist = checkSnapResize(moveable, boundingWidth, boundingHeight, direction, fixedPosition, !useSnap && isRequest, datas);\r\n        }\r\n        if (parentDist) {\r\n            !parentDist[0] && (snapDist[0] = 0);\r\n            !parentDist[1] && (snapDist[1] = 0);\r\n        }\r\n        function computeSize() {\r\n            var _a;\r\n            if (resizeFormat) {\r\n                _a = __read(resizeFormat([boundingWidth, boundingHeight]), 2), boundingWidth = _a[0], boundingHeight = _a[1];\r\n            }\r\n            boundingWidth = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(boundingWidth, throttleResize);\r\n            boundingHeight = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(boundingHeight, throttleResize);\r\n        }\r\n        if (keepRatio) {\r\n            if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\r\n                if (abs(snapDist[0]) > abs(snapDist[1])) {\r\n                    snapDist[1] = 0;\r\n                }\r\n                else {\r\n                    snapDist[0] = 0;\r\n                }\r\n            }\r\n            var isNoSnap = !snapDist[0] && !snapDist[1];\r\n            if (isNoSnap) {\r\n                // pre-compute before maintaining the ratio\r\n                computeSize();\r\n            }\r\n            if ((sizeDirection[0] && !sizeDirection[1])\r\n                || (snapDist[0] && !snapDist[1])\r\n                || (isNoSnap && isWidth)) {\r\n                boundingWidth += snapDist[0];\r\n                boundingHeight = boundingWidth / ratio;\r\n            }\r\n            else if ((!sizeDirection[0] && sizeDirection[1])\r\n                || (!snapDist[0] && snapDist[1])\r\n                || (isNoSnap && !isWidth)) {\r\n                boundingHeight += snapDist[1];\r\n                boundingWidth = boundingHeight * ratio;\r\n            }\r\n        }\r\n        else {\r\n            boundingWidth += snapDist[0];\r\n            boundingHeight += snapDist[1];\r\n            boundingWidth = Math.max(0, boundingWidth);\r\n            boundingHeight = Math.max(0, boundingHeight);\r\n        }\r\n        _a = __read((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.calculateBoundSize)([boundingWidth, boundingHeight], minSize, maxSize, keepRatio ? ratio : false), 2), boundingWidth = _a[0], boundingHeight = _a[1];\r\n        computeSize();\r\n        if (keepRatio && (isGroup || keepRatioFinally)) {\r\n            if (isWidth) {\r\n                boundingHeight = boundingWidth / ratio;\r\n            }\r\n            else {\r\n                boundingWidth = boundingHeight * ratio;\r\n            }\r\n        }\r\n        distWidth = boundingWidth - startOffsetWidth;\r\n        distHeight = boundingHeight - startOffsetHeight;\r\n        var delta = [distWidth - prevWidth, distHeight - prevHeight];\r\n        datas.prevWidth = distWidth;\r\n        datas.prevHeight = distHeight;\r\n        var inverseDelta = getResizeDist(moveable, boundingWidth, boundingHeight, fixedPosition, transformOrigin, datas);\r\n        if (!parentMoveable && delta.every(function (num) { return !num; }) && inverseDelta.every(function (num) { return !num; })) {\r\n            return;\r\n        }\r\n        var drag = Draggable.drag(moveable, setCustomDrag(e, moveable.state, inverseDelta, !!isPinch, false, \"draggable\"));\r\n        var transform = drag.transform;\r\n        var nextWidth = startWidth + distWidth;\r\n        var nextHeight = startHeight + distHeight;\r\n        var params = fillParams(moveable, e, __assign({ width: nextWidth, height: nextHeight, offsetWidth: Math.round(boundingWidth), offsetHeight: Math.round(boundingHeight), startRatio: ratio, boundingWidth: boundingWidth, boundingHeight: boundingHeight, direction: direction, dist: [distWidth, distHeight], delta: delta, isPinch: !!isPinch, drag: drag }, fillAfterTransform({\r\n            style: {\r\n                width: \"\".concat(nextWidth, \"px\"),\r\n                height: \"\".concat(nextHeight, \"px\"),\r\n            },\r\n            transform: transform,\r\n        }, drag, e)));\r\n        !parentEvent && triggerEvent(moveable, \"onResize\", params);\r\n        return params;\r\n    },\r\n    dragControlAfter: function (moveable, e) {\r\n        var datas = e.datas;\r\n        var isResize = datas.isResize, startOffsetWidth = datas.startOffsetWidth, startOffsetHeight = datas.startOffsetHeight, prevWidth = datas.prevWidth, prevHeight = datas.prevHeight;\r\n        if (!isResize || moveable.props.checkResizableError === false) {\r\n            return;\r\n        }\r\n        var _a = moveable.state, width = _a.width, height = _a.height;\r\n        var errorWidth = width - (startOffsetWidth + prevWidth);\r\n        var errorHeight = height - (startOffsetHeight + prevHeight);\r\n        var isErrorWidth = abs(errorWidth) > 3;\r\n        var isErrorHeight = abs(errorHeight) > 3;\r\n        if (isErrorWidth) {\r\n            datas.startWidth += errorWidth;\r\n            datas.startOffsetWidth += errorWidth;\r\n            datas.prevWidth += errorWidth;\r\n        }\r\n        if (isErrorHeight) {\r\n            datas.startHeight += errorHeight;\r\n            datas.startOffsetHeight += errorHeight;\r\n            datas.prevHeight += errorHeight;\r\n        }\r\n        if (isErrorWidth || isErrorHeight) {\r\n            return this.dragControl(moveable, e);\r\n        }\r\n    },\r\n    dragControlEnd: function (moveable, e) {\r\n        var datas = e.datas, parentEvent = e.parentEvent;\r\n        if (!datas.isResize) {\r\n            return;\r\n        }\r\n        datas.isResize = false;\r\n        var params = fillEndParams(moveable, e, {});\r\n        !parentEvent && triggerEvent(moveable, \"onResizeEnd\", params);\r\n        return params;\r\n    },\r\n    dragGroupControlCondition: directionCondition$2,\r\n    dragGroupControlStart: function (moveable, e) {\r\n        var datas = e.datas;\r\n        var params = this.dragControlStart(moveable, __assign(__assign({}, e), { isGroup: true }));\r\n        if (!params) {\r\n            return false;\r\n        }\r\n        var originalEvents = fillChildEvents(moveable, \"resizable\", e);\r\n        var parentStartOffsetWidth = datas.startOffsetWidth, parentStartOffsetHeight = datas.startOffsetHeight;\r\n        function updateGroupMin() {\r\n            var originalMinSize = datas.minSize;\r\n            originalEvents.forEach(function (ev) {\r\n                var _a = ev.datas, childMinSize = _a.minSize, childStartOffsetWidth = _a.startOffsetWidth, childStartOffsetHeight = _a.startOffsetHeight;\r\n                var parentMinWidth = parentStartOffsetWidth\r\n                    * (childStartOffsetWidth ? childMinSize[0] / childStartOffsetWidth : 0);\r\n                var parentMinHeight = parentStartOffsetHeight\r\n                    * (childStartOffsetHeight ? childMinSize[1] / childStartOffsetHeight : 0);\r\n                originalMinSize[0] = Math.max(originalMinSize[0], parentMinWidth);\r\n                originalMinSize[1] = Math.max(originalMinSize[1], parentMinHeight);\r\n            });\r\n        }\r\n        function updateGroupMax() {\r\n            var originalMaxSize = datas.maxSize;\r\n            originalEvents.forEach(function (ev) {\r\n                var _a = ev.datas, childMaxSize = _a.maxSize, childStartOffsetWidth = _a.startOffsetWidth, childStartOffsetHeight = _a.startOffsetHeight;\r\n                var parentMaxWidth = parentStartOffsetWidth\r\n                    * (childStartOffsetWidth ? childMaxSize[0] / childStartOffsetWidth : 0);\r\n                var parentMaxHeight = parentStartOffsetHeight\r\n                    * (childStartOffsetHeight ? childMaxSize[1] / childStartOffsetHeight : 0);\r\n                originalMaxSize[0] = Math.min(originalMaxSize[0], parentMaxWidth);\r\n                originalMaxSize[1] = Math.min(originalMaxSize[1], parentMaxHeight);\r\n            });\r\n        }\r\n        var events = triggerChildAbles(moveable, this, \"dragControlStart\", e, function (child, ev) {\r\n            return startChildDist(moveable, child, datas, ev);\r\n        });\r\n        updateGroupMin();\r\n        updateGroupMax();\r\n        var setFixedDirection = function (fixedDirection) {\r\n            params.setFixedDirection(fixedDirection);\r\n            events.forEach(function (ev, i) {\r\n                ev.setFixedDirection(fixedDirection);\r\n                startChildDist(moveable, ev.moveable, datas, originalEvents[i]);\r\n            });\r\n        };\r\n        datas.setFixedDirection = setFixedDirection;\r\n        var nextParams = __assign(__assign({}, params), { targets: moveable.props.targets, events: events.map(function (ev) {\r\n                return __assign(__assign({}, ev), { setMin: function (minSize) {\r\n                        ev.setMin(minSize);\r\n                        updateGroupMin();\r\n                    }, setMax: function (maxSize) {\r\n                        ev.setMax(maxSize);\r\n                        updateGroupMax();\r\n                    } });\r\n            }), setFixedDirection: setFixedDirection, setMin: function (minSize) {\r\n                params.setMin(minSize);\r\n                updateGroupMin();\r\n            }, setMax: function (maxSize) {\r\n                params.setMax(maxSize);\r\n                updateGroupMax();\r\n            } });\r\n        var result = triggerEvent(moveable, \"onResizeGroupStart\", nextParams);\r\n        datas.isResize = result !== false;\r\n        return datas.isResize ? params : false;\r\n    },\r\n    dragGroupControl: function (moveable, e) {\r\n        var datas = e.datas;\r\n        if (!datas.isResize) {\r\n            return;\r\n        }\r\n        var props = getProps(moveable.props, \"resizable\");\r\n        catchEvent(moveable, \"onBeforeResize\", function (parentEvent) {\r\n            triggerEvent(moveable, \"onBeforeResizeGroup\", fillParams(moveable, e, __assign(__assign({}, parentEvent), { targets: props.targets }), true));\r\n        });\r\n        var params = this.dragControl(moveable, __assign(__assign({}, e), { isGroup: true }));\r\n        if (!params) {\r\n            return;\r\n        }\r\n        var boundingWidth = params.boundingWidth, boundingHeight = params.boundingHeight, dist = params.dist;\r\n        var keepRatio = props.keepRatio;\r\n        var parentScale = [\r\n            boundingWidth / (boundingWidth - dist[0]),\r\n            boundingHeight / (boundingHeight - dist[1]),\r\n        ];\r\n        var fixedPosition = datas.fixedPosition;\r\n        var events = triggerChildAbles(moveable, this, \"dragControl\", e, function (_, ev) {\r\n            var _a = __read((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createRotateMatrix)(moveable.rotation / 180 * Math.PI, 3), [\r\n                ev.datas.originalX * parentScale[0],\r\n                ev.datas.originalY * parentScale[1],\r\n                1,\r\n            ], 3), 2), clientX = _a[0], clientY = _a[1];\r\n            return __assign(__assign({}, ev), { parentDist: null, parentScale: parentScale, dragClient: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(fixedPosition, [clientX, clientY]), parentKeepRatio: keepRatio });\r\n        });\r\n        var nextParams = __assign({ targets: props.targets, events: events }, params);\r\n        triggerEvent(moveable, \"onResizeGroup\", nextParams);\r\n        return nextParams;\r\n    },\r\n    dragGroupControlEnd: function (moveable, e) {\r\n        var isDrag = e.isDrag, datas = e.datas;\r\n        if (!datas.isResize) {\r\n            return;\r\n        }\r\n        this.dragControlEnd(moveable, e);\r\n        var events = triggerChildAbles(moveable, this, \"dragControlEnd\", e);\r\n        var nextParams = fillEndParams(moveable, e, {\r\n            targets: moveable.props.targets,\r\n            events: events,\r\n        });\r\n        triggerEvent(moveable, \"onResizeGroupEnd\", nextParams);\r\n        return isDrag;\r\n    },\r\n    /**\r\n     * @method Moveable.Resizable#request\r\n     * @param {Moveable.Resizable.ResizableRequestParam} e - the Resizable's request parameter\r\n     * @return {Moveable.Requester} Moveable Requester\r\n     * @example\r\n\n     * // Instantly Request (requestStart - request - requestEnd)\r\n     * // Use Relative Value\r\n     * moveable.request(\"resizable\", { deltaWidth: 10, deltaHeight: 10 }, true);\r\n     *\r\n     * // Use Absolute Value\r\n     * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100 }, true);\r\n     *\r\n     * // requestStart\r\n     * const requester = moveable.request(\"resizable\");\r\n     *\r\n     * // request\r\n     * // Use Relative Value\r\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\r\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\r\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\r\n     *\r\n     * // Use Absolute Value\r\n     * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100 });\r\n     * moveable.request(\"resizable\", { offsetWidth: 110, offsetHeight: 100 });\r\n     * moveable.request(\"resizable\", { offsetWidth: 120, offsetHeight: 100 });\r\n     *\r\n     * // requestEnd\r\n     * requester.requestEnd();\r\n     */\r\n    request: function (moveable) {\r\n        var datas = {};\r\n        var distWidth = 0;\r\n        var distHeight = 0;\r\n        var useSnap = false;\r\n        var rect = moveable.getRect();\r\n        return {\r\n            isControl: true,\r\n            requestStart: function (e) {\r\n                var _a;\r\n                useSnap = e.useSnap;\r\n                return {\r\n                    datas: datas,\r\n                    parentDirection: e.direction || [1, 1],\r\n                    parentIsWidth: (_a = e === null || e === void 0 ? void 0 : e.horizontal) !== null && _a !== void 0 ? _a : true,\r\n                    useSnap: useSnap,\r\n                };\r\n            },\r\n            request: function (e) {\r\n                if (\"offsetWidth\" in e) {\r\n                    distWidth = e.offsetWidth - rect.offsetWidth;\r\n                }\r\n                else if (\"deltaWidth\" in e) {\r\n                    distWidth += e.deltaWidth;\r\n                }\r\n                if (\"offsetHeight\" in e) {\r\n                    distHeight = e.offsetHeight - rect.offsetHeight;\r\n                }\r\n                else if (\"deltaHeight\" in e) {\r\n                    distHeight += e.deltaHeight;\r\n                }\r\n                return {\r\n                    datas: datas,\r\n                    parentDist: [distWidth, distHeight],\r\n                    parentKeepRatio: e.keepRatio,\r\n                    useSnap: useSnap,\r\n                };\r\n            },\r\n            requestEnd: function () {\r\n                return { datas: datas, isDrag: true, useSnap: useSnap };\r\n            },\r\n        };\r\n    },\r\n    unset: function (moveable) {\r\n        moveable.state.gestos.resizable = null;\r\n    },\r\n};\r\n/**\r\n * Whether or not target can be resized.\r\n * @name Moveable.Resizable#resizable\r\n * @default false\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     resizable: false,\r\n * });\r\n *\r\n * moveable.resizable = true;\r\n */\r\n/**\r\n * throttle of width, height when resize. If throttleResize is set to less than 1, the target may shake.\r\n * @name Moveable.Resizable#throttleResize\r\n * @default 1\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *   resizable: true,\r\n *   throttleResize: 1,\r\n * });\r\n *\r\n * moveable.throttleResize = 0;\r\n */\r\n/**\r\n * When resize or scale, keeps a ratio of the width, height.\r\n * @name Moveable.Resizable#keepRatio\r\n * @default false\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *   resizable: true,\r\n * });\r\n *\r\n * moveable.keepRatio = true;\r\n */\r\n/**\r\n * Set directions to show the control box.\r\n * @name Moveable.Resizable#renderDirections\r\n * @default [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"]\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *   resizable: true,\r\n *   renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\r\n * });\r\n *\r\n * moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\r\n */\r\n/**\r\n * Function to convert size for resize\r\n * @name Moveable.Resizable#resizeFormat\r\n * @default oneself\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *   resizable: true,\r\n *   resizeFormat: v => v,\r\n * });\r\n *\r\n * moveable.resizeFormat = (size: number[]) => ([Math.trunc(size[0]), Math.trunc(size[1])];\r\n */\r\n/**\r\n * When the resize starts, the resizeStart event is called.\r\n * @memberof Moveable.Resizable\r\n * @event resizeStart\r\n * @param {Moveable.Resizable.OnResizeStart} - Parameters for the resizeStart event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { resizable: true });\r\n * moveable.on(\"resizeStart\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n */\r\n/**\r\n * When resizing, `beforeResize` is called before `resize` occurs. In `beforeResize`, you can get and set the pre-value before resizing.\r\n * @memberof Moveable.Resizable\r\n * @event beforeResize\r\n * @param {Moveable.Resizable.OnBeforeResize} - Parameters for the `beforeResize` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { resizable: true });\r\n * moveable.on(\"beforeResize\", ({ setFixedDirection }) => {\r\n *     if (shiftKey) {\r\n *        setFixedDirection([0, 0]);\r\n *     }\r\n * });\r\n * moveable.on(\"resize\", ({ target, width, height, drag }) => {\r\n *     target.style.width = `${width}px`;\r\n *     target.style.height = `${height}px`;\r\n *     target.style.transform = drag.transform;\r\n * });\r\n */\r\n/**\r\n * When resizing, the resize event is called.\r\n * @memberof Moveable.Resizable\r\n * @event resize\r\n * @param {Moveable.Resizable.OnResize} - Parameters for the resize event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { resizable: true });\r\n * moveable.on(\"resize\", ({ target, width, height }) => {\r\n *     target.style.width = `${e.width}px`;\r\n *     target.style.height = `${e.height}px`;\r\n * });\r\n */\r\n/**\r\n * When the resize finishes, the resizeEnd event is called.\r\n * @memberof Moveable.Resizable\r\n * @event resizeEnd\r\n * @param {Moveable.Resizable.OnResizeEnd} - Parameters for the resizeEnd event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { resizable: true });\r\n * moveable.on(\"resizeEnd\", ({ target, isDrag }) => {\r\n *     console.log(target, isDrag);\r\n * });\r\n */\r\n/**\r\n* When the group resize starts, the `resizeGroupStart` event is called.\r\n* @memberof Moveable.Resizable\r\n* @event resizeGroupStart\r\n* @param {Moveable.Resizable.OnResizeGroupStart} - Parameters for the `resizeGroupStart` event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n*     resizable: true\r\n* });\r\n* moveable.on(\"resizeGroupStart\", ({ targets }) => {\r\n*     console.log(\"onResizeGroupStart\", targets);\r\n* });\r\n*/\r\n/**\r\n* When the group resize, the `resizeGroup` event is called.\r\n* @memberof Moveable.Resizable\r\n* @event resizeGroup\r\n* @param {Moveable.Resizable.onResizeGroup} - Parameters for the `resizeGroup` event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n*     resizable: true\r\n* });\r\n* moveable.on(\"resizeGroup\", ({ targets, events }) => {\r\n*     console.log(\"onResizeGroup\", targets);\r\n*     events.forEach(ev => {\r\n*         const offset = [\r\n*             direction[0] < 0 ? -ev.delta[0] : 0,\r\n*             direction[1] < 0 ? -ev.delta[1] : 0,\r\n*         ];\r\n*         // ev.drag is a drag event that occurs when the group resize.\r\n*         const left = offset[0] + ev.drag.beforeDist[0];\r\n*         const top = offset[1] + ev.drag.beforeDist[1];\r\n*         const width = ev.width;\r\n*         const top = ev.top;\r\n*     });\r\n* });\r\n*/\r\n/**\r\n * When the group resize finishes, the `resizeGroupEnd` event is called.\r\n * @memberof Moveable.Resizable\r\n * @event resizeGroupEnd\r\n * @param {Moveable.Resizable.OnResizeGroupEnd} - Parameters for the `resizeGroupEnd` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n *     resizable: true\r\n * });\r\n * moveable.on(\"resizeGroupEnd\", ({ targets, isDrag }) => {\r\n *     console.log(\"onResizeGroupEnd\", targets, isDrag);\r\n * });\r\n */\n\n/**\r\n * @namespace Rotatable\r\n * @memberof Moveable\r\n * @description Rotatable indicates whether the target can be rotated.\r\n */\r\nfunction setRotateStartInfo(moveable, datas, clientX, clientY, rect) {\r\n    var groupable = moveable.props.groupable;\r\n    var state = moveable.state;\r\n    var n = state.is3d ? 4 : 3;\r\n    var origin = datas.origin;\r\n    var nextOrigin = calculatePosition(moveable.state.rootMatrix, \r\n    // TO-DO #710\r\n    (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)([origin[0], origin[1]], groupable ? [0, 0] : [state.left, state.top]), n);\r\n    var startAbsoluteOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)([rect.left, rect.top], nextOrigin);\r\n    datas.startAbsoluteOrigin = startAbsoluteOrigin;\r\n    datas.prevDeg = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180;\r\n    datas.defaultDeg = datas.prevDeg;\r\n    datas.prevSnapDeg = 0;\r\n    datas.loop = 0;\r\n    datas.startDist = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDist)(startAbsoluteOrigin, [clientX, clientY]);\r\n}\r\nfunction getAbsoluteDist(deg, direction, datas) {\r\n    var defaultDeg = datas.defaultDeg, prevDeg = datas.prevDeg;\r\n    var normalizedPrevDeg = prevDeg % 360;\r\n    var loop = Math.floor(prevDeg / 360);\r\n    if (normalizedPrevDeg < 0) {\r\n        normalizedPrevDeg += 360;\r\n    }\r\n    if (normalizedPrevDeg > deg && normalizedPrevDeg > 270 && deg < 90) {\r\n        // 360 => 0\r\n        ++loop;\r\n    }\r\n    else if (normalizedPrevDeg < deg && normalizedPrevDeg < 90 && deg > 270) {\r\n        // 0 => 360\r\n        --loop;\r\n    }\r\n    var dist = direction * (loop * 360 + deg - defaultDeg);\r\n    datas.prevDeg = defaultDeg + dist;\r\n    return dist;\r\n}\r\nfunction getAbsoluteDistByClient(clientX, clientY, direction, datas) {\r\n    return getAbsoluteDist((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(datas.startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180, direction, datas);\r\n}\r\nfunction getRotateInfo(moveable, moveableRect, datas, dist, startValue, checkSnap) {\r\n    var _a = moveable.props.throttleRotate, throttleRotate = _a === void 0 ? 0 : _a;\r\n    var prevSnapDeg = datas.prevSnapDeg;\r\n    var snapRotation = 0;\r\n    var isSnap = false;\r\n    if (checkSnap) {\r\n        var result = checkSnapRotate(moveable, moveableRect, dist, startValue + dist);\r\n        isSnap = result.isSnap;\r\n        snapRotation = startValue + result.dist;\r\n    }\r\n    if (!isSnap) {\r\n        snapRotation = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(startValue + dist, throttleRotate);\r\n    }\r\n    var snapDeg = snapRotation - startValue;\r\n    datas.prevSnapDeg = snapDeg;\r\n    return [snapDeg - prevSnapDeg, snapDeg, snapRotation];\r\n}\r\nfunction getRotationPositions(rotationPosition, _a, direction) {\r\n    var _b = __read(_a, 4), pos1 = _b[0], pos2 = _b[1], pos3 = _b[2], pos4 = _b[3];\r\n    if (rotationPosition === \"none\") {\r\n        return [];\r\n    }\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(rotationPosition)) {\r\n        return rotationPosition.map(function (child) { return getRotationPositions(child, [pos1, pos2, pos3, pos4], direction)[0]; });\r\n    }\r\n    var _c = __read((rotationPosition || \"top\").split(\"-\"), 2), dir1 = _c[0], dir2 = _c[1];\r\n    var radPoses = [pos1, pos2];\r\n    if (dir1 === \"left\") {\r\n        radPoses = [pos3, pos1];\r\n    }\r\n    else if (dir1 === \"right\") {\r\n        radPoses = [pos2, pos4];\r\n    }\r\n    else if (dir1 === \"bottom\") {\r\n        radPoses = [pos4, pos3];\r\n    }\r\n    var pos = [\r\n        (radPoses[0][0] + radPoses[1][0]) / 2,\r\n        (radPoses[0][1] + radPoses[1][1]) / 2,\r\n    ];\r\n    var rad = getRotationRad(radPoses, direction);\r\n    if (dir2) {\r\n        var isStart = dir2 === \"top\" || dir2 === \"left\";\r\n        var isReverse = dir1 === \"bottom\" || dir1 === \"left\";\r\n        pos = radPoses[(isStart && !isReverse) || (!isStart && isReverse) ? 0 : 1];\r\n    }\r\n    return [[pos, rad]];\r\n}\r\nfunction dragControlCondition(moveable, e) {\r\n    if (e.isRequest) {\r\n        return e.requestAble === \"rotatable\";\r\n    }\r\n    var target = e.inputEvent.target;\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"rotation-control\"))\r\n        || (moveable.props.rotateAroundControls && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"around-control\")))\r\n        || ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"control\")) && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"rotatable\")))) {\r\n        return true;\r\n    }\r\n    var rotationTarget = moveable.props.rotationTarget;\r\n    if (rotationTarget) {\r\n        return getRefTargets(rotationTarget, true).some(function (element) {\r\n            if (!element) {\r\n                return false;\r\n            }\r\n            return target === element || target.contains(element);\r\n        });\r\n    }\r\n    return false;\r\n}\r\nvar css = \".rotation {\\nposition: absolute;\\nheight: 40px;\\nwidth: 1px;\\ntransform-origin: 50% 100%;\\nheight: calc(40px * var(--zoom));\\ntop: auto;\\nleft: 0;\\nbottom: 100%;\\nwill-change: transform;\\n}\\n.rotation .rotation-line {\\ndisplay: block;\\nwidth: 100%;\\nheight: 100%;\\ntransform-origin: 50% 50%;\\n}\\n.rotation .rotation-control {\\nborder-color: #4af;\\nborder-color: var(--moveable-color);\\nbackground:#fff;\\ncursor: alias;\\n}\\n:global .view-rotation-dragging, .rotatable.direction.control {\\ncursor: alias;\\n}\\n.rotatable.direction.control.move {\\ncursor: move;\\n}\\n\";\r\nvar Rotatable = {\r\n    name: \"rotatable\",\r\n    canPinch: true,\r\n    props: [\r\n        \"rotatable\",\r\n        \"rotationPosition\",\r\n        \"throttleRotate\",\r\n        \"renderDirections\",\r\n        \"rotationTarget\",\r\n        \"rotateAroundControls\",\r\n        \"edge\",\r\n        \"resolveAblesWithRotatable\",\r\n        \"displayAroundControls\",\r\n    ],\r\n    events: [\r\n        \"rotateStart\",\r\n        \"beforeRotate\",\r\n        \"rotate\",\r\n        \"rotateEnd\",\r\n        \"rotateGroupStart\",\r\n        \"beforeRotateGroup\",\r\n        \"rotateGroup\",\r\n        \"rotateGroupEnd\",\r\n    ],\r\n    css: [css],\r\n    viewClassName: function (moveable) {\r\n        if (!moveable.isDragging(\"rotatable\")) {\r\n            return \"\";\r\n        }\r\n        return prefix(\"view-rotation-dragging\");\r\n    },\r\n    render: function (moveable, React) {\r\n        var _a = getProps(moveable.props, \"rotatable\"), rotatable = _a.rotatable, rotationPosition = _a.rotationPosition, zoom = _a.zoom, renderDirections = _a.renderDirections, rotateAroundControls = _a.rotateAroundControls, resolveAblesWithRotatable = _a.resolveAblesWithRotatable;\r\n        var _b = moveable.getState(), renderPoses = _b.renderPoses, direction = _b.direction;\r\n        if (!rotatable) {\r\n            return null;\r\n        }\r\n        var positions = getRotationPositions(rotationPosition, renderPoses, direction);\r\n        var jsxs = [];\r\n        positions.forEach(function (_a, i) {\r\n            var _b = __read(_a, 2), pos = _b[0], rad = _b[1];\r\n            jsxs.push(React.createElement(\"div\", { key: \"rotation\".concat(i), className: prefix(\"rotation\"), style: {\r\n                    // tslint:disable-next-line: max-line-length\r\n                    transform: \"translate(-50%) translate(\".concat(pos[0], \"px, \").concat(pos[1], \"px) rotate(\").concat(rad, \"rad)\"),\r\n                } },\r\n                React.createElement(\"div\", { className: prefix(\"line rotation-line\"), style: {\r\n                        transform: \"scaleX(\".concat(zoom, \")\"),\r\n                    } }),\r\n                React.createElement(\"div\", { className: prefix(\"control rotation-control\"), style: {\r\n                        transform: \"translate(0.5px) scale(\".concat(zoom, \")\"),\r\n                    } })));\r\n        });\r\n        if (renderDirections) {\r\n            var ables = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getKeys)(resolveAblesWithRotatable || {});\r\n            var resolveMap_1 = {};\r\n            ables.forEach(function (name) {\r\n                resolveAblesWithRotatable[name].forEach(function (direction) {\r\n                    resolveMap_1[direction] = name;\r\n                });\r\n            });\r\n            var directionControlInfos = [];\r\n            if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(renderDirections)) {\r\n                directionControlInfos = renderDirections.map(function (dir) {\r\n                    var able = resolveMap_1[dir];\r\n                    return {\r\n                        data: able ? { resolve: able } : {},\r\n                        classNames: able ? [\"move\"] : [],\r\n                        dir: dir,\r\n                    };\r\n                });\r\n            }\r\n            jsxs.push.apply(jsxs, __spreadArray([], __read(renderDirectionControlsByInfos(moveable, \"rotatable\", directionControlInfos, React)), false));\r\n        }\r\n        if (rotateAroundControls) {\r\n            jsxs.push.apply(jsxs, __spreadArray([], __read(renderAroundControls(moveable, React)), false));\r\n        }\r\n        return jsxs;\r\n    },\r\n    dragControlCondition: dragControlCondition,\r\n    dragControlStart: function (moveable, e) {\r\n        var _a;\r\n        var _b;\r\n        var datas = e.datas, clientX = e.clientX, clientY = e.clientY, parentRotate = e.parentRotate, parentFlag = e.parentFlag, isPinch = e.isPinch, isRequest = e.isRequest;\r\n        var state = moveable.state;\r\n        var target = state.target, left = state.left, top = state.top, direction = state.direction, beforeDirection = state.beforeDirection, targetTransform = state.targetTransform, moveableClientRect = state.moveableClientRect, offsetMatrix = state.offsetMatrix, targetMatrix = state.targetMatrix, allMatrix = state.allMatrix, width = state.width, height = state.height;\r\n        if (!isRequest && !target) {\r\n            return false;\r\n        }\r\n        var rect = moveable.getRect();\r\n        datas.rect = rect;\r\n        datas.transform = targetTransform;\r\n        datas.left = left;\r\n        datas.top = top;\r\n        var setFixedPosition = function (fixedPosition) {\r\n            var result = getOffsetFixedPositionInfo(moveable.state, fixedPosition);\r\n            datas.fixedDirection = result.fixedDirection;\r\n            datas.fixedOffset = result.fixedOffset;\r\n            datas.fixedPosition = result.fixedPosition;\r\n            if (resizeStart) {\r\n                resizeStart.setFixedPosition(fixedPosition);\r\n            }\r\n        };\r\n        var setFixedDirection = function (fixedDirection) {\r\n            var result = getOffsetFixedDirectionInfo(moveable.state, fixedDirection);\r\n            datas.fixedDirection = result.fixedDirection;\r\n            datas.fixedOffset = result.fixedOffset;\r\n            datas.fixedPosition = result.fixedPosition;\r\n            if (resizeStart) {\r\n                resizeStart.setFixedDirection(fixedDirection);\r\n            }\r\n        };\r\n        var startClientX = clientX;\r\n        var startClientY = clientY;\r\n        if (isRequest || isPinch || parentFlag) {\r\n            var externalRotate = parentRotate || 0;\r\n            datas.beforeInfo = {\r\n                origin: rect.beforeOrigin,\r\n                prevDeg: externalRotate,\r\n                defaultDeg: externalRotate,\r\n                prevSnapDeg: 0,\r\n                startDist: 0,\r\n            };\r\n            datas.afterInfo = __assign(__assign({}, datas.beforeInfo), { origin: rect.origin });\r\n            datas.absoluteInfo = __assign(__assign({}, datas.beforeInfo), { origin: rect.origin, startValue: externalRotate });\r\n        }\r\n        else {\r\n            var inputTarget = (_b = e.inputEvent) === null || _b === void 0 ? void 0 : _b.target;\r\n            if (inputTarget) {\r\n                var regionDirection = inputTarget.getAttribute(\"data-direction\") || \"\";\r\n                var controlDirection = DIRECTION_REGION_TO_DIRECTION[regionDirection];\r\n                if (controlDirection) {\r\n                    datas.isControl = true;\r\n                    datas.isAroundControl = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(inputTarget, prefix(\"around-control\"));\r\n                    datas.controlDirection = controlDirection;\r\n                    var resolve = inputTarget.getAttribute(\"data-resolve\");\r\n                    if (resolve) {\r\n                        datas.resolveAble = resolve;\r\n                    }\r\n                    var clientPoses = calculateMoveableClientPositions(state.rootMatrix, state.renderPoses, moveableClientRect);\r\n                    _a = __read(getPosByDirection(clientPoses, controlDirection), 2), startClientX = _a[0], startClientY = _a[1];\r\n                }\r\n            }\r\n            datas.beforeInfo = { origin: rect.beforeOrigin };\r\n            datas.afterInfo = { origin: rect.origin };\r\n            datas.absoluteInfo = {\r\n                origin: rect.origin,\r\n                startValue: rect.rotation,\r\n            };\r\n            var originalFixedPosition_1 = setFixedPosition;\r\n            setFixedPosition = function (fixedPosition) {\r\n                var n = state.is3d ? 4 : 3;\r\n                var _a = __read((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.getOrigin)(targetMatrix, n), fixedPosition), 2), originX = _a[0], originY = _a[1];\r\n                var fixedBeforeOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)(offsetMatrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertPositionMatrix)([originX, originY], n));\r\n                var fixedAfterOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)(allMatrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertPositionMatrix)([fixedPosition[0], fixedPosition[1]], n));\r\n                originalFixedPosition_1(fixedPosition);\r\n                var posDelta = state.posDelta;\r\n                datas.beforeInfo.origin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(fixedBeforeOrigin, posDelta);\r\n                datas.afterInfo.origin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(fixedAfterOrigin, posDelta);\r\n                datas.absoluteInfo.origin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(fixedAfterOrigin, posDelta);\r\n                setRotateStartInfo(moveable, datas.beforeInfo, startClientX, startClientY, moveableClientRect);\r\n                setRotateStartInfo(moveable, datas.afterInfo, startClientX, startClientY, moveableClientRect);\r\n                setRotateStartInfo(moveable, datas.absoluteInfo, startClientX, startClientY, moveableClientRect);\r\n            };\r\n            setFixedDirection = function (fixedDirection) {\r\n                var fixedPosition = getPosByDirection([\r\n                    [0, 0],\r\n                    [width, 0],\r\n                    [0, height],\r\n                    [width, height],\r\n                ], fixedDirection);\r\n                setFixedPosition(fixedPosition);\r\n            };\r\n        }\r\n        datas.startClientX = startClientX;\r\n        datas.startClientY = startClientY;\r\n        datas.direction = direction;\r\n        datas.beforeDirection = beforeDirection;\r\n        datas.startValue = 0;\r\n        datas.datas = {};\r\n        setDefaultTransformIndex(moveable, e, \"rotate\");\r\n        var dragStart = false;\r\n        var resizeStart = false;\r\n        if (datas.isControl && datas.resolveAble) {\r\n            var resolveAble = datas.resolveAble;\r\n            if (resolveAble === \"resizable\") {\r\n                resizeStart = Resizable.dragControlStart(moveable, __assign(__assign({}, (new CustomGesto(\"resizable\").dragStart([0, 0], e))), { parentPosition: datas.controlPosition, parentFixedPosition: datas.fixedPosition }));\r\n            }\r\n        }\r\n        if (!resizeStart) {\r\n            dragStart = Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e));\r\n        }\r\n        setFixedPosition(getTotalOrigin(moveable));\r\n        var params = fillParams(moveable, e, __assign(__assign({ set: function (rotatation) {\r\n                datas.startValue = rotatation * Math.PI / 180;\r\n            }, setFixedDirection: setFixedDirection, setFixedPosition: setFixedPosition }, fillTransformStartEvent(moveable, e)), { dragStart: dragStart, resizeStart: resizeStart }));\r\n        var result = triggerEvent(moveable, \"onRotateStart\", params);\r\n        datas.isRotate = result !== false;\r\n        state.snapRenderInfo = {\r\n            request: e.isRequest,\r\n        };\r\n        return datas.isRotate ? params : false;\r\n    },\r\n    dragControl: function (moveable, e) {\r\n        var _a, _b, _c;\r\n        var datas = e.datas, clientDistX = e.clientDistX, clientDistY = e.clientDistY, parentRotate = e.parentRotate, parentFlag = e.parentFlag, isPinch = e.isPinch, groupDelta = e.groupDelta, resolveMatrix = e.resolveMatrix;\r\n        var beforeDirection = datas.beforeDirection, beforeInfo = datas.beforeInfo, afterInfo = datas.afterInfo, absoluteInfo = datas.absoluteInfo, isRotate = datas.isRotate, startValue = datas.startValue, rect = datas.rect, startClientX = datas.startClientX, startClientY = datas.startClientY;\r\n        if (!isRotate) {\r\n            return;\r\n        }\r\n        resolveTransformEvent(moveable, e, \"rotate\");\r\n        var targetDirection = getTransformDirection(e);\r\n        var direction = beforeDirection * targetDirection;\r\n        var parentMoveable = moveable.props.parentMoveable;\r\n        var beforeDelta = 0;\r\n        var beforeDist;\r\n        var beforeRotation;\r\n        var delta = 0;\r\n        var dist;\r\n        var rotation;\r\n        var absoluteDelta = 0;\r\n        var absoluteDist;\r\n        var absoluteRotation;\r\n        var startRotation = 180 / Math.PI * startValue;\r\n        var absoluteStartRotation = absoluteInfo.startValue;\r\n        var isSnap = false;\r\n        var nextClientX = startClientX + clientDistX;\r\n        var nextClientY = startClientY + clientDistY;\r\n        if (!parentFlag && \"parentDist\" in e) {\r\n            var parentDist = e.parentDist;\r\n            beforeDist = parentDist;\r\n            dist = parentDist;\r\n            absoluteDist = parentDist;\r\n        }\r\n        else if (isPinch || parentFlag) {\r\n            beforeDist = getAbsoluteDist(parentRotate, beforeDirection, beforeInfo);\r\n            dist = getAbsoluteDist(parentRotate, direction, afterInfo);\r\n            absoluteDist = getAbsoluteDist(parentRotate, direction, absoluteInfo);\r\n        }\r\n        else {\r\n            beforeDist = getAbsoluteDistByClient(nextClientX, nextClientY, beforeDirection, beforeInfo);\r\n            dist = getAbsoluteDistByClient(nextClientX, nextClientY, direction, afterInfo);\r\n            absoluteDist = getAbsoluteDistByClient(nextClientX, nextClientY, direction, absoluteInfo);\r\n            isSnap = true;\r\n        }\r\n        beforeRotation = startRotation + beforeDist;\r\n        rotation = startRotation + dist;\r\n        absoluteRotation = absoluteStartRotation + absoluteDist;\r\n        triggerEvent(moveable, \"onBeforeRotate\", fillParams(moveable, e, {\r\n            beforeRotation: beforeRotation,\r\n            rotation: rotation,\r\n            absoluteRotation: absoluteRotation,\r\n            setRotation: function (nextRotation) {\r\n                dist = nextRotation - startRotation;\r\n                beforeDist = dist;\r\n                absoluteDist = dist;\r\n            },\r\n        }, true));\r\n        _a = __read(getRotateInfo(moveable, rect, beforeInfo, beforeDist, startRotation, isSnap), 3), beforeDelta = _a[0], beforeDist = _a[1], beforeRotation = _a[2];\r\n        _b = __read(getRotateInfo(moveable, rect, afterInfo, dist, startRotation, isSnap), 3), delta = _b[0], dist = _b[1], rotation = _b[2];\r\n        _c = __read(getRotateInfo(moveable, rect, absoluteInfo, absoluteDist, absoluteStartRotation, isSnap), 3), absoluteDelta = _c[0], absoluteDist = _c[1], absoluteRotation = _c[2];\r\n        if (!absoluteDelta && !delta && !beforeDelta && !parentMoveable && !resolveMatrix) {\r\n            return;\r\n        }\r\n        var nextTransform = convertTransformFormat(datas, \"rotate(\".concat(rotation, \"deg)\"), \"rotate(\".concat(dist, \"deg)\"));\r\n        if (resolveMatrix) {\r\n            datas.fixedPosition = getTranslateFixedPosition(moveable, datas.targetAllTransform, datas.fixedDirection, datas.fixedOffset, datas);\r\n        }\r\n        var inverseDist = getRotateDist(moveable, dist, datas);\r\n        var inverseDelta = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(groupDelta || [0, 0], inverseDist), datas.prevInverseDist || [0, 0]);\r\n        datas.prevInverseDist = inverseDist;\r\n        datas.requestValue = null;\r\n        var dragEvent = fillTransformEvent(moveable, nextTransform, inverseDelta, isPinch, e);\r\n        var transformEvent = dragEvent;\r\n        var parentDistance = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDist)([nextClientX, nextClientY], absoluteInfo.startAbsoluteOrigin) - absoluteInfo.startDist;\r\n        var resize = undefined;\r\n        if (datas.resolveAble === \"resizable\") {\r\n            var resizeEvent = Resizable.dragControl(moveable, __assign(__assign({}, setCustomDrag(e, moveable.state, [e.deltaX, e.deltaY], !!isPinch, false, \"resizable\")), { resolveMatrix: true, parentDistance: parentDistance }));\r\n            if (resizeEvent) {\r\n                resize = resizeEvent;\r\n                transformEvent = fillAfterTransform(transformEvent, resizeEvent, e);\r\n            }\r\n        }\r\n        var params = fillParams(moveable, e, __assign(__assign({ delta: delta, dist: dist, rotate: rotation, rotation: rotation, beforeDist: beforeDist, beforeDelta: beforeDelta, beforeRotate: beforeRotation, beforeRotation: beforeRotation, absoluteDist: absoluteDist, absoluteDelta: absoluteDelta, absoluteRotate: absoluteRotation, absoluteRotation: absoluteRotation, isPinch: !!isPinch, resize: resize }, dragEvent), transformEvent));\r\n        triggerEvent(moveable, \"onRotate\", params);\r\n        return params;\r\n    },\r\n    dragControlEnd: function (moveable, e) {\r\n        var datas = e.datas;\r\n        if (!datas.isRotate) {\r\n            return;\r\n        }\r\n        datas.isRotate = false;\r\n        var params = fillEndParams(moveable, e, {});\r\n        triggerEvent(moveable, \"onRotateEnd\", params);\r\n        return params;\r\n    },\r\n    dragGroupControlCondition: dragControlCondition,\r\n    dragGroupControlStart: function (moveable, e) {\r\n        var datas = e.datas;\r\n        var _a = moveable.state, parentLeft = _a.left, parentTop = _a.top, parentBeforeOrigin = _a.beforeOrigin;\r\n        var params = this.dragControlStart(moveable, e);\r\n        if (!params) {\r\n            return false;\r\n        }\r\n        params.set(datas.beforeDirection * moveable.rotation);\r\n        var events = triggerChildAbles(moveable, this, \"dragControlStart\", e, function (child, ev) {\r\n            var _a = child.state, left = _a.left, top = _a.top, beforeOrigin = _a.beforeOrigin;\r\n            var childClient = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)([left, top], [parentLeft, parentTop]), (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(beforeOrigin, parentBeforeOrigin));\r\n            ev.datas.startGroupClient = childClient;\r\n            ev.datas.groupClient = childClient;\r\n            return __assign(__assign({}, ev), { parentRotate: 0 });\r\n        });\r\n        var nextParams = __assign(__assign({}, params), { targets: moveable.props.targets, events: events });\r\n        var result = triggerEvent(moveable, \"onRotateGroupStart\", nextParams);\r\n        datas.isRotate = result !== false;\r\n        return datas.isRotate ? params : false;\r\n    },\r\n    dragGroupControl: function (moveable, e) {\r\n        var datas = e.datas;\r\n        if (!datas.isRotate) {\r\n            return;\r\n        }\r\n        catchEvent(moveable, \"onBeforeRotate\", function (parentEvent) {\r\n            triggerEvent(moveable, \"onBeforeRotateGroup\", fillParams(moveable, e, __assign(__assign({}, parentEvent), { targets: moveable.props.targets }), true));\r\n        });\r\n        var params = this.dragControl(moveable, e);\r\n        if (!params) {\r\n            return;\r\n        }\r\n        var direction = datas.beforeDirection;\r\n        var parentRotate = params.beforeDist;\r\n        var rad = parentRotate / 180 * Math.PI;\r\n        var events = triggerChildAbles(moveable, this, \"dragControl\", e, function (_, ev) {\r\n            var startGroupClient = ev.datas.startGroupClient;\r\n            var _a = __read(ev.datas.groupClient, 2), prevClientX = _a[0], prevClientY = _a[1];\r\n            var _b = __read((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.rotate)(startGroupClient, rad * direction), 2), clientX = _b[0], clientY = _b[1];\r\n            var delta = [clientX - prevClientX, clientY - prevClientY];\r\n            ev.datas.groupClient = [clientX, clientY];\r\n            return __assign(__assign({}, ev), { parentRotate: parentRotate, groupDelta: delta });\r\n        });\r\n        moveable.rotation = direction * params.beforeRotation;\r\n        var nextParams = __assign({ targets: moveable.props.targets, events: events, set: function (rotation) {\r\n                moveable.rotation = rotation;\r\n            }, setGroupRotation: function (rotation) {\r\n                moveable.rotation = rotation;\r\n            } }, params);\r\n        triggerEvent(moveable, \"onRotateGroup\", nextParams);\r\n        return nextParams;\r\n    },\r\n    dragGroupControlEnd: function (moveable, e) {\r\n        var isDrag = e.isDrag, datas = e.datas;\r\n        if (!datas.isRotate) {\r\n            return;\r\n        }\r\n        this.dragControlEnd(moveable, e);\r\n        var events = triggerChildAbles(moveable, this, \"dragControlEnd\", e);\r\n        var nextParams = fillEndParams(moveable, e, {\r\n            targets: moveable.props.targets,\r\n            events: events,\r\n        });\r\n        triggerEvent(moveable, \"onRotateGroupEnd\", nextParams);\r\n        return isDrag;\r\n    },\r\n    /**\r\n     * @method Moveable.Rotatable#request\r\n     * @param {object} [e] - the Resizable's request parameter\r\n     * @param {number} [e.deltaRotate=0] -  delta number of rotation\r\n     * @param {number} [e.rotate=0] - absolute number of moveable's rotation\r\n     * @return {Moveable.Requester} Moveable Requester\r\n     * @example\r\n\n     * // Instantly Request (requestStart - request - requestEnd)\r\n     * moveable.request(\"rotatable\", { deltaRotate: 10 }, true);\r\n     *\r\n     * * moveable.request(\"rotatable\", { rotate: 10 }, true);\r\n     *\r\n     * // requestStart\r\n     * const requester = moveable.request(\"rotatable\");\r\n     *\r\n     * // request\r\n     * requester.request({ deltaRotate: 10 });\r\n     * requester.request({ deltaRotate: 10 });\r\n     * requester.request({ deltaRotate: 10 });\r\n     *\r\n     * requester.request({ rotate: 10 });\r\n     * requester.request({ rotate: 20 });\r\n     * requester.request({ rotate: 30 });\r\n     *\r\n     * // requestEnd\r\n     * requester.requestEnd();\r\n     */\r\n    request: function (moveable) {\r\n        var datas = {};\r\n        var distRotate = 0;\r\n        var startRotation = moveable.getRotation();\r\n        return {\r\n            isControl: true,\r\n            requestStart: function () {\r\n                return { datas: datas };\r\n            },\r\n            request: function (e) {\r\n                if (\"deltaRotate\" in e) {\r\n                    distRotate += e.deltaRotate;\r\n                }\r\n                else if (\"rotate\" in e) {\r\n                    distRotate = e.rotate - startRotation;\r\n                }\r\n                return { datas: datas, parentDist: distRotate };\r\n            },\r\n            requestEnd: function () {\r\n                return { datas: datas, isDrag: true };\r\n            },\r\n        };\r\n    },\r\n};\r\n/**\r\n * Whether or not target can be rotated. (default: false)\r\n * @name Moveable.Rotatable#rotatable\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.rotatable = true;\r\n */\r\n/**\r\n * You can specify the position of the rotation. (default: \"top\")\r\n * @name Moveable.Rotatable#rotationPosition\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *   rotationPosition: \"top\",\r\n * });\r\n *\r\n * moveable.rotationPosition = \"bottom\"\r\n */\r\n/**\r\n * throttle of angle(degree) when rotate.\r\n * @name Moveable.Rotatable#throttleRotate\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.throttleRotate = 1;\r\n */\r\n/**\r\n * When the rotate starts, the rotateStart event is called.\r\n * @memberof Moveable.Rotatable\r\n * @event rotateStart\r\n * @param {Moveable.Rotatable.OnRotateStart} - Parameters for the rotateStart event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { rotatable: true });\r\n * moveable.on(\"rotateStart\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n */\r\n/**\r\n* When rotating, the rotate event is called.\r\n* @memberof Moveable.Rotatable\r\n* @event rotate\r\n* @param {Moveable.Rotatable.OnRotate} - Parameters for the rotate event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, { rotatable: true });\r\n* moveable.on(\"rotate\", ({ target, transform, dist }) => {\r\n*     target.style.transform = transform;\r\n* });\r\n*/\r\n/**\r\n * When the rotate finishes, the rotateEnd event is called.\r\n * @memberof Moveable.Rotatable\r\n * @event rotateEnd\r\n * @param {Moveable.Rotatable.OnRotateEnd} - Parameters for the rotateEnd event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { rotatable: true });\r\n * moveable.on(\"rotateEnd\", ({ target, isDrag }) => {\r\n *     console.log(target, isDrag);\r\n * });\r\n */\r\n/**\r\n * When the group rotate starts, the `rotateGroupStart` event is called.\r\n * @memberof Moveable.Rotatable\r\n * @event rotateGroupStart\r\n * @param {Moveable.Rotatable.OnRotateGroupStart} - Parameters for the `rotateGroupStart` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n *     rotatable: true\r\n * });\r\n * moveable.on(\"rotateGroupStart\", ({ targets }) => {\r\n *     console.log(\"onRotateGroupStart\", targets);\r\n * });\r\n */\r\n/**\r\n* When the group rotate, the `rotateGroup` event is called.\r\n* @memberof Moveable.Rotatable\r\n* @event rotateGroup\r\n* @param {Moveable.Rotatable.OnRotateGroup} - Parameters for the `rotateGroup` event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n*     rotatable: true\r\n* });\r\n* moveable.on(\"rotateGroup\", ({ targets, events }) => {\r\n*     console.log(\"onRotateGroup\", targets);\r\n*     events.forEach(ev => {\r\n*         const target = ev.target;\r\n*         // ev.drag is a drag event that occurs when the group rotate.\r\n*         const left = ev.drag.beforeDist[0];\r\n*         const top = ev.drag.beforeDist[1];\r\n*         const deg = ev.beforeDist;\r\n*     });\r\n* });\r\n*/\r\n/**\r\n * When the group rotate finishes, the `rotateGroupEnd` event is called.\r\n * @memberof Moveable.Rotatable\r\n * @event rotateGroupEnd\r\n * @param {Moveable.Rotatable.OnRotateGroupEnd} - Parameters for the `rotateGroupEnd` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n *     rotatable: true\r\n * });\r\n * moveable.on(\"rotateGroupEnd\", ({ targets, isDrag }) => {\r\n *     console.log(\"onRotateGroupEnd\", targets, isDrag);\r\n * });\r\n */\n\nfunction renderGuideline(info, React) {\r\n    var _a;\r\n    var direction = info.direction, classNames = info.classNames, size = info.size, pos = info.pos, zoom = info.zoom, key = info.key;\r\n    var isHorizontal = direction === \"horizontal\";\r\n    var scaleType = isHorizontal ? \"Y\" : \"X\";\r\n    // const scaleType2 = isHorizontal ? \"Y\" : \"X\";\r\n    return React.createElement(\"div\", {\r\n        key: key,\r\n        className: classNames.join(\" \"),\r\n        style: (_a = {},\r\n            _a[isHorizontal ? \"width\" : \"height\"] = \"\".concat(size),\r\n            _a.transform = \"translate(\".concat(pos[0], \", \").concat(pos[1], \") translate\").concat(scaleType, \"(-50%) scale\").concat(scaleType, \"(\").concat(zoom, \")\"),\r\n            _a),\r\n    });\r\n}\r\nfunction renderInnerGuideline(info, React) {\r\n    return renderGuideline(__assign(__assign({}, info), { classNames: __spreadArray([\r\n            prefix(\"line\", \"guideline\", info.direction)\r\n        ], __read(info.classNames), false).filter(function (className) { return className; }), size: info.size || \"\".concat(info.sizeValue, \"px\"), pos: info.pos || info.posValue.map(function (v) { return \"\".concat((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(v, 0.1), \"px\"); }) }), React);\r\n}\r\nfunction renderSnapPoses(moveable, direction, snapPoses, minPos, targetPos, size, index, React) {\r\n    var zoom = moveable.props.zoom;\r\n    return snapPoses.map(function (_a, i) {\r\n        var type = _a.type, pos = _a.pos;\r\n        var renderPos = [0, 0];\r\n        renderPos[index] = minPos;\r\n        renderPos[index ? 0 : 1] = -targetPos + pos;\r\n        return renderInnerGuideline({\r\n            key: \"\".concat(direction, \"TargetGuideline\").concat(i),\r\n            classNames: [prefix(\"target\", \"bold\", type)],\r\n            posValue: renderPos,\r\n            sizeValue: size,\r\n            zoom: zoom,\r\n            direction: direction,\r\n        }, React);\r\n    });\r\n}\r\nfunction renderGuidelines(moveable, type, guidelines, targetPos, targetRect, React) {\r\n    var _a = moveable.props, zoom = _a.zoom, isDisplayInnerSnapDigit = _a.isDisplayInnerSnapDigit;\r\n    var mainNames = type === \"horizontal\" ? VERTICAL_NAMES_MAP : HORIZONTAL_NAMES_MAP;\r\n    var targetStart = targetRect[mainNames.start];\r\n    var targetEnd = targetRect[mainNames.end];\r\n    return guidelines.filter(function (_a) {\r\n        var hide = _a.hide, elementRect = _a.elementRect;\r\n        if (hide) {\r\n            return false;\r\n        }\r\n        if (isDisplayInnerSnapDigit && elementRect) {\r\n            // inner\r\n            var rect = elementRect.rect;\r\n            if (rect[mainNames.start] <= targetStart && targetEnd <= rect[mainNames.end]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }).map(function (guideline, i) {\r\n        var pos = guideline.pos, size = guideline.size, element = guideline.element, className = guideline.className;\r\n        var renderPos = [\r\n            -targetPos[0] + pos[0],\r\n            -targetPos[1] + pos[1],\r\n        ];\r\n        return renderInnerGuideline({\r\n            key: \"\".concat(type, \"-default-guideline-\").concat(i),\r\n            classNames: element ? [prefix(\"bold\"), className] : [prefix(\"normal\"), className],\r\n            direction: type,\r\n            posValue: renderPos,\r\n            sizeValue: size,\r\n            zoom: zoom,\r\n        }, React);\r\n    });\r\n}\r\nfunction renderDigitLine(moveable, type, lineType, index, gap, renderPos, className, React) {\r\n    var _a;\r\n    var _b = moveable.props, _c = _b.snapDigit, snapDigit = _c === void 0 ? 0 : _c, _d = _b.isDisplaySnapDigit, isDisplaySnapDigit = _d === void 0 ? true : _d, _e = _b.snapDistFormat, snapDistFormat = _e === void 0 ? function (v, type) {\r\n        // Type can be used render different values.\r\n        if (type === 'vertical') {\r\n            return v;\r\n        }\r\n        return v;\r\n    } : _e, zoom = _b.zoom;\r\n    var scaleType = type === \"horizontal\" ? \"X\" : \"Y\";\r\n    var sizeName = type === \"vertical\" ? \"height\" : \"width\";\r\n    var absGap = Math.abs(gap);\r\n    var snapSize = isDisplaySnapDigit\r\n        ? parseFloat(absGap.toFixed(snapDigit))\r\n        : 0;\r\n    return React.createElement(\"div\", { key: \"\".concat(type, \"-\").concat(lineType, \"-guideline-\").concat(index), className: prefix(\"guideline-group\", type), style: (_a = {\r\n                left: \"\".concat(renderPos[0], \"px\"),\r\n                top: \"\".concat(renderPos[1], \"px\")\r\n            },\r\n            _a[sizeName] = \"\".concat(absGap, \"px\"),\r\n            _a) },\r\n        renderInnerGuideline({\r\n            direction: type,\r\n            classNames: [prefix(lineType), className],\r\n            size: \"100%\",\r\n            posValue: [0, 0],\r\n            sizeValue: absGap,\r\n            zoom: zoom,\r\n        }, React),\r\n        React.createElement(\"div\", { className: prefix(\"size-value\", \"gap\"), style: {\r\n                transform: \"translate\".concat(scaleType, \"(-50%) scale(\").concat(zoom, \")\"),\r\n            } }, snapSize > 0 ? snapDistFormat(snapSize, type) : \"\"));\r\n}\r\nfunction groupByElementGuidelines(type, guidelines, targetRect, isDisplayInnerSnapDigit) {\r\n    var index = type === \"vertical\" ? 0 : 1;\r\n    var otherIndex = type === \"vertical\" ? 1 : 0;\r\n    var names = index ? VERTICAL_NAMES_MAP : HORIZONTAL_NAMES_MAP;\r\n    var targetStart = targetRect[names.start];\r\n    var targetEnd = targetRect[names.end];\r\n    return groupBy(guidelines, function (guideline) {\r\n        return guideline.pos[index];\r\n    }).map(function (nextGuidelines) {\r\n        var start = [];\r\n        var end = [];\r\n        var inner = [];\r\n        nextGuidelines.forEach(function (guideline) {\r\n            var _a, _b;\r\n            var element = guideline.element;\r\n            var rect = guideline.elementRect.rect;\r\n            if (rect[names.end] < targetStart) {\r\n                start.push(guideline);\r\n            }\r\n            else if (targetEnd < rect[names.start]) {\r\n                end.push(guideline);\r\n            }\r\n            else if (rect[names.start] <= targetStart && targetEnd <= rect[names.end] && isDisplayInnerSnapDigit) {\r\n                var pos = guideline.pos;\r\n                var elementRect1 = { element: element, rect: __assign(__assign({}, rect), (_a = {}, _a[names.end] = rect[names.start], _a)) };\r\n                var elementRect2 = { element: element, rect: __assign(__assign({}, rect), (_b = {}, _b[names.start] = rect[names.end], _b)) };\r\n                var nextPos1 = [0, 0];\r\n                var nextPos2 = [0, 0];\r\n                nextPos1[index] = pos[index];\r\n                nextPos1[otherIndex] = pos[otherIndex];\r\n                nextPos2[index] = pos[index];\r\n                nextPos2[otherIndex] = pos[otherIndex] + guideline.size;\r\n                start.push({\r\n                    type: type,\r\n                    pos: nextPos1,\r\n                    size: 0,\r\n                    elementRect: elementRect1,\r\n                    direction: \"\",\r\n                    elementDirection: \"end\",\r\n                });\r\n                end.push({\r\n                    type: type,\r\n                    pos: nextPos2,\r\n                    size: 0,\r\n                    elementRect: elementRect2,\r\n                    direction: \"\",\r\n                    elementDirection: \"start\",\r\n                });\r\n                // inner.push(guideline);\r\n            }\r\n        });\r\n        start.sort(function (a, b) {\r\n            return b.pos[otherIndex] - a.pos[otherIndex];\r\n        });\r\n        end.sort(function (a, b) {\r\n            return a.pos[otherIndex] - b.pos[otherIndex];\r\n        });\r\n        return {\r\n            total: nextGuidelines,\r\n            start: start,\r\n            end: end,\r\n            inner: inner,\r\n        };\r\n    });\r\n}\r\nfunction renderDashedGuidelines(moveable, guidelines, targetPos, targetRect, React) {\r\n    var isDisplayInnerSnapDigit = moveable.props.isDisplayInnerSnapDigit;\r\n    var rendered = [];\r\n    [\"vertical\", \"horizontal\"].forEach(function (type) {\r\n        var nextGuidelines = guidelines.filter(function (guideline) { return guideline.type === type; });\r\n        var index = type === \"vertical\" ? 1 : 0;\r\n        var otherIndex = index ? 0 : 1;\r\n        var groups = groupByElementGuidelines(type, nextGuidelines, targetRect, isDisplayInnerSnapDigit);\r\n        var mainNames = index ? HORIZONTAL_NAMES_MAP : VERTICAL_NAMES_MAP;\r\n        var sideNames = index ? VERTICAL_NAMES_MAP : HORIZONTAL_NAMES_MAP;\r\n        var targetStart = targetRect[mainNames.start];\r\n        var targetEnd = targetRect[mainNames.end];\r\n        groups.forEach(function (_a) {\r\n            var total = _a.total, start = _a.start, end = _a.end, inner = _a.inner;\r\n            var sidePos = targetPos[otherIndex] + total[0].pos[otherIndex] - targetRect[sideNames.start];\r\n            var prevRect = targetRect;\r\n            start.forEach(function (guideline) {\r\n                var nextRect = guideline.elementRect.rect;\r\n                var size = prevRect[mainNames.start] - nextRect[mainNames.end];\r\n                if (size > 0) {\r\n                    var renderPos = [0, 0];\r\n                    renderPos[index] = targetPos[index] + prevRect[mainNames.start] - targetStart - size;\r\n                    renderPos[otherIndex] = sidePos;\r\n                    rendered.push(renderDigitLine(moveable, type, \"dashed\", rendered.length, size, renderPos, guideline.className, React));\r\n                }\r\n                prevRect = nextRect;\r\n            });\r\n            prevRect = targetRect;\r\n            end.forEach(function (guideline) {\r\n                var nextRect = guideline.elementRect.rect;\r\n                var size = nextRect[mainNames.start] - prevRect[mainNames.end];\r\n                if (size > 0) {\r\n                    var renderPos = [0, 0];\r\n                    renderPos[index] = targetPos[index] + prevRect[mainNames.end] - targetStart;\r\n                    renderPos[otherIndex] = sidePos;\r\n                    rendered.push(renderDigitLine(moveable, type, \"dashed\", rendered.length, size, renderPos, guideline.className, React));\r\n                }\r\n                prevRect = nextRect;\r\n            });\r\n            inner.forEach(function (guideline) {\r\n                var nextRect = guideline.elementRect.rect;\r\n                var size1 = targetStart - nextRect[mainNames.start];\r\n                var size2 = nextRect[mainNames.end] - targetEnd;\r\n                var renderPos1 = [0, 0];\r\n                var renderPos2 = [0, 0];\r\n                renderPos1[index] = targetPos[index] - size1;\r\n                renderPos1[otherIndex] = sidePos;\r\n                renderPos2[index] = targetPos[index] + targetEnd - targetStart;\r\n                renderPos2[otherIndex] = sidePos;\r\n                rendered.push(renderDigitLine(moveable, type, \"dashed\", rendered.length, size1, renderPos1, guideline.className, React));\r\n                rendered.push(renderDigitLine(moveable, type, \"dashed\", rendered.length, size2, renderPos2, guideline.className, React));\r\n            });\r\n        });\r\n    });\r\n    return rendered;\r\n}\r\nfunction renderGapGuidelines(moveable, guidelines, targetPos, targetRect, React) {\r\n    var rendered = [];\r\n    [\"horizontal\", \"vertical\"].forEach(function (type) {\r\n        var nextGuidelines = guidelines.filter(function (guideline) { return guideline.type === type; }).slice(0, 1);\r\n        var index = type === \"vertical\" ? 0 : 1;\r\n        var otherIndex = index ? 0 : 1;\r\n        var mainNames = index ? HORIZONTAL_NAMES_MAP : VERTICAL_NAMES_MAP;\r\n        var sideNames = index ? VERTICAL_NAMES_MAP : HORIZONTAL_NAMES_MAP;\r\n        var targetStart = targetRect[mainNames.start];\r\n        var targetEnd = targetRect[mainNames.end];\r\n        var targetSideStart = targetRect[sideNames.start];\r\n        var targetSideEnd = targetRect[sideNames.end];\r\n        nextGuidelines.forEach(function (_a) {\r\n            var gap = _a.gap, gapRects = _a.gapRects;\r\n            var sideStartPos = Math.max.apply(Math, __spreadArray([targetSideStart], __read(gapRects.map(function (_a) {\r\n                var rect = _a.rect;\r\n                return rect[sideNames.start];\r\n            })), false));\r\n            var sideEndPos = Math.min.apply(Math, __spreadArray([targetSideEnd], __read(gapRects.map(function (_a) {\r\n                var rect = _a.rect;\r\n                return rect[sideNames.end];\r\n            })), false));\r\n            var sideCenterPos = (sideStartPos + sideEndPos) / 2;\r\n            if (sideStartPos === sideEndPos || sideCenterPos === (targetSideStart + targetSideEnd) / 2) {\r\n                return;\r\n            }\r\n            gapRects.forEach(function (_a) {\r\n                var rect = _a.rect, className = _a.className;\r\n                var renderPos = [targetPos[0], targetPos[1]];\r\n                if (rect[mainNames.end] < targetStart) {\r\n                    renderPos[index] += rect[mainNames.end] - targetStart;\r\n                }\r\n                else if (targetEnd < rect[mainNames.start]) {\r\n                    renderPos[index] += rect[mainNames.start] - targetStart - gap;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n                renderPos[otherIndex] += sideCenterPos - targetSideStart;\r\n                rendered.push(renderDigitLine(moveable, index ? \"vertical\" : \"horizontal\", \"gap\", rendered.length, gap, renderPos, className, React));\r\n            });\r\n        });\r\n    });\r\n    return rendered;\r\n}\n\nfunction getTotalGuidelines(moveable) {\r\n    var _a, _b;\r\n    var state = moveable.state;\r\n    var containerClientRect = state.containerClientRect, hasFixed = state.hasFixed;\r\n    var overflow = containerClientRect.overflow, containerHeight = containerClientRect.scrollHeight, containerWidth = containerClientRect.scrollWidth, containerClientHeight = containerClientRect.clientHeight, containerClientWidth = containerClientRect.clientWidth, clientLeft = containerClientRect.clientLeft, clientTop = containerClientRect.clientTop;\r\n    var _c = moveable.props, _d = _c.snapGap, snapGap = _d === void 0 ? true : _d, verticalGuidelines = _c.verticalGuidelines, horizontalGuidelines = _c.horizontalGuidelines, _e = _c.snapThreshold, snapThreshold = _e === void 0 ? 5 : _e, _f = _c.maxSnapElementGuidelineDistance, maxSnapElementGuidelineDistance = _f === void 0 ? Infinity : _f, isDisplayGridGuidelines = _c.isDisplayGridGuidelines;\r\n    var _g = getRect(getAbsolutePosesByState(moveable.state)), top = _g.top, left = _g.left, bottom = _g.bottom, right = _g.right;\r\n    var targetRect = { top: top, left: left, bottom: bottom, right: right, center: (left + right) / 2, middle: (top + bottom) / 2 };\r\n    var elementGuidelines = getElementGuidelines(moveable);\r\n    var totalGuidelines = __spreadArray([], __read(elementGuidelines), false);\r\n    var snapThresholdMultiples = ((_b = (_a = state.snapThresholdInfo) === null || _a === void 0 ? void 0 : _a.multiples) !== null && _b !== void 0 ? _b : [1, 1]).map(function (n) { return n * snapThreshold; });\r\n    if (snapGap) {\r\n        totalGuidelines.push.apply(totalGuidelines, __spreadArray([], __read(getGapGuidelines(moveable, targetRect, snapThresholdMultiples)), false));\r\n    }\r\n    var snapOffset = __assign({}, (state.snapOffset || {\r\n        left: 0,\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n    }));\r\n    totalGuidelines.push.apply(totalGuidelines, __spreadArray([], __read(getGridGuidelines(moveable, overflow ? containerWidth : containerClientWidth, overflow ? containerHeight : containerClientHeight, clientLeft, clientTop, snapOffset, isDisplayGridGuidelines)), false));\r\n    if (hasFixed) {\r\n        var left_1 = containerClientRect.left, top_1 = containerClientRect.top;\r\n        snapOffset.left += left_1;\r\n        snapOffset.top += top_1;\r\n        snapOffset.right += left_1;\r\n        snapOffset.bottom += top_1;\r\n    }\r\n    totalGuidelines.push.apply(totalGuidelines, __spreadArray([], __read(getDefaultGuidelines(horizontalGuidelines || false, verticalGuidelines || false, overflow ? containerWidth : containerClientWidth, overflow ? containerHeight : containerClientHeight, clientLeft, clientTop, snapOffset)), false));\r\n    totalGuidelines = totalGuidelines.filter(function (_a) {\r\n        var element = _a.element, elementRect = _a.elementRect, type = _a.type;\r\n        if (!element || !elementRect) {\r\n            return true;\r\n        }\r\n        var rect = elementRect.rect;\r\n        return checkBetweenRects(targetRect, rect, type, maxSnapElementGuidelineDistance);\r\n    });\r\n    return totalGuidelines;\r\n}\r\nfunction getGapGuidelines(moveable, targetRect, snapThresholds) {\r\n    var _a = moveable.props, _b = _a.maxSnapElementGuidelineDistance, maxSnapElementGuidelineDistance = _b === void 0 ? Infinity : _b, _c = _a.maxSnapElementGapDistance, maxSnapElementGapDistance = _c === void 0 ? Infinity : _c;\r\n    var elementRects = moveable.state.elementRects;\r\n    var gapGuidelines = [];\r\n    [\r\n        [\"vertical\", VERTICAL_NAMES_MAP, HORIZONTAL_NAMES_MAP],\r\n        [\"horizontal\", HORIZONTAL_NAMES_MAP, VERTICAL_NAMES_MAP],\r\n    ].forEach(function (_a) {\r\n        var _b = __read(_a, 3), type = _b[0], mainNames = _b[1], sideNames = _b[2];\r\n        var targetStart = targetRect[mainNames.start];\r\n        var targetEnd = targetRect[mainNames.end];\r\n        var targetCenter = targetRect[mainNames.center];\r\n        var targetStart2 = targetRect[sideNames.start];\r\n        var targetEnd2 = targetRect[sideNames.end];\r\n        // element : moveable\r\n        var snapThresholdMap = {\r\n            left: snapThresholds[0],\r\n            top: snapThresholds[1],\r\n        };\r\n        function getDist(elementRect) {\r\n            var rect = elementRect.rect;\r\n            var snapThreshold = snapThresholdMap[mainNames.start];\r\n            if (rect[mainNames.end] < targetStart + snapThreshold) {\r\n                return targetStart - rect[mainNames.end];\r\n            }\r\n            else if (targetEnd - snapThreshold < rect[mainNames.start]) {\r\n                return rect[mainNames.start] - targetEnd;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        var nextElementRects = elementRects.filter(function (elementRect) {\r\n            var rect = elementRect.rect;\r\n            if (rect[sideNames.start] > targetEnd2 || rect[sideNames.end] < targetStart2) {\r\n                return false;\r\n            }\r\n            return getDist(elementRect) > 0;\r\n        }).sort(function (a, b) {\r\n            return getDist(a) - getDist(b);\r\n        });\r\n        var groups = [];\r\n        nextElementRects.forEach(function (snapRect1) {\r\n            nextElementRects.forEach(function (snapRect2) {\r\n                if (snapRect1 === snapRect2) {\r\n                    return;\r\n                }\r\n                var rect1 = snapRect1.rect;\r\n                var rect2 = snapRect2.rect;\r\n                var rect1Start = rect1[sideNames.start];\r\n                var rect1End = rect1[sideNames.end];\r\n                var rect2Start = rect2[sideNames.start];\r\n                var rect2End = rect2[sideNames.end];\r\n                if (rect1Start > rect2End || rect2Start > rect1End) {\r\n                    return;\r\n                }\r\n                groups.push([snapRect1, snapRect2]);\r\n            });\r\n        });\r\n        groups.forEach(function (_a) {\r\n            var _b = __read(_a, 2), snapRect1 = _b[0], snapRect2 = _b[1];\r\n            var rect1 = snapRect1.rect;\r\n            var rect2 = snapRect2.rect;\r\n            var rect1Start = rect1[mainNames.start];\r\n            var rect1End = rect1[mainNames.end];\r\n            var rect2Start = rect2[mainNames.start];\r\n            var rect2End = rect2[mainNames.end];\r\n            var snapThreshold = snapThresholdMap[mainNames.start];\r\n            var gap = 0;\r\n            var pos = 0;\r\n            var isStart = false;\r\n            var isCenter = false;\r\n            var isEnd = false;\r\n            if (rect1End <= targetStart && targetEnd <= rect2Start) {\r\n                // (l)element1(r) : (l)target(r) : (l)element2(r)\r\n                isCenter = true;\r\n                gap = ((rect2Start - rect1End) - (targetEnd - targetStart)) / 2;\r\n                pos = rect1End + gap + (targetEnd - targetStart) / 2;\r\n                if (abs(pos - targetCenter) > snapThreshold) {\r\n                    return;\r\n                }\r\n            }\r\n            else if (rect1End < rect2Start && rect2End < targetStart + snapThreshold) {\r\n                // (l)element1(r) : (l)element2(r) : (l)target\r\n                isStart = true;\r\n                gap = rect2Start - rect1End;\r\n                pos = rect2End + gap;\r\n                if (abs(pos - targetStart) > snapThreshold) {\r\n                    return;\r\n                }\r\n            }\r\n            else if (rect1End < rect2Start && targetEnd - snapThreshold < rect1Start) {\r\n                // target(r) : (l)element1(r) : (l)element2(r)\r\n                isEnd = true;\r\n                gap = rect2Start - rect1End;\r\n                pos = rect1Start - gap;\r\n                if (abs(pos - targetEnd) > snapThreshold) {\r\n                    return;\r\n                }\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n            if (!gap) {\r\n                return;\r\n            }\r\n            if (!checkBetweenRects(targetRect, rect2, type, maxSnapElementGuidelineDistance)) {\r\n                return;\r\n            }\r\n            if (gap > maxSnapElementGapDistance) {\r\n                return;\r\n            }\r\n            gapGuidelines.push({\r\n                type: type,\r\n                pos: type === \"vertical\" ? [pos, 0] : [0, pos],\r\n                element: snapRect2.element,\r\n                size: 0,\r\n                className: snapRect2.className,\r\n                isStart: isStart,\r\n                isCenter: isCenter,\r\n                isEnd: isEnd,\r\n                gap: gap,\r\n                hide: true,\r\n                gapRects: [snapRect1, snapRect2],\r\n                direction: \"\",\r\n                elementDirection: \"\",\r\n            });\r\n        });\r\n    });\r\n    return gapGuidelines;\r\n}\r\nfunction startGridGroupGuidelines(moveable, clientLeft, clientTop, snapOffset) {\r\n    var _a, _b;\r\n    var props = moveable.props;\r\n    var state = moveable.state;\r\n    var snapGridAll = props.snapGridAll;\r\n    var _c = props.snapGridWidth, snapGridWidth = _c === void 0 ? 0 : _c, _d = props.snapGridHeight, snapGridHeight = _d === void 0 ? 0 : _d;\r\n    var snapRenderInfo = state.snapRenderInfo;\r\n    var hasDirection = snapRenderInfo && (((_a = snapRenderInfo.direction) === null || _a === void 0 ? void 0 : _a[0]) || ((_b = snapRenderInfo.direction) === null || _b === void 0 ? void 0 : _b[1]));\r\n    var moveables = moveable.moveables;\r\n    // snap group's all child to grid.\r\n    if (snapGridAll\r\n        && moveables\r\n        && hasDirection\r\n        && (snapGridWidth || snapGridHeight)) {\r\n        if (state.snapThresholdInfo) {\r\n            return;\r\n        }\r\n        state.snapThresholdInfo = {\r\n            multiples: [1, 1],\r\n            offset: [0, 0],\r\n        };\r\n        var rect_1 = moveable.getRect();\r\n        var children_1 = rect_1.children;\r\n        var direction = snapRenderInfo.direction;\r\n        if (children_1) {\r\n            var result = direction.map(function (dir, i) {\r\n                var _a = i === 0 ? {\r\n                    snapSize: snapGridWidth,\r\n                    posName: \"left\",\r\n                    sizeName: \"width\",\r\n                    clientOffset: snapOffset.left - clientLeft,\r\n                } : {\r\n                    snapSize: snapGridHeight,\r\n                    posName: \"top\",\r\n                    sizeName: \"height\",\r\n                    clientOffset: snapOffset.top - clientTop,\r\n                }, snapSize = _a.snapSize, posName = _a.posName, sizeName = _a.sizeName, clientOffset = _a.clientOffset;\r\n                if (!snapSize) {\r\n                    return {\r\n                        dir: dir,\r\n                        multiple: 1,\r\n                        snapSize: snapSize,\r\n                        snapOffset: 0,\r\n                    };\r\n                }\r\n                var rectSize = rect_1[sizeName];\r\n                var rectPos = rect_1[posName];\r\n                // 사이즈보다 만약 작다면 어떻게 해야되죠?\r\n                var childSizes = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.flat)(children_1.map(function (child) {\r\n                    return [\r\n                        (child[posName] - rectPos),\r\n                        (child[sizeName]),\r\n                        (rectSize - child[sizeName] - child[posName] + rectPos),\r\n                    ];\r\n                })).filter(function (v) { return v; }).sort(function (a, b) {\r\n                    return a - b;\r\n                });\r\n                var firstChildSize = childSizes[0];\r\n                var childSnapSizes = childSizes.map(function (size) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(size / firstChildSize, 0.1) * snapSize; });\r\n                var n = 1;\r\n                var rectRatio = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(rectSize / firstChildSize, 0.1);\r\n                for (n = 1; n <= 10; ++n) {\r\n                    if (childSnapSizes.every(function (childSize) {\r\n                        return childSize * n % 1 === 0;\r\n                    })) {\r\n                        break;\r\n                    }\r\n                }\r\n                // dir 1 (fixed -1)\r\n                // dir 0 (fixed 0)\r\n                // dir -1 (fixed 1)\r\n                var ratio = (-dir + 1) / 2;\r\n                var offsetPos = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.dot)(rectPos - clientOffset, rectPos - clientOffset + rectSize, ratio, 1 - ratio);\r\n                return {\r\n                    multiple: rectRatio * n,\r\n                    dir: dir,\r\n                    snapSize: snapSize,\r\n                    snapOffset: Math.round(offsetPos / snapSize),\r\n                };\r\n            });\r\n            var multiples = result.map(function (r) { return r.multiple || 1; });\r\n            state.snapThresholdInfo.multiples = multiples;\r\n            state.snapThresholdInfo.offset = result.map(function (r) { return r.snapOffset; });\r\n            result.forEach(function (r, i) {\r\n                if (r.snapSize) ;\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        state.snapThresholdInfo = null;\r\n    }\r\n}\r\nfunction getGridGuidelines(moveable, containerWidth, containerHeight, clientLeft, clientTop, snapOffset, isDisplayGridGuidelines) {\r\n    if (clientLeft === void 0) { clientLeft = 0; }\r\n    if (clientTop === void 0) { clientTop = 0; }\r\n    var props = moveable.props;\r\n    var state = moveable.state;\r\n    var _a = props.snapGridWidth, snapGridWidth = _a === void 0 ? 0 : _a, _b = props.snapGridHeight, snapGridHeight = _b === void 0 ? 0 : _b;\r\n    var guidelines = [];\r\n    var snapOffsetLeft = snapOffset.left, snapOffsetTop = snapOffset.top;\r\n    var startOffset = [0, 0];\r\n    startGridGroupGuidelines(moveable, clientLeft, clientTop, snapOffset);\r\n    var snapThresholdInfo = state.snapThresholdInfo;\r\n    var defaultSnapGridWidth = snapGridWidth;\r\n    var defaultSnapGridHeight = snapGridHeight;\r\n    if (snapThresholdInfo) {\r\n        snapGridWidth *= snapThresholdInfo.multiples[0] || 1;\r\n        snapGridHeight *= snapThresholdInfo.multiples[1] || 1;\r\n        startOffset = snapThresholdInfo.offset;\r\n    }\r\n    if (snapGridHeight) {\r\n        var pushGuideline = function (pos) {\r\n            guidelines.push({\r\n                type: \"horizontal\",\r\n                pos: [\r\n                    snapOffsetLeft,\r\n                    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(startOffset[1] * defaultSnapGridHeight + pos - clientTop + snapOffsetTop, 0.1),\r\n                ],\r\n                className: prefix(\"grid-guideline\"),\r\n                size: containerWidth,\r\n                hide: !isDisplayGridGuidelines,\r\n                direction: \"\",\r\n                grid: true,\r\n            });\r\n        };\r\n        for (var pos = 0; pos <= containerHeight * 2; pos += snapGridHeight) {\r\n            pushGuideline(pos);\r\n        }\r\n        for (var pos = -snapGridHeight; pos >= -containerHeight; pos -= snapGridHeight) {\r\n            pushGuideline(pos);\r\n        }\r\n    }\r\n    if (snapGridWidth) {\r\n        var pushGuideline = function (pos) {\r\n            guidelines.push({\r\n                type: \"vertical\",\r\n                pos: [\r\n                    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(startOffset[0] * defaultSnapGridWidth + pos - clientLeft + snapOffsetLeft, 0.1),\r\n                    snapOffsetTop,\r\n                ],\r\n                className: prefix(\"grid-guideline\"),\r\n                size: containerHeight,\r\n                hide: !isDisplayGridGuidelines,\r\n                direction: \"\",\r\n                grid: true,\r\n            });\r\n        };\r\n        for (var pos = 0; pos <= containerWidth * 2; pos += snapGridWidth) {\r\n            pushGuideline(pos);\r\n        }\r\n        for (var pos = -snapGridWidth; pos >= -containerWidth; pos -= snapGridWidth) {\r\n            pushGuideline(pos);\r\n        }\r\n    }\r\n    return guidelines;\r\n}\r\nfunction checkBetweenRects(rect1, rect2, type, distance) {\r\n    if (type === \"horizontal\") {\r\n        return abs(rect1.right - rect2.left) <= distance\r\n            || abs(rect1.left - rect2.right) <= distance\r\n            || rect1.left <= rect2.right && rect2.left <= rect1.right;\r\n    }\r\n    else if (type === \"vertical\") {\r\n        return abs(rect1.bottom - rect2.top) <= distance\r\n            || abs(rect1.top - rect2.bottom) <= distance\r\n            || rect1.top <= rect2.bottom && rect2.top <= rect1.bottom;\r\n    }\r\n    return true;\r\n}\r\nfunction getElementGuidelines(moveable) {\r\n    var state = moveable.state;\r\n    var _a = moveable.props.elementGuidelines, elementGuidelines = _a === void 0 ? [] : _a;\r\n    if (!elementGuidelines.length) {\r\n        state.elementRects = [];\r\n        return [];\r\n    }\r\n    var prevValues = (state.elementRects || []).filter(function (snapRect) { return !snapRect.refresh; });\r\n    var nextElementGuidelines = elementGuidelines.map(function (el) {\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isObject)(el) && \"element\" in el) {\r\n            return __assign(__assign({}, el), { element: getRefTarget(el.element, true) });\r\n        }\r\n        return {\r\n            element: getRefTarget(el, true),\r\n        };\r\n    }).filter(function (value) {\r\n        return value.element;\r\n    });\r\n    var _b = (0,_egjs_children_differ__WEBPACK_IMPORTED_MODULE_5__.diff)(prevValues.map(function (v) { return v.element; }), nextElementGuidelines.map(function (v) { return v.element; })), maintained = _b.maintained, added = _b.added;\r\n    var nextValues = [];\r\n    maintained.forEach(function (_a) {\r\n        var _b = __read(_a, 2), prevIndex = _b[0], nextIndex = _b[1];\r\n        nextValues[nextIndex] = prevValues[prevIndex];\r\n    });\r\n    getSnapElementRects(moveable, added.map(function (index) { return nextElementGuidelines[index]; })).map(function (rect, i) {\r\n        nextValues[added[i]] = rect;\r\n    });\r\n    state.elementRects = nextValues;\r\n    var elementSnapDirections = getSnapDirections(moveable.props.elementSnapDirections);\r\n    var nextGuidelines = [];\r\n    nextValues.forEach(function (snapRect) {\r\n        var element = snapRect.element, _a = snapRect.top, topValue = _a === void 0 ? elementSnapDirections.top : _a, _b = snapRect.left, leftValue = _b === void 0 ? elementSnapDirections.left : _b, _c = snapRect.right, rightValue = _c === void 0 ? elementSnapDirections.right : _c, _d = snapRect.bottom, bottomValue = _d === void 0 ? elementSnapDirections.bottom : _d, _e = snapRect.center, centerValue = _e === void 0 ? elementSnapDirections.center : _e, _f = snapRect.middle, middleValue = _f === void 0 ? elementSnapDirections.middle : _f, className = snapRect.className, rect = snapRect.rect;\r\n        var _g = splitSnapDirectionPoses({\r\n            top: topValue,\r\n            right: rightValue,\r\n            left: leftValue,\r\n            bottom: bottomValue,\r\n            center: centerValue,\r\n            middle: middleValue,\r\n        }, rect), horizontal = _g.horizontal, vertical = _g.vertical, horizontalNames = _g.horizontalNames, verticalNames = _g.verticalNames;\r\n        var rectTop = rect.top;\r\n        var rectLeft = rect.left;\r\n        var width = rect.right - rectLeft;\r\n        var height = rect.bottom - rectTop;\r\n        var sizes = [width, height];\r\n        vertical.forEach(function (pos, i) {\r\n            nextGuidelines.push({\r\n                type: \"vertical\",\r\n                element: element,\r\n                pos: [\r\n                    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(pos, 0.1),\r\n                    rectTop,\r\n                ], size: height,\r\n                sizes: sizes,\r\n                className: className,\r\n                elementRect: snapRect,\r\n                elementDirection: SNAP_SKIP_NAMES_MAP[verticalNames[i]] || verticalNames[i],\r\n                direction: \"\",\r\n            });\r\n        });\r\n        horizontal.forEach(function (pos, i) {\r\n            nextGuidelines.push({\r\n                type: \"horizontal\",\r\n                element: element,\r\n                pos: [\r\n                    rectLeft,\r\n                    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(pos, 0.1),\r\n                ],\r\n                size: width,\r\n                sizes: sizes,\r\n                className: className,\r\n                elementRect: snapRect,\r\n                elementDirection: SNAP_SKIP_NAMES_MAP[horizontalNames[i]] || horizontalNames[i],\r\n                direction: \"\",\r\n            });\r\n        });\r\n    });\r\n    return nextGuidelines;\r\n}\r\nfunction getObjectGuidelines(guidelines, containerSize) {\r\n    return guidelines ? guidelines.map(function (info) {\r\n        var posGuideline = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isObject)(info) ? info : { pos: info };\r\n        var pos = posGuideline.pos;\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isNumber)(pos)) {\r\n            return posGuideline;\r\n        }\r\n        else {\r\n            return __assign(__assign({}, posGuideline), { pos: (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(pos, containerSize) });\r\n        }\r\n    }) : [];\r\n}\r\nfunction getDefaultGuidelines(horizontalGuidelines, verticalGuidelines, width, height, clientLeft, clientTop, snapOffset) {\r\n    if (clientLeft === void 0) { clientLeft = 0; }\r\n    if (clientTop === void 0) { clientTop = 0; }\r\n    if (snapOffset === void 0) { snapOffset = { left: 0, top: 0, right: 0, bottom: 0 }; }\r\n    var guidelines = [];\r\n    var snapOffsetLeft = snapOffset.left, snapOffsetTop = snapOffset.top, snapOffsetBottom = snapOffset.bottom, snapOffsetRight = snapOffset.right;\r\n    var snapWidth = width + snapOffsetRight - snapOffsetLeft;\r\n    var snapHeight = height + snapOffsetBottom - snapOffsetTop;\r\n    getObjectGuidelines(horizontalGuidelines, snapHeight).forEach(function (posInfo) {\r\n        guidelines.push({\r\n            type: \"horizontal\",\r\n            pos: [\r\n                snapOffsetLeft,\r\n                (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(posInfo.pos - clientTop + snapOffsetTop, 0.1),\r\n            ],\r\n            size: snapWidth,\r\n            className: posInfo.className,\r\n            direction: \"\",\r\n        });\r\n    });\r\n    getObjectGuidelines(verticalGuidelines, snapWidth).forEach(function (posInfo) {\r\n        guidelines.push({\r\n            type: \"vertical\",\r\n            pos: [\r\n                (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(posInfo.pos - clientLeft + snapOffsetLeft, 0.1),\r\n                snapOffsetTop,\r\n            ],\r\n            size: snapHeight,\r\n            className: posInfo.className,\r\n            direction: \"\",\r\n        });\r\n    });\r\n    return guidelines;\r\n}\r\nfunction getSnapElementRects(moveable, values) {\r\n    if (!values.length) {\r\n        return [];\r\n    }\r\n    var groupable = moveable.props.groupable;\r\n    var state = moveable.state;\r\n    var containerClientRect = state.containerClientRect, \r\n    // targetClientRect: {\r\n    //     top: clientTop,\r\n    //     left: clientLeft,\r\n    // },\r\n    rootMatrix = state.rootMatrix, is3d = state.is3d, offsetDelta = state.offsetDelta;\r\n    var n = is3d ? 4 : 3;\r\n    var _a = __read(calculateContainerPos(rootMatrix, containerClientRect, n), 2), containerLeft = _a[0], containerTop = _a[1];\r\n    // const poses = getAbsolutePosesByState(state);\r\n    // const {\r\n    //     minX: targetLeft,\r\n    //     minY: targetTop,\r\n    // } = getMinMaxs(poses);\r\n    // const [distLeft, distTop] = minus([targetLeft, targetTop], calculateInversePosition(rootMatrix, [\r\n    //     clientLeft - containerLeft,\r\n    //     clientTop - containerTop,\r\n    // ], n)).map(pos => roundSign(pos));\r\n    var offsetLeft = groupable ? 0 : offsetDelta[0];\r\n    var offsetTop = groupable ? 0 : offsetDelta[1];\r\n    return values.map(function (value) {\r\n        var rect = value.element.getBoundingClientRect();\r\n        var left = rect.left - containerLeft - offsetLeft;\r\n        var top = rect.top - containerTop - offsetTop;\r\n        var bottom = top + rect.height;\r\n        var right = left + rect.width;\r\n        var _a = __read(calculateInversePosition(rootMatrix, [left, top], n), 2), elementLeft = _a[0], elementTop = _a[1];\r\n        var _b = __read(calculateInversePosition(rootMatrix, [right, bottom], n), 2), elementRight = _b[0], elementBottom = _b[1];\r\n        return __assign(__assign({}, value), { rect: {\r\n                left: elementLeft,\r\n                right: elementRight,\r\n                top: elementTop,\r\n                bottom: elementBottom,\r\n                center: (elementLeft + elementRight) / 2,\r\n                middle: (elementTop + elementBottom) / 2,\r\n            } });\r\n    });\r\n}\n\nfunction checkSnapInfo(moveable) {\r\n    var state = moveable.state;\r\n    var container = state.container;\r\n    var snapContainer = moveable.props.snapContainer || container;\r\n    if (state.snapContainer === snapContainer && state.guidelines && state.guidelines.length) {\r\n        return false;\r\n    }\r\n    var containerClientRect = state.containerClientRect;\r\n    var snapOffset = {\r\n        left: 0,\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n    };\r\n    if (container !== snapContainer) {\r\n        var snapContainerTarget = getRefTarget(snapContainer, true);\r\n        if (snapContainerTarget) {\r\n            var snapContainerRect = getClientRect(snapContainerTarget);\r\n            var offset1 = getDragDistByState(state, [\r\n                snapContainerRect.left - containerClientRect.left,\r\n                snapContainerRect.top - containerClientRect.top,\r\n            ]);\r\n            var offset2 = getDragDistByState(state, [\r\n                snapContainerRect.right - containerClientRect.right,\r\n                snapContainerRect.bottom - containerClientRect.bottom,\r\n            ]);\r\n            snapOffset.left = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(offset1[0], 0.00001);\r\n            snapOffset.top = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(offset1[1], 0.00001);\r\n            snapOffset.right = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(offset2[0], 0.00001);\r\n            snapOffset.bottom = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(offset2[1], 0.00001);\r\n        }\r\n    }\r\n    state.snapContainer = snapContainer;\r\n    state.snapOffset = snapOffset;\r\n    state.guidelines = getTotalGuidelines(moveable);\r\n    state.enableSnap = true;\r\n    return true;\r\n}\r\nfunction getNextFixedPoses(matrix, width, height, fixedDirection, fixedPos, is3d) {\r\n    var nextPoses = calculatePoses(matrix, width, height, is3d ? 4 : 3);\r\n    var nextFixedPos = getPosByDirection(nextPoses, fixedDirection);\r\n    return getAbsolutePoses(nextPoses, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(fixedPos, nextFixedPos));\r\n}\r\nfunction normalized(value) {\r\n    return value ? value / abs(value) : 0;\r\n}\r\nfunction getSizeOffsetInfo(moveable, poses, direction, keepRatio, isRequest, datas) {\r\n    var fixedDirection = datas.fixedDirection;\r\n    var directions = getCheckSnapDirections(direction, fixedDirection, keepRatio);\r\n    var innerBoundLineInfos = getCheckInnerBoundLineInfos(moveable, poses, direction, keepRatio);\r\n    var offsets = __spreadArray(__spreadArray([], __read(getSnapBoundInfo(moveable, poses, directions, keepRatio, isRequest, datas)), false), __read(getInnerBoundInfo(moveable, innerBoundLineInfos, datas)), false);\r\n    var widthOffsetInfo = getNearOffsetInfo(offsets, 0);\r\n    var heightOffsetInfo = getNearOffsetInfo(offsets, 1);\r\n    return {\r\n        width: {\r\n            isBound: widthOffsetInfo.isBound,\r\n            offset: widthOffsetInfo.offset[0],\r\n        },\r\n        height: {\r\n            isBound: heightOffsetInfo.isBound,\r\n            offset: heightOffsetInfo.offset[1],\r\n        },\r\n    };\r\n}\r\nfunction recheckSizeByTwoDirection(moveable, poses, width, height, maxWidth, maxHeight, direction, isRequest, datas) {\r\n    var snapPos = getPosByDirection(poses, direction);\r\n    var _a = checkMoveableSnapBounds(moveable, isRequest, {\r\n        vertical: [snapPos[0]],\r\n        horizontal: [snapPos[1]],\r\n    }), horizontalOffset = _a.horizontal.offset, verticalOffset = _a.vertical.offset;\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(verticalOffset, FLOAT_POINT_NUM) || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(horizontalOffset, FLOAT_POINT_NUM)) {\r\n        var _b = __read(getDragDist({\r\n            datas: datas,\r\n            distX: -verticalOffset,\r\n            distY: -horizontalOffset,\r\n        }), 2), nextWidthOffset = _b[0], nextHeightOffset = _b[1];\r\n        var nextWidth = Math.min(maxWidth || Infinity, width + direction[0] * nextWidthOffset);\r\n        var nextHeight = Math.min(maxHeight || Infinity, height + direction[1] * nextHeightOffset);\r\n        return [nextWidth - width, nextHeight - height];\r\n    }\r\n    return [0, 0];\r\n}\r\nfunction checkSizeDist(moveable, getNextPoses, width, height, direction, fixedPosition, isRequest, datas) {\r\n    var poses = getAbsolutePosesByState(moveable.state);\r\n    var keepRatio = moveable.props.keepRatio;\r\n    var widthOffset = 0;\r\n    var heightOffset = 0;\r\n    for (var i = 0; i < 2; ++i) {\r\n        var nextPoses = getNextPoses(widthOffset, heightOffset);\r\n        var _a = getSizeOffsetInfo(moveable, nextPoses, direction, keepRatio, isRequest, datas), widthOffsetInfo = _a.width, heightOffsetInfo = _a.height;\r\n        var isWidthBound = widthOffsetInfo.isBound;\r\n        var isHeightBound = heightOffsetInfo.isBound;\r\n        var nextWidthOffset = widthOffsetInfo.offset;\r\n        var nextHeightOffset = heightOffsetInfo.offset;\r\n        if (i === 1) {\r\n            if (!isWidthBound) {\r\n                nextWidthOffset = 0;\r\n            }\r\n            if (!isHeightBound) {\r\n                nextHeightOffset = 0;\r\n            }\r\n        }\r\n        if (i === 0 && isRequest && !isWidthBound && !isHeightBound) {\r\n            return [0, 0];\r\n        }\r\n        if (keepRatio) {\r\n            var widthDist = abs(nextWidthOffset) * (width ? 1 / width : 1);\r\n            var heightDist = abs(nextHeightOffset) * (height ? 1 / height : 1);\r\n            var isGetWidthOffset = isWidthBound && isHeightBound\r\n                ? widthDist < heightDist\r\n                : isHeightBound ||\r\n                    (!isWidthBound && widthDist < heightDist);\r\n            if (isGetWidthOffset) {\r\n                // width : height = ? : heightOffset\r\n                nextWidthOffset = (width * nextHeightOffset) / height;\r\n            }\r\n            else {\r\n                // width : height = widthOffset : ?\r\n                nextHeightOffset = (height * nextWidthOffset) / width;\r\n            }\r\n        }\r\n        widthOffset += nextWidthOffset;\r\n        heightOffset += nextHeightOffset;\r\n    }\r\n    if (!keepRatio && direction[0] && direction[1]) {\r\n        var _b = checkMaxBounds(moveable, poses, direction, fixedPosition, datas), maxWidth = _b.maxWidth, maxHeight = _b.maxHeight;\r\n        var _c = __read(recheckSizeByTwoDirection(moveable, getNextPoses(widthOffset, heightOffset).map(function (pos) { return pos.map(function (p) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(p, FLOAT_POINT_NUM); }); }), width + widthOffset, height + heightOffset, maxWidth, maxHeight, direction, isRequest, datas), 2), nextWidthOffset = _c[0], nextHeightOffset = _c[1];\r\n        widthOffset += nextWidthOffset;\r\n        heightOffset += nextHeightOffset;\r\n    }\r\n    return [widthOffset, heightOffset];\r\n}\r\nfunction absDegree(deg) {\r\n    if (deg < 0) {\r\n        deg = deg % 360 + 360;\r\n    }\r\n    deg %= 360;\r\n    return deg;\r\n}\r\nfunction bumpDegree(baseDeg, snapDeg) {\r\n    // baseDeg -80\r\n    // snapDeg 270\r\n    // return -90\r\n    snapDeg = absDegree(snapDeg);\r\n    var count = Math.floor(baseDeg / 360);\r\n    var deg1 = count * 360 + 360 - snapDeg;\r\n    var deg2 = count * 360 + snapDeg;\r\n    return abs(baseDeg - deg1) < abs(baseDeg - deg2) ? deg1 : deg2;\r\n}\r\nfunction getMinDegreeDistance(deg1, deg2) {\r\n    deg1 = absDegree(deg1);\r\n    deg2 = absDegree(deg2);\r\n    var deg3 = absDegree(deg1 - deg2);\r\n    return Math.min(deg3, 360 - deg3);\r\n}\r\nfunction checkSnapRotate(moveable, rect, dist, rotation) {\r\n    var _a;\r\n    var props = moveable.props;\r\n    var snapRotationThreshold = (_a = props[NAME_snapRotationThreshold]) !== null && _a !== void 0 ? _a : 5;\r\n    var snapRotationDegrees = props[NAME_snapRotationDegrees];\r\n    if (hasGuidelines(moveable, \"rotatable\")) {\r\n        var pos1 = rect.pos1, pos2 = rect.pos2, pos3 = rect.pos3, pos4 = rect.pos4, origin2_1 = rect.origin;\r\n        var rad_1 = (dist * Math.PI) / 180;\r\n        var prevPoses = [pos1, pos2, pos3, pos4].map(function (pos) { return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(pos, origin2_1); });\r\n        var nextPoses = prevPoses.map(function (pos) { return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.rotate)(pos, rad_1); });\r\n        // console.log(moveable.state.left, moveable.state.top, moveable.state.origin);\r\n        // console.log(pos1, pos2, pos3, pos4, origin, rad, prevPoses, nextPoses);\r\n        var result = __spreadArray(__spreadArray([], __read(checkRotateBounds(moveable, prevPoses, nextPoses, origin2_1, dist)), false), __read(checkRotateInnerBounds(moveable, prevPoses, nextPoses, origin2_1, dist)), false);\r\n        result.sort(function (a, b) { return abs(a - dist) - abs(b - dist); });\r\n        var isSnap = result.length > 0;\r\n        if (isSnap) {\r\n            return {\r\n                isSnap: isSnap,\r\n                dist: isSnap ? result[0] : dist,\r\n            };\r\n        }\r\n    }\r\n    if ((snapRotationDegrees === null || snapRotationDegrees === void 0 ? void 0 : snapRotationDegrees.length) && snapRotationThreshold) {\r\n        var sorted = snapRotationDegrees.slice().sort(function (a, b) {\r\n            return getMinDegreeDistance(a, rotation) - getMinDegreeDistance(b, rotation);\r\n        });\r\n        var firstDegree = sorted[0];\r\n        if (getMinDegreeDistance(firstDegree, rotation) <= snapRotationThreshold) {\r\n            return {\r\n                isSnap: true,\r\n                dist: dist + bumpDegree(rotation, firstDegree) - rotation,\r\n            };\r\n        }\r\n    }\r\n    return {\r\n        isSnap: false,\r\n        dist: dist,\r\n    };\r\n}\r\nfunction checkSnapResize(moveable, width, height, direction, fixedPosition, isRequest, datas) {\r\n    if (!hasGuidelines(moveable, \"resizable\")) {\r\n        return [0, 0];\r\n    }\r\n    var fixedDirection = datas.fixedDirection, nextAllMatrix = datas.nextAllMatrix;\r\n    var _a = moveable.state, allMatrix = _a.allMatrix, is3d = _a.is3d;\r\n    return checkSizeDist(moveable, function (widthOffset, heightOffset) {\r\n        return getNextFixedPoses(nextAllMatrix || allMatrix, width + widthOffset, height + heightOffset, fixedDirection, fixedPosition, is3d);\r\n    }, width, height, direction, fixedPosition, isRequest, datas);\r\n}\r\nfunction checkSnapScale(moveable, scale, direction, isRequest, datas) {\r\n    if (!hasGuidelines(moveable, \"scalable\")) {\r\n        return [0, 0];\r\n    }\r\n    var startOffsetWidth = datas.startOffsetWidth, startOffsetHeight = datas.startOffsetHeight, fixedPosition = datas.fixedPosition, fixedDirection = datas.fixedDirection, is3d = datas.is3d;\r\n    var sizeDist = checkSizeDist(moveable, function (widthOffset, heightOffset) {\r\n        return getNextFixedPoses(scaleMatrix(datas, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(scale, [widthOffset / startOffsetWidth, heightOffset / startOffsetHeight])), startOffsetWidth, startOffsetHeight, fixedDirection, fixedPosition, is3d);\r\n    }, startOffsetWidth, startOffsetHeight, direction, fixedPosition, isRequest, datas);\r\n    return [sizeDist[0] / startOffsetWidth, sizeDist[1] / startOffsetHeight];\r\n}\r\nfunction startCheckSnapDrag(moveable, datas) {\r\n    datas.absolutePoses = getAbsolutePosesByState(moveable.state);\r\n}\r\nfunction getSnapGuidelines(posInfos) {\r\n    var guidelines = [];\r\n    posInfos.forEach(function (posInfo) {\r\n        posInfo.guidelineInfos.forEach(function (_a) {\r\n            var guideline = _a.guideline;\r\n            if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.find)(guidelines, function (info) { return info.guideline === guideline; })) {\r\n                return;\r\n            }\r\n            guideline.direction = \"\";\r\n            guidelines.push({ guideline: guideline, posInfo: posInfo });\r\n        });\r\n    });\r\n    return guidelines.map(function (_a) {\r\n        var guideline = _a.guideline, posInfo = _a.posInfo;\r\n        return __assign(__assign({}, guideline), { direction: posInfo.direction });\r\n    });\r\n}\r\nfunction addBoundGuidelines(moveable, verticalPoses, horizontalPoses, verticalSnapPoses, horizontalSnapPoses, externalBounds) {\r\n    var _a = checkBoundPoses(getBounds(moveable, externalBounds), verticalPoses, horizontalPoses), verticalBoundInfos = _a.vertical, horizontalBoundInfos = _a.horizontal;\r\n    var boundMap = getInitialBounds();\r\n    verticalBoundInfos.forEach(function (info) {\r\n        if (info.isBound) {\r\n            if (info.direction === \"start\") {\r\n                boundMap.left = true;\r\n            }\r\n            if (info.direction === \"end\") {\r\n                boundMap.right = true;\r\n            }\r\n            verticalSnapPoses.push({\r\n                type: \"bounds\",\r\n                pos: info.pos,\r\n            });\r\n        }\r\n    });\r\n    horizontalBoundInfos.forEach(function (info) {\r\n        if (info.isBound) {\r\n            if (info.direction === \"start\") {\r\n                boundMap.top = true;\r\n            }\r\n            if (info.direction === \"end\") {\r\n                boundMap.bottom = true;\r\n            }\r\n            horizontalSnapPoses.push({\r\n                type: \"bounds\",\r\n                pos: info.pos,\r\n            });\r\n        }\r\n    });\r\n    var _b = checkInnerBoundPoses(moveable), innerBoundMap = _b.boundMap, verticalInnerBoundPoses = _b.vertical, horizontalInnerBoundPoses = _b.horizontal;\r\n    verticalInnerBoundPoses.forEach(function (innerPos) {\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.findIndex)(verticalSnapPoses, function (_a) {\r\n            var type = _a.type, pos = _a.pos;\r\n            return type === \"bounds\" && pos === innerPos;\r\n        }) >= 0) {\r\n            return;\r\n        }\r\n        verticalSnapPoses.push({\r\n            type: \"bounds\",\r\n            pos: innerPos,\r\n        });\r\n    });\r\n    horizontalInnerBoundPoses.forEach(function (innerPos) {\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.findIndex)(horizontalSnapPoses, function (_a) {\r\n            var type = _a.type, pos = _a.pos;\r\n            return type === \"bounds\" && pos === innerPos;\r\n        }) >= 0) {\r\n            return;\r\n        }\r\n        horizontalSnapPoses.push({\r\n            type: \"bounds\",\r\n            pos: innerPos,\r\n        });\r\n    });\r\n    return {\r\n        boundMap: boundMap,\r\n        innerBoundMap: innerBoundMap,\r\n    };\r\n}\r\nvar directionCondition$1 = getDirectionCondition(\"\", [\"resizable\", \"scalable\"]);\r\n/**\r\n * @namespace Moveable.Snappable\r\n * @description Whether or not target can be snapped to the guideline. (default: false)\r\n * @sort 2\r\n */\r\nvar Snappable = {\r\n    name: \"snappable\",\r\n    dragRelation: \"strong\",\r\n    props: [\r\n        \"snappable\",\r\n        \"snapContainer\",\r\n        \"snapDirections\",\r\n        \"elementSnapDirections\",\r\n        \"snapGap\",\r\n        \"snapGridWidth\",\r\n        \"snapGridHeight\",\r\n        \"isDisplaySnapDigit\",\r\n        \"isDisplayInnerSnapDigit\",\r\n        \"isDisplayGridGuidelines\",\r\n        \"snapDigit\",\r\n        \"snapThreshold\",\r\n        \"snapRenderThreshold\",\r\n        \"snapGridAll\",\r\n        NAME_snapRotationThreshold,\r\n        NAME_snapRotationDegrees,\r\n        NAME_snapHorizontalThreshold,\r\n        NAME_snapVerticalThreshold,\r\n        \"horizontalGuidelines\",\r\n        \"verticalGuidelines\",\r\n        \"elementGuidelines\",\r\n        \"bounds\",\r\n        \"innerBounds\",\r\n        \"snapDistFormat\",\r\n        \"maxSnapElementGuidelineDistance\",\r\n        \"maxSnapElementGapDistance\",\r\n    ],\r\n    events: [\"snap\", \"bound\"],\r\n    css: [\r\n        \":host {\\n--bounds-color: #d66;\\n}\\n.guideline {\\npointer-events: none;\\nz-index: 2;\\n}\\n.guideline.bounds {\\nbackground: #d66;\\nbackground: var(--bounds-color);\\n}\\n.guideline-group {\\nposition: absolute;\\ntop: 0;\\nleft: 0;\\n}\\n.guideline-group .size-value {\\nposition: absolute;\\ncolor: #f55;\\nfont-size: 12px;\\nfont-size: calc(12px * var(--zoom));\\nfont-weight: bold;\\n}\\n.guideline-group.horizontal .size-value {\\ntransform-origin: 50% 100%;\\ntransform: translateX(-50%);\\nleft: 50%;\\nbottom: 5px;\\nbottom: calc(2px + 3px * var(--zoom));\\n}\\n.guideline-group.vertical .size-value {\\ntransform-origin: 0% 50%;\\ntop: 50%;\\ntransform: translateY(-50%);\\nleft: 5px;\\nleft: calc(2px + 3px * var(--zoom));\\n}\\n.guideline.gap {\\nbackground: #f55;\\n}\\n.size-value.gap {\\ncolor: #f55;\\n}\\n\",\r\n    ],\r\n    render: function (moveable, React) {\r\n        var state = moveable.state;\r\n        var targetTop = state.top, targetLeft = state.left, pos1 = state.pos1, pos2 = state.pos2, pos3 = state.pos3, pos4 = state.pos4, snapRenderInfo = state.snapRenderInfo;\r\n        var _a = moveable.props.snapRenderThreshold, snapRenderThreshold = _a === void 0 ? 1 : _a;\r\n        if (!snapRenderInfo || !snapRenderInfo.render || !hasGuidelines(moveable, \"\")) {\r\n            // reset store\r\n            watchValue(moveable, \"boundMap\", getInitialBounds(), function (v) { return JSON.stringify(v); });\r\n            watchValue(moveable, \"innerBoundMap\", getInitialBounds(), function (v) { return JSON.stringify(v); });\r\n            return [];\r\n        }\r\n        state.guidelines = getTotalGuidelines(moveable);\r\n        var minLeft = Math.min(pos1[0], pos2[0], pos3[0], pos4[0]);\r\n        var minTop = Math.min(pos1[1], pos2[1], pos3[1], pos4[1]);\r\n        var externalPoses = snapRenderInfo.externalPoses || [];\r\n        var poses = getAbsolutePosesByState(moveable.state);\r\n        var verticalSnapPoses = [];\r\n        var horizontalSnapPoses = [];\r\n        var verticalGuidelines = [];\r\n        var horizontalGuidelines = [];\r\n        var snapInfos = [];\r\n        var _b = getRect(poses), width = _b.width, height = _b.height, top = _b.top, left = _b.left, bottom = _b.bottom, right = _b.right;\r\n        var targetRect = { left: left, right: right, top: top, bottom: bottom, center: (left + right) / 2, middle: (top + bottom) / 2 };\r\n        var hasExternalPoses = externalPoses.length > 0;\r\n        var externalRect = hasExternalPoses\r\n            ? getRect(externalPoses)\r\n            : {};\r\n        if (!snapRenderInfo.request) {\r\n            if (snapRenderInfo.direction) {\r\n                snapInfos.push(getSnapInfosByDirection(moveable, poses, snapRenderInfo.direction, snapRenderThreshold, snapRenderThreshold));\r\n            }\r\n            if (snapRenderInfo.snap) {\r\n                var rect = getRect(poses);\r\n                if (snapRenderInfo.center) {\r\n                    rect.middle = (rect.top + rect.bottom) / 2;\r\n                    rect.center = (rect.left + rect.right) / 2;\r\n                }\r\n                snapInfos.push(checkSnaps(moveable, rect, snapRenderThreshold, snapRenderThreshold));\r\n            }\r\n            if (hasExternalPoses) {\r\n                if (snapRenderInfo.center) {\r\n                    externalRect.middle =\r\n                        (externalRect.top + externalRect.bottom) / 2;\r\n                    externalRect.center =\r\n                        (externalRect.left + externalRect.right) / 2;\r\n                }\r\n                snapInfos.push(checkSnaps(moveable, externalRect, snapRenderThreshold, snapRenderThreshold));\r\n            }\r\n            snapInfos.forEach(function (snapInfo) {\r\n                var verticalPosInfos = snapInfo.vertical.posInfos, horizontalPosInfos = snapInfo.horizontal.posInfos;\r\n                verticalSnapPoses.push.apply(verticalSnapPoses, __spreadArray([], __read(verticalPosInfos.filter(function (_a) {\r\n                    var guidelineInfos = _a.guidelineInfos;\r\n                    return guidelineInfos.some(function (_a) {\r\n                        var guideline = _a.guideline;\r\n                        return !guideline.hide;\r\n                    });\r\n                }).map(function (posInfo) { return ({\r\n                    type: \"snap\",\r\n                    pos: posInfo.pos,\r\n                }); })), false));\r\n                horizontalSnapPoses.push.apply(horizontalSnapPoses, __spreadArray([], __read(horizontalPosInfos.filter(function (_a) {\r\n                    var guidelineInfos = _a.guidelineInfos;\r\n                    return guidelineInfos.some(function (_a) {\r\n                        var guideline = _a.guideline;\r\n                        return !guideline.hide;\r\n                    });\r\n                }).map(function (posInfo) { return ({\r\n                    type: \"snap\",\r\n                    pos: posInfo.pos,\r\n                }); })), false));\r\n                verticalGuidelines.push.apply(verticalGuidelines, __spreadArray([], __read(getSnapGuidelines(verticalPosInfos)), false));\r\n                horizontalGuidelines.push.apply(horizontalGuidelines, __spreadArray([], __read(getSnapGuidelines(horizontalPosInfos)), false));\r\n            });\r\n        }\r\n        var _c = addBoundGuidelines(moveable, [left, right], [top, bottom], verticalSnapPoses, horizontalSnapPoses), boundMap = _c.boundMap, innerBoundMap = _c.innerBoundMap;\r\n        if (hasExternalPoses) {\r\n            addBoundGuidelines(moveable, [externalRect.left, externalRect.right], [externalRect.top, externalRect.bottom], verticalSnapPoses, horizontalSnapPoses, snapRenderInfo.externalBounds);\r\n        }\r\n        var allGuidelines = __spreadArray(__spreadArray([], __read(verticalGuidelines), false), __read(horizontalGuidelines), false);\r\n        var elementGuidelines = allGuidelines.filter(function (guideline) { return guideline.element && !guideline.gapRects; });\r\n        var gapGuidelines = allGuidelines.filter(function (guideline) { return guideline.gapRects; }).sort(function (a, b) {\r\n            return a.gap - b.gap;\r\n        });\r\n        triggerEvent(moveable, \"onSnap\", {\r\n            guidelines: allGuidelines.filter(function (_a) {\r\n                var element = _a.element;\r\n                return !element;\r\n            }),\r\n            elements: elementGuidelines,\r\n            gaps: gapGuidelines,\r\n        }, true);\r\n        var nextBoundMap = watchValue(moveable, \"boundMap\", boundMap, function (v) { return JSON.stringify(v); }, getInitialBounds());\r\n        var nextInnerBoundMap = watchValue(moveable, \"innerBoundMap\", innerBoundMap, function (v) { return JSON.stringify(v); }, getInitialBounds());\r\n        if (boundMap === nextBoundMap || innerBoundMap === nextInnerBoundMap) {\r\n            triggerEvent(moveable, \"onBound\", {\r\n                bounds: boundMap,\r\n                innerBounds: innerBoundMap,\r\n            }, true);\r\n        }\r\n        // verticalSnapPoses.\r\n        return __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(renderDashedGuidelines(moveable, elementGuidelines, [minLeft, minTop], targetRect, React)), false), __read(renderGapGuidelines(moveable, gapGuidelines, [minLeft, minTop], targetRect, React)), false), __read(renderGuidelines(moveable, \"horizontal\", horizontalGuidelines, [targetLeft, targetTop], targetRect, React)), false), __read(renderGuidelines(moveable, \"vertical\", verticalGuidelines, [targetLeft, targetTop], targetRect, React)), false), __read(renderSnapPoses(moveable, \"horizontal\", horizontalSnapPoses, minLeft, targetTop, width, 0, React)), false), __read(renderSnapPoses(moveable, \"vertical\", verticalSnapPoses, minTop, targetLeft, height, 1, React)), false);\r\n    },\r\n    dragStart: function (moveable, e) {\r\n        moveable.state.snapRenderInfo = {\r\n            request: e.isRequest,\r\n            snap: true,\r\n            center: true,\r\n        };\r\n        checkSnapInfo(moveable);\r\n    },\r\n    drag: function (moveable) {\r\n        var state = moveable.state;\r\n        if (!checkSnapInfo(moveable)) {\r\n            state.guidelines = getTotalGuidelines(moveable);\r\n        }\r\n        if (state.snapRenderInfo) {\r\n            state.snapRenderInfo.render = true;\r\n        }\r\n    },\r\n    pinchStart: function (moveable) {\r\n        this.unset(moveable);\r\n    },\r\n    dragEnd: function (moveable) {\r\n        this.unset(moveable);\r\n    },\r\n    dragControlCondition: function (moveable, e) {\r\n        if (directionCondition$1(moveable, e) || dragControlCondition(moveable, e)) {\r\n            return true;\r\n        }\r\n        if (!e.isRequest && e.inputEvent) {\r\n            return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(e.inputEvent.target, prefix(\"snap-control\"));\r\n        }\r\n    },\r\n    dragControlStart: function (moveable) {\r\n        moveable.state.snapRenderInfo = null;\r\n        checkSnapInfo(moveable);\r\n    },\r\n    dragControl: function (moveable) {\r\n        this.drag(moveable);\r\n    },\r\n    dragControlEnd: function (moveable) {\r\n        this.unset(moveable);\r\n    },\r\n    dragGroupStart: function (moveable, e) {\r\n        this.dragStart(moveable, e);\r\n    },\r\n    dragGroup: function (moveable) {\r\n        this.drag(moveable);\r\n    },\r\n    dragGroupEnd: function (moveable) {\r\n        this.unset(moveable);\r\n    },\r\n    dragGroupControlStart: function (moveable) {\r\n        moveable.state.snapRenderInfo = null;\r\n        checkSnapInfo(moveable);\r\n    },\r\n    dragGroupControl: function (moveable) {\r\n        this.drag(moveable);\r\n    },\r\n    dragGroupControlEnd: function (moveable) {\r\n        this.unset(moveable);\r\n    },\r\n    unset: function (moveable) {\r\n        var state = moveable.state;\r\n        state.enableSnap = false;\r\n        state.guidelines = [];\r\n        state.snapRenderInfo = null;\r\n        state.elementRects = [];\r\n    },\r\n};\r\n/**\r\n * Whether or not target can be snapped to the guideline. (default: false)\r\n * @name Moveable.Snappable#snappable\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.snappable = true;\r\n */\r\n/**\r\n *  A snap container that is the basis for snap, bounds, and innerBounds. (default: null = container)\r\n * @name Moveable.Snappable#snapContainer\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.querySelector(\".container\"));\r\n *\r\n * moveable.snapContainer = document.body;\r\n */\r\n/**\r\n * You can specify the directions to snap to the target. (default: { left: true, top: true, right: true, bottom: true })\r\n * @name Moveable.Snappable#snapDirections\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *   snappable: true,\r\n *   snapDirections: true,\r\n * });\r\n * // snap center\r\n * moveable.snapDirections = { left: true, top: true, right: true, bottom: true, center: true, middle: true };\r\n */\r\n/**\r\n * You can specify the snap directions of elements. (default: { left: true, ftrue, right: true, bottom: true })\r\n * @name Moveable.Snappable#elementSnapDirections\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *   snappable: true,\r\n *   elementSnapDirections: true,\r\n * });\r\n * // snap center\r\n * moveable.elementSnapDirections = { left: true, top: true, right: true, bottom: true, center: true, middle: true };\r\n */\r\n/**\r\n * When you drag, make the gap snap in the element guidelines. (default: true)\r\n * @name Moveable.Snappable#snapGap\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *   snappable: true,\r\n *   snapElement: true,\r\n *   snapGap: true,\r\n * });\r\n *\r\n * moveable.snapGap = false;\r\n */\r\n/**\r\n * Distance value that can snap to guidelines. (default: 5)\r\n * @name Moveable.Snappable#snapThreshold\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.snapThreshold = 5;\r\n */\r\n/**\r\n * Add guidelines in the horizontal direction. (default: [])\r\n * @name Moveable.Snappable#horizontalGuidelines\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.horizontalGuidelines = [100, 200, 500];\r\n */\r\n/**\r\n * Add guidelines in the vertical direction. (default: [])\r\n * @name Moveable.Snappable#verticalGuidelines\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.verticalGuidelines = [100, 200, 500];\r\n */\r\n/**\r\n * Add guidelines for the element. (default: [])\r\n * @name Moveable.Snappable#elementGuidelines\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.elementGuidelines = [\r\n *   document.querySelector(\".element\"),\r\n * ];\r\n */\r\n/**\r\n * You can set up boundaries.\r\n * @name Moveable.Snappable#bounds\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @default null\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.bounds = { left: 0, right: 1000, top: 0, bottom: 1000};\r\n */\r\n/**\r\n * You can set up inner boundaries.\r\n * @name Moveable.Snappable#innerBounds\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @default null\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.innerBounds = { left: 500, top: 500, width: 100, height: 100};\r\n */\r\n/**\r\n * snap distance digits (default: 0)\r\n * @name Moveable.Snappable#snapDigit\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.snapDigit = 0\r\n */\r\n/**\r\n * If width size is greater than 0, you can vertical snap to the grid. (default: 0)\r\n * @name Moveable.Snappable#snapGridWidth\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.snapGridWidth = 5;\r\n */\r\n/**\r\n * If height size is greater than 0, you can horizontal snap to the grid. (default: 0)\r\n * @name Moveable.Snappable#snapGridHeight\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.snapGridHeight = 5;\r\n */\r\n/**\r\n * Whether to show snap distance (default: true)\r\n * @name Moveable.Snappable#isDisplaySnapDigit\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.isDisplaySnapDigit = true;\r\n */\r\n/**\r\n * Whether to show element inner snap distance (default: false)\r\n * @name Moveable.Snappable#isDisplayInnerSnapDigit\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.isDisplayInnerSnapDigit = true;\r\n */\r\n/**\r\n * You can set the text format of the distance shown in the guidelines. (default: self)\r\n * @name Moveable.Snappable#snapDistFormat\r\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *  snappable: true,\r\n *  snapDistFormat: (v, type) => v,\r\n * });\r\n * moveable.snapDistFormat = (v, type) => `${v}px`;\r\n */\r\n/**\r\n * When you drag or dragControl, the `snap` event is called.\r\n * @memberof Moveable.Snappable\r\n * @event snap\r\n * @param {Moveable.Snappable.OnSnap} - Parameters for the `snap` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     snappable: true\r\n * });\r\n * moveable.on(\"snap\", e => {\r\n *     console.log(\"onSnap\", e);\r\n * });\r\n */\n\nfunction multiply2(pos1, pos2) {\r\n    return [\r\n        pos1[0] * pos2[0],\r\n        pos1[1] * pos2[1],\r\n    ];\r\n}\r\nfunction prefix() {\r\n    var classNames = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        classNames[_i] = arguments[_i];\r\n    }\r\n    return framework_utils__WEBPACK_IMPORTED_MODULE_6__.prefixNames.apply(void 0, __spreadArray([PREFIX], __read(classNames), false));\r\n}\r\nfunction defaultSync(fn) {\r\n    fn();\r\n}\r\nfunction getTransformMatrix(transform) {\r\n    if (!transform || transform === \"none\") {\r\n        return [1, 0, 0, 1, 0, 0];\r\n    }\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isObject)(transform)) {\r\n        return transform;\r\n    }\r\n    return (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.parseMat)(transform);\r\n}\r\nfunction getAbsoluteMatrix(matrix, n, origin) {\r\n    return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiplies)(n, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createOriginMatrix)(origin, n), matrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createOriginMatrix)(origin.map(function (a) { return -a; }), n));\r\n}\r\nfunction measureSVGSize(el, unit, isHorizontal) {\r\n    if (unit === \"%\") {\r\n        var viewBox = getSVGViewBox(el.ownerSVGElement);\r\n        return viewBox[isHorizontal ? \"width\" : \"height\"] / 100;\r\n    }\r\n    return 1;\r\n}\r\nfunction getBeforeTransformOrigin(el) {\r\n    var relativeOrigin = getTransformOrigin(getComputedStyle(el, \":before\"));\r\n    return relativeOrigin.map(function (o, i) {\r\n        var _a = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitUnit)(o), value = _a.value, unit = _a.unit;\r\n        return value * measureSVGSize(el, unit, i === 0);\r\n    });\r\n}\r\nfunction getTransformOriginArray(transformOrigin) {\r\n    return transformOrigin ? transformOrigin.split(\" \") : [\"0\", \"0\"];\r\n}\r\nfunction getTransformOrigin(style) {\r\n    return getTransformOriginArray(style.transformOrigin);\r\n}\r\nfunction getElementTransform(target) {\r\n    var getStyle = getCachedStyle(target);\r\n    var computedTransform = getStyle(\"transform\");\r\n    if (computedTransform && computedTransform !== \"none\") {\r\n        return computedTransform;\r\n    }\r\n    if (\"transform\" in target) {\r\n        var list = target.transform;\r\n        var baseVal = list.baseVal;\r\n        if (!baseVal) {\r\n            return \"\";\r\n        }\r\n        var length_1 = baseVal.length;\r\n        if (!length_1) {\r\n            return \"\";\r\n        }\r\n        var matrixes = [];\r\n        var _loop_1 = function (i) {\r\n            var matrix = baseVal[i].matrix;\r\n            matrixes.push(\"matrix(\".concat([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"].map(function (chr) { return matrix[chr]; }).join(\", \"), \")\"));\r\n        };\r\n        for (var i = 0; i < length_1; ++i) {\r\n            _loop_1(i);\r\n        }\r\n        return matrixes.join(\" \");\r\n    }\r\n    return \"\";\r\n}\r\nfunction getOffsetInfo(el, lastParent, isParent, checkZoom, getTargetStyle) {\r\n    var _a, _b;\r\n    var documentElement = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentElement)(el) || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentBody)(el);\r\n    var hasSlot = false;\r\n    var target;\r\n    var parentSlotElement;\r\n    if (!el || isParent) {\r\n        target = el;\r\n    }\r\n    else {\r\n        var assignedSlotParentElement = (_a = el === null || el === void 0 ? void 0 : el.assignedSlot) === null || _a === void 0 ? void 0 : _a.parentElement;\r\n        var parentElement = el.parentElement;\r\n        if (assignedSlotParentElement) {\r\n            hasSlot = true;\r\n            parentSlotElement = parentElement;\r\n            target = assignedSlotParentElement;\r\n        }\r\n        else {\r\n            target = parentElement;\r\n        }\r\n    }\r\n    var isCustomElement = false;\r\n    var isEnd = el === lastParent || target === lastParent;\r\n    var position = \"relative\";\r\n    var offsetZoom = 1;\r\n    var targetZoom = parseFloat(getTargetStyle === null || getTargetStyle === void 0 ? void 0 : getTargetStyle(\"zoom\")) || 1;\r\n    var targetPosition = getTargetStyle === null || getTargetStyle === void 0 ? void 0 : getTargetStyle(\"position\");\r\n    while (target && target !== documentElement) {\r\n        if (lastParent === target) {\r\n            isEnd = true;\r\n        }\r\n        var getStyle = getCachedStyle(target);\r\n        var tagName = target.tagName.toLowerCase();\r\n        var transform = getElementTransform(target);\r\n        var willChange = getStyle(\"willChange\");\r\n        var zoom = parseFloat(getStyle(\"zoom\")) || 1;\r\n        position = getStyle(\"position\");\r\n        if (checkZoom && zoom !== 1) {\r\n            offsetZoom = zoom;\r\n            break;\r\n        }\r\n        if (\r\n        // offsetParent is the parentElement if the target's zoom is not 1 and not absolute.\r\n        !isParent && checkZoom && targetZoom !== 1 && targetPosition && targetPosition !== \"absolute\"\r\n            || tagName === \"svg\"\r\n            || tagName === \"foreignobject\"\r\n            || position !== \"static\"\r\n            || (transform && transform !== \"none\")\r\n            || willChange === \"transform\") {\r\n            break;\r\n        }\r\n        var slotParentNode = (_b = el === null || el === void 0 ? void 0 : el.assignedSlot) === null || _b === void 0 ? void 0 : _b.parentNode;\r\n        var targetParentNode = target.parentNode;\r\n        if (slotParentNode) {\r\n            hasSlot = true;\r\n            parentSlotElement = targetParentNode;\r\n        }\r\n        var parentNode = targetParentNode;\r\n        if (parentNode && parentNode.nodeType === 11) {\r\n            // Shadow Root\r\n            target = parentNode.host;\r\n            isCustomElement = true;\r\n            position = getCachedStyle(target)(\"position\");\r\n            break;\r\n        }\r\n        target = parentNode;\r\n        position = \"relative\";\r\n    }\r\n    return {\r\n        offsetZoom: offsetZoom,\r\n        hasSlot: hasSlot,\r\n        parentSlotElement: parentSlotElement,\r\n        isCustomElement: isCustomElement,\r\n        isStatic: position === \"static\",\r\n        isEnd: isEnd || !target || target === documentElement,\r\n        offsetParent: target || documentElement,\r\n    };\r\n}\r\nfunction getOffsetPosInfo(el, target) {\r\n    var _a;\r\n    var tagName = el.tagName.toLowerCase();\r\n    var offsetLeft = el.offsetLeft;\r\n    var offsetTop = el.offsetTop;\r\n    var getStyle = getCachedStyle(el);\r\n    // svg\r\n    var isSVG = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(offsetLeft);\r\n    var hasOffset = !isSVG;\r\n    var origin;\r\n    var targetOrigin;\r\n    // inner svg element\r\n    if (!hasOffset && (tagName !== \"svg\" || el.ownerSVGElement)) {\r\n        origin = IS_WEBKIT605\r\n            ? getBeforeTransformOrigin(el)\r\n            : getTransformOriginArray(getStyle(\"transformOrigin\")).map(function (pos) { return parseFloat(pos); });\r\n        targetOrigin = origin.slice();\r\n        hasOffset = true;\r\n        if (tagName === \"svg\") {\r\n            offsetLeft = 0;\r\n            offsetTop = 0;\r\n        }\r\n        else {\r\n            _a = __read(getSVGGraphicsOffset(el, origin, el === target && target.tagName.toLowerCase() === \"g\"), 4), offsetLeft = _a[0], offsetTop = _a[1], origin[0] = _a[2], origin[1] = _a[3];\r\n        }\r\n    }\r\n    else {\r\n        origin = getTransformOriginArray(getStyle(\"transformOrigin\")).map(function (pos) { return parseFloat(pos); });\r\n        targetOrigin = origin.slice();\r\n        // console.log(getStyle(\"transformOrigin\"), targetOrigin);\r\n    }\r\n    return {\r\n        tagName: tagName,\r\n        isSVG: isSVG,\r\n        hasOffset: hasOffset,\r\n        offset: [offsetLeft || 0, offsetTop || 0],\r\n        origin: origin,\r\n        targetOrigin: targetOrigin,\r\n    };\r\n}\r\nfunction getBodyOffset(el, isSVG) {\r\n    var getStyle = getCachedStyle(el);\r\n    var getBodyStyle = getCachedStyle((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentBody)(el));\r\n    var bodyPosition = getBodyStyle(\"position\");\r\n    if (!isSVG && (!bodyPosition || bodyPosition === \"static\")) {\r\n        return [0, 0];\r\n    }\r\n    var marginLeft = parseInt(getBodyStyle(\"marginLeft\"), 10);\r\n    var marginTop = parseInt(getBodyStyle(\"marginTop\"), 10);\r\n    if (getStyle(\"position\") === \"absolute\") {\r\n        if (getStyle(\"top\") !== \"auto\" || getStyle(\"bottom\") !== \"auto\") {\r\n            marginTop = 0;\r\n        }\r\n        if (getStyle(\"left\") !== \"auto\" || getStyle(\"right\") !== \"auto\") {\r\n            marginLeft = 0;\r\n        }\r\n    }\r\n    return [marginLeft, marginTop];\r\n}\r\nfunction convert3DMatrixes(matrixes) {\r\n    matrixes.forEach(function (info) {\r\n        var matrix = info.matrix;\r\n        if (matrix) {\r\n            info.matrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertDimension)(matrix, 3, 4);\r\n        }\r\n    });\r\n}\r\nfunction getPositionFixedInfo(el) {\r\n    var fixedContainer = el.parentElement;\r\n    var hasTransform = false;\r\n    var body = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentBody)(el);\r\n    while (fixedContainer) {\r\n        var transform = getComputedStyle(fixedContainer).transform;\r\n        if (transform && transform !== \"none\") {\r\n            hasTransform = true;\r\n            break;\r\n        }\r\n        if (fixedContainer === body) {\r\n            break;\r\n        }\r\n        fixedContainer = fixedContainer.parentElement;\r\n    }\r\n    return {\r\n        fixedContainer: fixedContainer || body,\r\n        hasTransform: hasTransform,\r\n    };\r\n}\r\nfunction makeMatrixCSS(matrix, is3d) {\r\n    if (is3d === void 0) { is3d = matrix.length > 9; }\r\n    return \"\".concat(is3d ? \"matrix3d\" : \"matrix\", \"(\").concat((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertMatrixtoCSS)(matrix, !is3d).join(\",\"), \")\");\r\n}\r\nfunction getSVGViewBox(el) {\r\n    var clientWidth = el.clientWidth;\r\n    var clientHeight = el.clientHeight;\r\n    if (!el) {\r\n        return { x: 0, y: 0, width: 0, height: 0, clientWidth: clientWidth, clientHeight: clientHeight };\r\n    }\r\n    var viewBox = el.viewBox;\r\n    var baseVal = (viewBox && viewBox.baseVal) || { x: 0, y: 0, width: 0, height: 0 };\r\n    return {\r\n        x: baseVal.x,\r\n        y: baseVal.y,\r\n        width: baseVal.width || clientWidth,\r\n        height: baseVal.height || clientHeight,\r\n        clientWidth: clientWidth,\r\n        clientHeight: clientHeight,\r\n    };\r\n}\r\nfunction getSVGMatrix(el, n) {\r\n    var _a;\r\n    var _b = getSVGViewBox(el), viewBoxWidth = _b.width, viewBoxHeight = _b.height, clientWidth = _b.clientWidth, clientHeight = _b.clientHeight;\r\n    var scaleX = clientWidth / viewBoxWidth;\r\n    var scaleY = clientHeight / viewBoxHeight;\r\n    var preserveAspectRatio = el.preserveAspectRatio.baseVal;\r\n    // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\r\n    var align = preserveAspectRatio.align;\r\n    // 1 : meet 2: slice\r\n    var meetOrSlice = preserveAspectRatio.meetOrSlice;\r\n    var svgOrigin = [0, 0];\r\n    var scale = [scaleX, scaleY];\r\n    var translate = [0, 0];\r\n    if (align !== 1) {\r\n        var xAlign = (align - 2) % 3;\r\n        var yAlign = Math.floor((align - 2) / 3);\r\n        svgOrigin[0] = viewBoxWidth * xAlign / 2;\r\n        svgOrigin[1] = viewBoxHeight * yAlign / 2;\r\n        var scaleDimension = meetOrSlice === 2 ? Math.max(scaleY, scaleX) : Math.min(scaleX, scaleY);\r\n        scale[0] = scaleDimension;\r\n        scale[1] = scaleDimension;\r\n        translate[0] = (clientWidth - viewBoxWidth) / 2 * xAlign;\r\n        translate[1] = (clientHeight - viewBoxHeight) / 2 * yAlign;\r\n    }\r\n    var scaleMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createScaleMatrix)(scale, n);\r\n    _a = __read(translate, 2), scaleMatrix[n * (n - 1)] = _a[0], scaleMatrix[n * (n - 1) + 1] = _a[1];\r\n    return getAbsoluteMatrix(scaleMatrix, n, svgOrigin);\r\n}\r\nfunction getSVGGraphicsOffset(el, origin, isGTarget) {\r\n    var tagName = el.tagName.toLowerCase();\r\n    if (!el.getBBox || !isGTarget && tagName === \"g\") {\r\n        return [0, 0, 0, 0];\r\n    }\r\n    var getStyle = getCachedStyle(el);\r\n    var isFillBox = getStyle(\"transform-box\") === \"fill-box\";\r\n    var bbox = el.getBBox();\r\n    var viewBox = getSVGViewBox(el.ownerSVGElement);\r\n    var x = bbox.x;\r\n    var y = bbox.y;\r\n    // x, y가 0으로 나타나는 버그\r\n    if (tagName === \"foreignobject\" && (!x && !y)) {\r\n        x = parseFloat(el.getAttribute(\"x\")) || 0;\r\n        y = parseFloat(el.getAttribute(\"y\")) || 0;\r\n    }\r\n    var left = x - viewBox.x;\r\n    var top = y - viewBox.y;\r\n    var originX = isFillBox ? origin[0] : origin[0] - left;\r\n    var originY = isFillBox ? origin[1] : origin[1] - top;\r\n    // if (isFillBox) {\r\n    //     const bbox = (el as SVGGraphicsElement).getBBox();\r\n    //     const x = parseFloat(getStyle(\"x\")) || bbox.x;\r\n    //     const y = parseFloat(getStyle(\"y\")) || bbox.y;\r\n    //     const xScale = bbox.x / x;\r\n    //     const yScale = bbox.y / y;\r\n    //     console.log(x, y);\r\n    //     originX *= xScale;\r\n    //     originY *= yScale;\r\n    // }\r\n    return [left, top, originX, originY];\r\n}\r\nfunction calculatePosition(matrix, pos, n) {\r\n    return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)(matrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertPositionMatrix)(pos, n), n);\r\n}\r\nfunction calculatePoses(matrix, width, height, n) {\r\n    return [[0, 0], [width, 0], [0, height], [width, height]].map(function (pos) { return calculatePosition(matrix, pos, n); });\r\n}\r\nfunction getRect(poses) {\r\n    var posesX = poses.map(function (pos) { return pos[0]; });\r\n    var posesY = poses.map(function (pos) { return pos[1]; });\r\n    var left = Math.min.apply(Math, __spreadArray([], __read(posesX), false));\r\n    var top = Math.min.apply(Math, __spreadArray([], __read(posesY), false));\r\n    var right = Math.max.apply(Math, __spreadArray([], __read(posesX), false));\r\n    var bottom = Math.max.apply(Math, __spreadArray([], __read(posesY), false));\r\n    var rectWidth = right - left;\r\n    var rectHeight = bottom - top;\r\n    return {\r\n        left: left,\r\n        top: top,\r\n        right: right,\r\n        bottom: bottom,\r\n        width: rectWidth,\r\n        height: rectHeight,\r\n    };\r\n}\r\nfunction calculateRect(matrix, width, height, n) {\r\n    var poses = calculatePoses(matrix, width, height, n);\r\n    return getRect(poses);\r\n}\r\nfunction getSVGOffset(offsetInfo, targetInfo, container, n, beforeMatrix) {\r\n    var _a;\r\n    var target = offsetInfo.target;\r\n    var origin = offsetInfo.origin;\r\n    var targetMatrix = targetInfo.matrix;\r\n    var _b = getSize(target), width = _b.offsetWidth, height = _b.offsetHeight;\r\n    var containerClientRect = container.getBoundingClientRect();\r\n    var margin = [0, 0];\r\n    if (container === (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentBody)(container)) {\r\n        margin = getBodyOffset(target, true);\r\n    }\r\n    var rect = target.getBoundingClientRect();\r\n    var rectLeft = rect.left - containerClientRect.left + container.scrollLeft\r\n        - (container.clientLeft || 0) + margin[0];\r\n    var rectTop = rect.top - containerClientRect.top + container.scrollTop\r\n        - (container.clientTop || 0) + margin[1];\r\n    var rectWidth = rect.width;\r\n    var rectHeight = rect.height;\r\n    var mat = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiplies)(n, beforeMatrix, targetMatrix);\r\n    var _c = calculateRect(mat, width, height, n), prevLeft = _c.left, prevTop = _c.top, prevWidth = _c.width, prevHeight = _c.height;\r\n    var posOrigin = calculatePosition(mat, origin, n);\r\n    var prevOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(posOrigin, [prevLeft, prevTop]);\r\n    var rectOrigin = [\r\n        rectLeft + prevOrigin[0] * rectWidth / prevWidth,\r\n        rectTop + prevOrigin[1] * rectHeight / prevHeight,\r\n    ];\r\n    var offset = [0, 0];\r\n    var count = 0;\r\n    while (++count < 10) {\r\n        var inverseBeforeMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.invert)(beforeMatrix, n);\r\n        _a = __read((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(calculatePosition(inverseBeforeMatrix, rectOrigin, n), calculatePosition(inverseBeforeMatrix, posOrigin, n)), 2), offset[0] = _a[0], offset[1] = _a[1];\r\n        var mat2 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiplies)(n, beforeMatrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createOriginMatrix)(offset, n), targetMatrix);\r\n        var _d = calculateRect(mat2, width, height, n), nextLeft = _d.left, nextTop = _d.top;\r\n        var distLeft = nextLeft - rectLeft;\r\n        var distTop = nextTop - rectTop;\r\n        if (abs(distLeft) < 2 && abs(distTop) < 2) {\r\n            break;\r\n        }\r\n        rectOrigin[0] -= distLeft;\r\n        rectOrigin[1] -= distTop;\r\n    }\r\n    return offset.map(function (p) { return Math.round(p); });\r\n}\r\nfunction calculateMoveableClientPositions(rootMatrix, poses, rootClientRect) {\r\n    var is3d = rootMatrix.length === 16;\r\n    var n = is3d ? 4 : 3;\r\n    var rootPoses = poses.map(function (pos) { return calculatePosition(rootMatrix, pos, n); });\r\n    var left = rootClientRect.left, top = rootClientRect.top;\r\n    return rootPoses.map(function (pos) {\r\n        return [pos[0] + left, pos[1] + top];\r\n    });\r\n}\r\nfunction getDistSize(vec) {\r\n    return Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1]);\r\n}\r\nfunction getDiagonalSize(pos1, pos2) {\r\n    return getDistSize([\r\n        pos2[0] - pos1[0],\r\n        pos2[1] - pos1[1],\r\n    ]);\r\n}\r\nfunction getLineStyle(pos1, pos2, zoom, rad) {\r\n    if (zoom === void 0) { zoom = 1; }\r\n    if (rad === void 0) { rad = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(pos1, pos2); }\r\n    var width = getDiagonalSize(pos1, pos2);\r\n    return {\r\n        transform: \"translateY(-50%) translate(\".concat(pos1[0], \"px, \").concat(pos1[1], \"px) rotate(\").concat(rad, \"rad) scaleY(\").concat(zoom, \")\"),\r\n        width: \"\".concat(width, \"px\"),\r\n    };\r\n}\r\nfunction getControlTransform(rotation, zoom) {\r\n    var poses = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        poses[_i - 2] = arguments[_i];\r\n    }\r\n    var length = poses.length;\r\n    var x = poses.reduce(function (prev, pos) { return prev + pos[0]; }, 0) / length;\r\n    var y = poses.reduce(function (prev, pos) { return prev + pos[1]; }, 0) / length;\r\n    return {\r\n        transform: \"translateZ(0px) translate(\".concat(x, \"px, \").concat(y, \"px) rotate(\").concat(rotation, \"rad) scale(\").concat(zoom, \")\"),\r\n    };\r\n}\r\nfunction getProps(props, ableName) {\r\n    var self = props[ableName];\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isObject)(self)) {\r\n        return __assign(__assign({}, props), self);\r\n    }\r\n    return props;\r\n}\r\nfunction getSize(target) {\r\n    var hasOffset = target && !(0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(target.offsetWidth);\r\n    var offsetWidth = 0;\r\n    var offsetHeight = 0;\r\n    var clientWidth = 0;\r\n    var clientHeight = 0;\r\n    var cssWidth = 0;\r\n    var cssHeight = 0;\r\n    var contentWidth = 0;\r\n    var contentHeight = 0;\r\n    var minWidth = 0;\r\n    var minHeight = 0;\r\n    var minOffsetWidth = 0;\r\n    var minOffsetHeight = 0;\r\n    var maxWidth = Infinity;\r\n    var maxHeight = Infinity;\r\n    var maxOffsetWidth = Infinity;\r\n    var maxOffsetHeight = Infinity;\r\n    var inlineCSSWidth = 0;\r\n    var inlineCSSHeight = 0;\r\n    var svg = false;\r\n    if (target) {\r\n        if (!hasOffset && target.ownerSVGElement) {\r\n            // check svg elements\r\n            var bbox = target.getBBox();\r\n            svg = true;\r\n            offsetWidth = bbox.width;\r\n            offsetHeight = bbox.height;\r\n            cssWidth = offsetWidth;\r\n            cssHeight = offsetHeight;\r\n            contentWidth = offsetWidth;\r\n            contentHeight = offsetHeight;\r\n            clientWidth = offsetWidth;\r\n            clientHeight = offsetHeight;\r\n        }\r\n        else {\r\n            // check html elements\r\n            var getStyle = getCachedStyle(target);\r\n            var targetStyle = target.style;\r\n            var boxSizing = getStyle(\"boxSizing\") === \"border-box\";\r\n            var borderLeft = parseFloat(getStyle(\"borderLeftWidth\")) || 0;\r\n            var borderRight = parseFloat(getStyle(\"borderRightWidth\")) || 0;\r\n            var borderTop = parseFloat(getStyle(\"borderTopWidth\")) || 0;\r\n            var borderBottom = parseFloat(getStyle(\"borderBottomWidth\")) || 0;\r\n            var paddingLeft = parseFloat(getStyle(\"paddingLeft\")) || 0;\r\n            var paddingRight = parseFloat(getStyle(\"paddingRight\")) || 0;\r\n            var paddingTop = parseFloat(getStyle(\"paddingTop\")) || 0;\r\n            var paddingBottom = parseFloat(getStyle(\"paddingBottom\")) || 0;\r\n            var horizontalPadding = paddingLeft + paddingRight;\r\n            var verticalPadding = paddingTop + paddingBottom;\r\n            var horizontalBorder = borderLeft + borderRight;\r\n            var verticalBorder = borderTop + borderBottom;\r\n            var horizontalOffset = horizontalPadding + horizontalBorder;\r\n            var verticalOffset = verticalPadding + verticalBorder;\r\n            var position = getStyle(\"position\");\r\n            var containerWidth = 0;\r\n            var containerHeight = 0;\r\n            // SVGSVGElement, HTMLElement\r\n            if (\"clientLeft\" in target) {\r\n                var parentElement = null;\r\n                if (position === \"absolute\") {\r\n                    var offsetInfo = getOffsetInfo(target, (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentBody)(target));\r\n                    parentElement = offsetInfo.offsetParent;\r\n                }\r\n                else {\r\n                    parentElement = target.parentElement;\r\n                }\r\n                if (parentElement) {\r\n                    var getParentStyle = getCachedStyle(parentElement);\r\n                    containerWidth = parseFloat(getParentStyle(\"width\"));\r\n                    containerHeight = parseFloat(getParentStyle(\"height\"));\r\n                }\r\n            }\r\n            minWidth = Math.max(horizontalPadding, (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(getStyle(\"minWidth\"), containerWidth) || 0);\r\n            minHeight = Math.max(verticalPadding, (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(getStyle(\"minHeight\"), containerHeight) || 0);\r\n            maxWidth = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(getStyle(\"maxWidth\"), containerWidth);\r\n            maxHeight = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(getStyle(\"maxHeight\"), containerHeight);\r\n            if (isNaN(maxWidth)) {\r\n                maxWidth = Infinity;\r\n            }\r\n            if (isNaN(maxHeight)) {\r\n                maxHeight = Infinity;\r\n            }\r\n            inlineCSSWidth = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(targetStyle.width, 0) || 0;\r\n            inlineCSSHeight = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(targetStyle.height, 0) || 0;\r\n            cssWidth = parseFloat(getStyle(\"width\")) || 0;\r\n            cssHeight = parseFloat(getStyle(\"height\")) || 0;\r\n            contentWidth = abs(cssWidth - inlineCSSWidth) < 1\r\n                ? (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.between)(minWidth, inlineCSSWidth || cssWidth, maxWidth)\r\n                : cssWidth;\r\n            contentHeight = abs(cssHeight - inlineCSSHeight) < 1\r\n                ? (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.between)(minHeight, inlineCSSHeight || cssHeight, maxHeight)\r\n                : cssHeight;\r\n            offsetWidth = contentWidth;\r\n            offsetHeight = contentHeight;\r\n            clientWidth = contentWidth;\r\n            clientHeight = contentHeight;\r\n            if (boxSizing) {\r\n                maxOffsetWidth = maxWidth;\r\n                maxOffsetHeight = maxHeight;\r\n                minOffsetWidth = minWidth;\r\n                minOffsetHeight = minHeight;\r\n                contentWidth = offsetWidth - horizontalOffset;\r\n                contentHeight = offsetHeight - verticalOffset;\r\n            }\r\n            else {\r\n                maxOffsetWidth = maxWidth + horizontalOffset;\r\n                maxOffsetHeight = maxHeight + verticalOffset;\r\n                minOffsetWidth = minWidth + horizontalOffset;\r\n                minOffsetHeight = minHeight + verticalOffset;\r\n                offsetWidth = contentWidth + horizontalOffset;\r\n                offsetHeight = contentHeight + verticalOffset;\r\n            }\r\n            clientWidth = contentWidth + horizontalPadding;\r\n            clientHeight = contentHeight + verticalPadding;\r\n        }\r\n    }\r\n    return {\r\n        svg: svg,\r\n        offsetWidth: offsetWidth,\r\n        offsetHeight: offsetHeight,\r\n        clientWidth: clientWidth,\r\n        clientHeight: clientHeight,\r\n        contentWidth: contentWidth,\r\n        contentHeight: contentHeight,\r\n        inlineCSSWidth: inlineCSSWidth,\r\n        inlineCSSHeight: inlineCSSHeight,\r\n        cssWidth: cssWidth,\r\n        cssHeight: cssHeight,\r\n        minWidth: minWidth,\r\n        minHeight: minHeight,\r\n        maxWidth: maxWidth,\r\n        maxHeight: maxHeight,\r\n        minOffsetWidth: minOffsetWidth,\r\n        minOffsetHeight: minOffsetHeight,\r\n        maxOffsetWidth: maxOffsetWidth,\r\n        maxOffsetHeight: maxOffsetHeight,\r\n    };\r\n}\r\nfunction getRotationRad(poses, direction) {\r\n    return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(direction > 0 ? poses[0] : poses[1], direction > 0 ? poses[1] : poses[0]);\r\n}\r\nfunction resetClientRect() {\r\n    return {\r\n        left: 0, top: 0,\r\n        width: 0, height: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        clientLeft: 0, clientTop: 0,\r\n        clientWidth: 0, clientHeight: 0,\r\n        scrollWidth: 0, scrollHeight: 0,\r\n    };\r\n}\r\nfunction getExtendsRect(el, rect) {\r\n    var isRoot = el === (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentBody)(el) || el === (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentElement)(el);\r\n    var extendsRect = {\r\n        clientLeft: el.clientLeft,\r\n        clientTop: el.clientTop,\r\n        clientWidth: el.clientWidth,\r\n        clientHeight: el.clientHeight,\r\n        scrollWidth: el.scrollWidth,\r\n        scrollHeight: el.scrollHeight,\r\n        overflow: false,\r\n    };\r\n    if (isRoot) {\r\n        extendsRect.clientHeight = Math.max(rect.height, extendsRect.clientHeight);\r\n        extendsRect.scrollHeight = Math.max(rect.height, extendsRect.scrollHeight);\r\n    }\r\n    extendsRect.overflow = getCachedStyle(el)(\"overflow\") !== \"visible\";\r\n    return __assign(__assign({}, rect), extendsRect);\r\n}\r\nfunction getClientRectByPosition(position, base, el, isExtends) {\r\n    var left = position.left, right = position.right, top = position.top, bottom = position.bottom;\r\n    var baseTop = base.top;\r\n    var baseLeft = base.left;\r\n    var rect = {\r\n        left: baseLeft + left,\r\n        top: baseTop + top,\r\n        right: baseLeft + right,\r\n        bottom: baseTop + bottom,\r\n        width: right - left,\r\n        height: bottom - top,\r\n    };\r\n    if (el && isExtends) {\r\n        return getExtendsRect(el, rect);\r\n    }\r\n    return rect;\r\n}\r\nfunction getClientRect(el, isExtends) {\r\n    var left = 0;\r\n    var top = 0;\r\n    var width = 0;\r\n    var height = 0;\r\n    // let isRoot = false;\r\n    if (el) {\r\n        var clientRect = el.getBoundingClientRect();\r\n        left = clientRect.left;\r\n        top = clientRect.top;\r\n        width = clientRect.width;\r\n        height = clientRect.height;\r\n    }\r\n    var rect = {\r\n        left: left,\r\n        top: top,\r\n        width: width,\r\n        height: height,\r\n        right: left + width,\r\n        bottom: top + height,\r\n    };\r\n    if (el && isExtends) {\r\n        return getExtendsRect(el, rect);\r\n    }\r\n    return rect;\r\n}\r\nfunction getTotalOrigin(moveable) {\r\n    var _a = moveable.props, groupable = _a.groupable, svgOrigin = _a.svgOrigin;\r\n    var _b = moveable.getState(), offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight, svg = _b.svg, transformOrigin = _b.transformOrigin;\r\n    if (!groupable && svg && svgOrigin) {\r\n        return convertTransformOriginArray(svgOrigin, offsetWidth, offsetHeight);\r\n    }\r\n    return transformOrigin;\r\n}\r\nfunction getTotalDirection(parentDirection, isPinch, inputEvent, datas) {\r\n    var direction;\r\n    if (parentDirection) {\r\n        direction = parentDirection;\r\n    }\r\n    else if (isPinch) {\r\n        direction = [0, 0];\r\n    }\r\n    else {\r\n        var target = inputEvent.target;\r\n        direction = getDirection(target, datas);\r\n    }\r\n    return direction;\r\n}\r\nfunction getDirection(target, datas) {\r\n    if (!target) {\r\n        return;\r\n    }\r\n    var deg = target.getAttribute(\"data-rotation\") || \"\";\r\n    var direciton = target.getAttribute(\"data-direction\");\r\n    datas.deg = deg;\r\n    if (!direciton) {\r\n        return;\r\n    }\r\n    var dir = [0, 0];\r\n    (direciton.indexOf(\"w\") > -1) && (dir[0] = -1);\r\n    (direciton.indexOf(\"e\") > -1) && (dir[0] = 1);\r\n    (direciton.indexOf(\"n\") > -1) && (dir[1] = -1);\r\n    (direciton.indexOf(\"s\") > -1) && (dir[1] = 1);\r\n    return dir;\r\n}\r\nfunction getAbsolutePoses(poses, dist) {\r\n    return [\r\n        (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(dist, poses[0]),\r\n        (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(dist, poses[1]),\r\n        (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(dist, poses[2]),\r\n        (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(dist, poses[3]),\r\n    ];\r\n}\r\nfunction getAbsolutePosesByState(_a) {\r\n    var left = _a.left, top = _a.top, pos1 = _a.pos1, pos2 = _a.pos2, pos3 = _a.pos3, pos4 = _a.pos4;\r\n    return getAbsolutePoses([pos1, pos2, pos3, pos4], [left, top]);\r\n}\r\nfunction unsetAbles(self, isControl) {\r\n    self[isControl ? \"controlAbles\" : \"targetAbles\"].forEach(function (able) {\r\n        able.unset && able.unset(self);\r\n    });\r\n}\r\nfunction unsetGesto(self, isControl) {\r\n    var gestoName = isControl ? \"controlGesto\" : \"targetGesto\";\r\n    var gesto = self[gestoName];\r\n    if ((gesto === null || gesto === void 0 ? void 0 : gesto.isIdle()) === false) {\r\n        unsetAbles(self, isControl);\r\n    }\r\n    gesto === null || gesto === void 0 ? void 0 : gesto.unset();\r\n    self[gestoName] = null;\r\n}\r\nfunction fillCSSObject(style, resolvedEvent) {\r\n    if (resolvedEvent) {\r\n        var originalDatas = getBeforeRenderableDatas(resolvedEvent);\r\n        originalDatas.nextStyle = __assign(__assign({}, originalDatas.nextStyle), style);\r\n    }\r\n    return {\r\n        style: style,\r\n        cssText: (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getKeys)(style).map(function (name) { return \"\".concat((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.decamelize)(name, \"-\"), \": \").concat(style[name], \";\"); }).join(\"\"),\r\n    };\r\n}\r\nfunction fillAfterTransform(prevEvent, nextEvent, resolvedEvent) {\r\n    var afterTransform = nextEvent.afterTransform || nextEvent.transform;\r\n    return __assign(__assign({}, fillCSSObject(__assign(__assign(__assign({}, prevEvent.style), nextEvent.style), { transform: afterTransform }), resolvedEvent)), { afterTransform: afterTransform, transform: prevEvent.transform });\r\n}\r\nfunction fillParams(moveable, e, params, isBeforeEvent) {\r\n    var datas = e.datas;\r\n    if (!datas.datas) {\r\n        datas.datas = {};\r\n    }\r\n    var nextParams = __assign(__assign({}, params), { target: moveable.state.target, clientX: e.clientX, clientY: e.clientY, inputEvent: e.inputEvent, currentTarget: moveable, moveable: moveable, datas: datas.datas, isRequest: e.isRequest, isRequestChild: e.isRequestChild, isFirstDrag: !!e.isFirstDrag, isTrusted: e.isTrusted !== false, stopAble: function () {\r\n            datas.isEventStart = false;\r\n        }, stopDrag: function () {\r\n            var _a;\r\n            (_a = e.stop) === null || _a === void 0 ? void 0 : _a.call(e);\r\n        } });\r\n    if (!datas.isStartEvent) {\r\n        datas.isStartEvent = true;\r\n    }\r\n    else if (!isBeforeEvent) {\r\n        datas.lastEvent = nextParams;\r\n    }\r\n    return nextParams;\r\n}\r\nfunction fillEndParams(moveable, e, params) {\r\n    var datas = e.datas;\r\n    var isDrag = \"isDrag\" in params ? params.isDrag : e.isDrag;\r\n    if (!datas.datas) {\r\n        datas.datas = {};\r\n    }\r\n    return __assign(__assign({ isDrag: isDrag }, params), { moveable: moveable, target: moveable.state.target, clientX: e.clientX, clientY: e.clientY, inputEvent: e.inputEvent, currentTarget: moveable, lastEvent: datas.lastEvent, isDouble: e.isDouble, datas: datas.datas, isFirstDrag: !!e.isFirstDrag });\r\n}\r\nfunction catchEvent(moveable, name, callback) {\r\n    moveable._emitter.on(name, callback);\r\n}\r\nfunction triggerEvent(moveable, name, params, isManager, isRequest) {\r\n    return moveable.triggerEvent(name, params, isManager, isRequest);\r\n}\r\nfunction getComputedStyle(el, pseudoElt) {\r\n    return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getWindow)(el).getComputedStyle(el, pseudoElt);\r\n}\r\nfunction filterAbles(ables, methods, triggerAblesSimultaneously) {\r\n    var enabledAbles = {};\r\n    var ableGroups = {};\r\n    return ables.filter(function (able) {\r\n        var name = able.name;\r\n        if (enabledAbles[name] || !methods.some(function (method) { return able[method]; })) {\r\n            return false;\r\n        }\r\n        if (!triggerAblesSimultaneously && able.ableGroup) {\r\n            if (ableGroups[able.ableGroup]) {\r\n                return false;\r\n            }\r\n            ableGroups[able.ableGroup] = true;\r\n        }\r\n        enabledAbles[name] = true;\r\n        return true;\r\n    });\r\n}\r\nfunction equals(a1, a2) {\r\n    return a1 === a2 || (a1 == null && a2 == null);\r\n}\r\nfunction selectValue() {\r\n    var values = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        values[_i] = arguments[_i];\r\n    }\r\n    var length = values.length - 1;\r\n    for (var i = 0; i < length; ++i) {\r\n        var value = values[i];\r\n        if (!(0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(value)) {\r\n            return value;\r\n        }\r\n    }\r\n    return values[length];\r\n}\r\nfunction groupBy(arr, func) {\r\n    var groups = [];\r\n    var groupKeys = [];\r\n    arr.forEach(function (el, index) {\r\n        var groupKey = func(el, index, arr);\r\n        var keyIndex = groupKeys.indexOf(groupKey);\r\n        var group = groups[keyIndex] || [];\r\n        if (keyIndex === -1) {\r\n            groupKeys.push(groupKey);\r\n            groups.push(group);\r\n        }\r\n        group.push(el);\r\n    });\r\n    return groups;\r\n}\r\nfunction groupByMap(arr, func) {\r\n    var groups = [];\r\n    var groupKeys = {};\r\n    arr.forEach(function (el, index) {\r\n        var groupKey = func(el, index, arr);\r\n        var group = groupKeys[groupKey];\r\n        if (!group) {\r\n            group = [];\r\n            groupKeys[groupKey] = group;\r\n            groups.push(group);\r\n        }\r\n        group.push(el);\r\n    });\r\n    return groups;\r\n}\r\nfunction flat(arr) {\r\n    return arr.reduce(function (prev, cur) {\r\n        return prev.concat(cur);\r\n    }, []);\r\n}\r\nfunction maxOffset() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    args.sort(function (a, b) { return abs(b) - abs(a); });\r\n    return args[0];\r\n}\r\nfunction calculateInversePosition(matrix, pos, n) {\r\n    return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.invert)(matrix, n), (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertPositionMatrix)(pos, n), n);\r\n}\r\nfunction convertDragDist(state, e) {\r\n    var _a;\r\n    var is3d = state.is3d, rootMatrix = state.rootMatrix;\r\n    var n = is3d ? 4 : 3;\r\n    _a = __read(calculateInversePosition(rootMatrix, [e.distX, e.distY], n), 2), e.distX = _a[0], e.distY = _a[1];\r\n    return e;\r\n}\r\nfunction calculatePadding(matrix, pos, added, n) {\r\n    if (!added[0] && !added[1]) {\r\n        return pos;\r\n    }\r\n    var xAdded = calculatePosition(matrix, [normalized(added[0] || 1), 0], n);\r\n    var yAdded = calculatePosition(matrix, [0, normalized(added[1] || 1)], n);\r\n    var nextAdded = calculatePosition(matrix, [\r\n        added[0] / getDistSize(xAdded),\r\n        added[1] / getDistSize(yAdded),\r\n    ], n);\r\n    return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(pos, nextAdded);\r\n}\r\nfunction convertCSSSize(value, size, isRelative) {\r\n    return isRelative ? \"\".concat(value / size * 100, \"%\") : \"\".concat(value, \"px\");\r\n}\r\nfunction getTinyDist(v) {\r\n    return abs(v) <= TINY_NUM ? 0 : v;\r\n}\r\nfunction getDirectionViewClassName(ableName) {\r\n    return function (moveable) {\r\n        if (!moveable.isDragging(ableName)) {\r\n            return \"\";\r\n        }\r\n        var data = getGestoData(moveable, ableName);\r\n        var deg = data.deg;\r\n        if (!deg) {\r\n            return \"\";\r\n        }\r\n        return prefix(\"view-control-rotation\".concat(deg));\r\n    };\r\n}\r\nfunction getDirectionCondition(ableName, checkAbles) {\r\n    if (checkAbles === void 0) { checkAbles = [ableName]; }\r\n    return function (moveable, e) {\r\n        if (e.isRequest) {\r\n            if (checkAbles.some(function (name) { return e.requestAble === name; })) {\r\n                return e.parentDirection;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        var target = e.inputEvent.target;\r\n        return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"direction\")) && (!ableName || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(ableName)));\r\n    };\r\n}\r\nfunction convertTransformInfo(transforms, state, index) {\r\n    var _a;\r\n    var matrixInfos = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.parse)(transforms, {\r\n        \"x%\": function (v) { return v / 100 * state.offsetWidth; },\r\n        \"y%\": function (v) { return v / 100 * state.offsetHeight; },\r\n    });\r\n    var beforeFunctionTexts = transforms.slice(0, index < 0 ? undefined : index);\r\n    var beforeFunctionTexts2 = transforms.slice(0, index < 0 ? undefined : index + 1);\r\n    var targetFunctionText = transforms[index] || \"\";\r\n    var afterFunctionTexts = index < 0 ? [] : transforms.slice(index);\r\n    var afterFunctionTexts2 = index < 0 ? [] : transforms.slice(index + 1);\r\n    var beforeFunctions = matrixInfos.slice(0, index < 0 ? undefined : index);\r\n    var beforeFunctions2 = matrixInfos.slice(0, index < 0 ? undefined : index + 1);\r\n    var targetFunction = (_a = matrixInfos[index]) !== null && _a !== void 0 ? _a : (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.parse)([\"\"])[0];\r\n    var afterFunctions = index < 0 ? [] : matrixInfos.slice(index);\r\n    var afterFunctions2 = index < 0 ? [] : matrixInfos.slice(index + 1);\r\n    var targetFunctions = targetFunction ? [targetFunction] : [];\r\n    var beforeFunctionMatrix = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.toMat)(beforeFunctions);\r\n    var beforeFunctionMatrix2 = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.toMat)(beforeFunctions2);\r\n    var afterFunctionMatrix = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.toMat)(afterFunctions);\r\n    var afterFunctionMatrix2 = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.toMat)(afterFunctions2);\r\n    var allFunctionMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(beforeFunctionMatrix, afterFunctionMatrix, 4);\r\n    return {\r\n        transforms: transforms,\r\n        beforeFunctionMatrix: beforeFunctionMatrix,\r\n        beforeFunctionMatrix2: beforeFunctionMatrix2,\r\n        targetFunctionMatrix: (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.toMat)(targetFunctions),\r\n        afterFunctionMatrix: afterFunctionMatrix,\r\n        afterFunctionMatrix2: afterFunctionMatrix2,\r\n        allFunctionMatrix: allFunctionMatrix,\r\n        beforeFunctions: beforeFunctions,\r\n        beforeFunctions2: beforeFunctions2,\r\n        targetFunction: targetFunctions[0],\r\n        afterFunctions: afterFunctions,\r\n        afterFunctions2: afterFunctions2,\r\n        beforeFunctionTexts: beforeFunctionTexts,\r\n        beforeFunctionTexts2: beforeFunctionTexts2,\r\n        targetFunctionText: targetFunctionText,\r\n        afterFunctionTexts: afterFunctionTexts,\r\n        afterFunctionTexts2: afterFunctionTexts2,\r\n    };\r\n}\r\nfunction isArrayFormat(arr) {\r\n    if (!arr || !(0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isObject)(arr)) {\r\n        return false;\r\n    }\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isNode)(arr)) {\r\n        return false;\r\n    }\r\n    return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(arr) || \"length\" in arr;\r\n}\r\nfunction getRefTarget(target, isSelector) {\r\n    if (!target) {\r\n        return null;\r\n    }\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isNode)(target)) {\r\n        return target;\r\n    }\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isString)(target)) {\r\n        if (isSelector) {\r\n            return document.querySelector(target);\r\n        }\r\n        return target;\r\n    }\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isFunction)(target)) {\r\n        return target();\r\n    }\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isWindow)(target)) {\r\n        return target;\r\n    }\r\n    if (\"current\" in target) {\r\n        return target.current;\r\n    }\r\n    return target;\r\n}\r\nfunction getRefTargets(targets, isSelector) {\r\n    if (!targets) {\r\n        return [];\r\n    }\r\n    var userTargets = isArrayFormat(targets) ? [].slice.call(targets) : [targets];\r\n    return userTargets.reduce(function (prev, target) {\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isString)(target) && isSelector) {\r\n            return __spreadArray(__spreadArray([], __read(prev), false), __read([].slice.call(document.querySelectorAll(target))), false);\r\n        }\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(target)) {\r\n            prev.push(getRefTargets(target, isSelector));\r\n        }\r\n        else {\r\n            prev.push(getRefTarget(target, isSelector));\r\n        }\r\n        return prev;\r\n    }, []);\r\n}\r\nfunction getAbsoluteRotation(pos1, pos2, direction) {\r\n    var deg = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(pos1, pos2) / Math.PI * 180;\r\n    deg = direction >= 0 ? deg : 180 - deg;\r\n    deg = deg >= 0 ? deg : 360 + deg;\r\n    return deg;\r\n}\r\nfunction getDragDistByState(state, dist) {\r\n    var rootMatrix = state.rootMatrix, is3d = state.is3d;\r\n    var n = is3d ? 4 : 3;\r\n    var inverseMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.invert)(rootMatrix, n);\r\n    if (!is3d) {\r\n        inverseMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertDimension)(inverseMatrix, 3, 4);\r\n    }\r\n    inverseMatrix[12] = 0;\r\n    inverseMatrix[13] = 0;\r\n    inverseMatrix[14] = 0;\r\n    return (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.calculateMatrixDist)(inverseMatrix, dist);\r\n}\r\nfunction getSizeDistByDist(startSize, dist, ratio, direction, keepRatio) {\r\n    var _a = __read(startSize, 2), startOffsetWidth = _a[0], startOffsetHeight = _a[1];\r\n    var distWidth = 0;\r\n    var distHeight = 0;\r\n    if (keepRatio && startOffsetWidth && startOffsetHeight) {\r\n        var rad = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)([0, 0], dist);\r\n        var standardRad = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)([0, 0], direction);\r\n        var size = getDistSize(dist);\r\n        var signSize = Math.cos(rad - standardRad) * size;\r\n        if (!direction[0]) {\r\n            // top, bottom\r\n            distHeight = signSize;\r\n            distWidth = distHeight * ratio;\r\n        }\r\n        else if (!direction[1]) {\r\n            // left, right\r\n            distWidth = signSize;\r\n            distHeight = distWidth / ratio;\r\n        }\r\n        else {\r\n            // two-way\r\n            var startWidthSize = direction[0] * startOffsetWidth;\r\n            var startHeightSize = direction[1] * startOffsetHeight;\r\n            var secondRad = Math.atan2(startWidthSize + dist[0], startHeightSize + dist[1]);\r\n            var firstRad = Math.atan2(startWidthSize, startHeightSize);\r\n            if (secondRad < 0) {\r\n                secondRad += Math.PI * 2;\r\n            }\r\n            if (firstRad < 0) {\r\n                firstRad += Math.PI * 2;\r\n            }\r\n            var rad_1 = 0;\r\n            if (abs(secondRad - firstRad) < Math.PI / 2 || abs(secondRad - firstRad) > Math.PI / 2 * 3) {\r\n                rad_1 = secondRad - firstRad;\r\n            }\r\n            else {\r\n                firstRad += Math.PI;\r\n                rad_1 = secondRad - firstRad;\r\n            }\r\n            if (rad_1 > Math.PI * 2) {\r\n                rad_1 -= Math.PI * 2;\r\n            }\r\n            else if (rad_1 > Math.PI) {\r\n                rad_1 = 2 * Math.PI - rad_1;\r\n            }\r\n            else if (rad_1 < -Math.PI) {\r\n                rad_1 = -2 * Math.PI - rad_1;\r\n            }\r\n            //       180\r\n            // -1, -1,  // 1, -1\r\n            // 270            90\r\n            // -1, 1    // 1, 1\r\n            //       0\r\n            var distSize = getDistSize([startWidthSize + dist[0], startHeightSize + dist[1]]) * Math.cos(rad_1);\r\n            distWidth = distSize * Math.sin(firstRad) - startWidthSize;\r\n            distHeight = distSize * Math.cos(firstRad) - startHeightSize;\r\n            if (direction[0] < 0) {\r\n                distWidth *= -1;\r\n            }\r\n            if (direction[1] < 0) {\r\n                distHeight *= -1;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        distWidth = direction[0] * dist[0];\r\n        distHeight = direction[1] * dist[1];\r\n    }\r\n    return [distWidth, distHeight];\r\n}\r\nfunction getOffsetSizeDist(sizeDirection, keepRatio, datas, e) {\r\n    var _a;\r\n    var ratio = datas.ratio, startOffsetWidth = datas.startOffsetWidth, startOffsetHeight = datas.startOffsetHeight;\r\n    var distWidth = 0;\r\n    var distHeight = 0;\r\n    var distX = e.distX, distY = e.distY, pinchScale = e.pinchScale, parentDistance = e.parentDistance, parentDist = e.parentDist, parentScale = e.parentScale;\r\n    var startFixedDirection = datas.fixedDirection;\r\n    var directionsDists = [0, 1].map(function (index) {\r\n        return abs(sizeDirection[index] - startFixedDirection[index]);\r\n    });\r\n    var directionRatios = [0, 1].map(function (index) {\r\n        var dist = directionsDists[index];\r\n        if (dist !== 0) {\r\n            dist = 2 / dist;\r\n        }\r\n        return dist;\r\n    });\r\n    if (parentDist) {\r\n        distWidth = parentDist[0];\r\n        distHeight = parentDist[1];\r\n        if (keepRatio) {\r\n            if (!distWidth) {\r\n                distWidth = distHeight * ratio;\r\n            }\r\n            else if (!distHeight) {\r\n                distHeight = distWidth / ratio;\r\n            }\r\n        }\r\n    }\r\n    else if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isNumber)(pinchScale)) {\r\n        distWidth = (pinchScale - 1) * startOffsetWidth;\r\n        distHeight = (pinchScale - 1) * startOffsetHeight;\r\n    }\r\n    else if (parentScale) {\r\n        distWidth = (parentScale[0] - 1) * startOffsetWidth;\r\n        distHeight = (parentScale[1] - 1) * startOffsetHeight;\r\n    }\r\n    else if (parentDistance) {\r\n        var scaleX = startOffsetWidth * directionsDists[0];\r\n        var scaleY = startOffsetHeight * directionsDists[1];\r\n        var ratioDistance = getDistSize([scaleX, scaleY]);\r\n        distWidth = parentDistance / ratioDistance * scaleX * directionRatios[0];\r\n        distHeight = parentDistance / ratioDistance * scaleY * directionRatios[1];\r\n    }\r\n    else {\r\n        var dist_1 = getDragDist({ datas: datas, distX: distX, distY: distY });\r\n        dist_1 = directionRatios.map(function (ratio, i) {\r\n            return dist_1[i] * ratio;\r\n        });\r\n        _a = __read(getSizeDistByDist([startOffsetWidth, startOffsetHeight], dist_1, ratio, sizeDirection, keepRatio), 2), distWidth = _a[0], distHeight = _a[1];\r\n    }\r\n    return {\r\n        // direction,\r\n        // sizeDirection,\r\n        distWidth: distWidth,\r\n        distHeight: distHeight,\r\n    };\r\n}\r\nfunction convertTransformUnit(origin, xy) {\r\n    if (xy) {\r\n        if (origin === \"left\") {\r\n            return { x: \"0%\", y: \"50%\" };\r\n        }\r\n        else if (origin === \"top\") {\r\n            return { x: \"50%\", y: \"50%\" };\r\n        }\r\n        else if (origin === \"center\") {\r\n            return { x: \"50%\", y: \"50%\" };\r\n        }\r\n        else if (origin === \"right\") {\r\n            return { x: \"100%\", y: \"50%\" };\r\n        }\r\n        else if (origin === \"bottom\") {\r\n            return { x: \"50%\", y: \"100%\" };\r\n        }\r\n        var _a = __read(origin.split(\" \"), 2), left = _a[0], right = _a[1];\r\n        var leftOrigin = convertTransformUnit(left || \"\");\r\n        var rightOrigin = convertTransformUnit(right || \"\");\r\n        var originObject = __assign(__assign({}, leftOrigin), rightOrigin);\r\n        var nextOriginObject = {\r\n            x: \"50%\",\r\n            y: \"50%\",\r\n        };\r\n        if (originObject.x) {\r\n            nextOriginObject.x = originObject.x;\r\n        }\r\n        if (originObject.y) {\r\n            nextOriginObject.y = originObject.y;\r\n        }\r\n        if (originObject.value) {\r\n            if (originObject.x && !originObject.y) {\r\n                nextOriginObject.y = originObject.value;\r\n            }\r\n            if (!originObject.x && originObject.y) {\r\n                nextOriginObject.x = originObject.value;\r\n            }\r\n        }\r\n        return nextOriginObject;\r\n    }\r\n    if (origin === \"left\") {\r\n        return { x: \"0%\" };\r\n    }\r\n    if (origin === \"right\") {\r\n        return { x: \"100%\" };\r\n    }\r\n    if (origin === \"top\") {\r\n        return { y: \"0%\" };\r\n    }\r\n    if (origin === \"bottom\") {\r\n        return { y: \"100%\" };\r\n    }\r\n    if (!origin) {\r\n        return {};\r\n    }\r\n    if (origin === \"center\") {\r\n        return { value: \"50%\" };\r\n    }\r\n    return { value: origin };\r\n}\r\nfunction convertTransformOriginArray(transformOrigin, width, height) {\r\n    var _a = convertTransformUnit(transformOrigin, true), x = _a.x, y = _a.y;\r\n    return [\r\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(x, width) || 0,\r\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(y, height) || 0,\r\n    ];\r\n}\r\nfunction rotatePosesInfo(poses, origin, rad) {\r\n    var prevPoses = poses.map(function (pos) { return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(pos, origin); });\r\n    var nextPoses = prevPoses.map(function (pos) { return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.rotate)(pos, rad); });\r\n    return {\r\n        prev: prevPoses,\r\n        next: nextPoses,\r\n        result: nextPoses.map(function (pos) { return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(pos, origin); }),\r\n    };\r\n}\r\nfunction isDeepArrayEquals(arr1, arr2) {\r\n    return arr1.length === arr2.length && arr1.every(function (value1, i) {\r\n        var value2 = arr2[i];\r\n        var isArray1 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(value1);\r\n        var isArray2 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(value2);\r\n        if (isArray1 && isArray2) {\r\n            return isDeepArrayEquals(value1, value2);\r\n        }\r\n        else if (!isArray1 && !isArray2) {\r\n            return value1 === value2;\r\n        }\r\n        return false;\r\n    });\r\n}\r\nfunction watchValue(moveable, property, nextValue, valueKey, defaultValue) {\r\n    var store = moveable._store;\r\n    var prevValue = store[property];\r\n    if (!(property in store)) {\r\n        if (defaultValue != null) {\r\n            store[property] = defaultValue;\r\n            prevValue = defaultValue;\r\n        }\r\n        else {\r\n            store[property] = nextValue;\r\n            return nextValue;\r\n        }\r\n    }\r\n    if (prevValue === nextValue || valueKey(prevValue) === valueKey(nextValue)) {\r\n        return prevValue;\r\n    }\r\n    store[property] = nextValue;\r\n    return nextValue;\r\n}\r\nfunction sign(value) {\r\n    return value >= 0 ? 1 : -1;\r\n}\r\nfunction abs(value) {\r\n    return Math.abs(value);\r\n}\r\nfunction countEach(count, callback) {\r\n    return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.counter)(count).map(function (index) { return callback(index); });\r\n}\r\nfunction getPaddingBox(padding) {\r\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isNumber)(padding)) {\r\n        return {\r\n            top: padding,\r\n            left: padding,\r\n            right: padding,\r\n            bottom: padding,\r\n        };\r\n    }\r\n    return {\r\n        left: padding.left || 0,\r\n        top: padding.top || 0,\r\n        right: padding.right || 0,\r\n        bottom: padding.bottom || 0,\r\n    };\r\n}\n\n/**\r\n * @namespace Moveable.Pinchable\r\n * @description Whether or not target can be pinched with draggable, resizable, scalable, rotatable (default: false)\r\n */\r\nvar Pinchable = makeAble(\"pinchable\", {\r\n    props: [\r\n        \"pinchable\",\r\n    ],\r\n    events: [\r\n        \"pinchStart\",\r\n        \"pinch\",\r\n        \"pinchEnd\",\r\n        \"pinchGroupStart\",\r\n        \"pinchGroup\",\r\n        \"pinchGroupEnd\",\r\n    ],\r\n    dragStart: function () {\r\n        return true;\r\n    },\r\n    pinchStart: function (moveable, e) {\r\n        var datas = e.datas, targets = e.targets, angle = e.angle, originalDatas = e.originalDatas;\r\n        var _a = moveable.props, pinchable = _a.pinchable, ables = _a.ables;\r\n        if (!pinchable) {\r\n            return false;\r\n        }\r\n        var eventName = \"onPinch\".concat(targets ? \"Group\" : \"\", \"Start\");\r\n        var controlEventName = \"drag\".concat(targets ? \"Group\" : \"\", \"ControlStart\");\r\n        var pinchAbles = (pinchable === true ? moveable.controlAbles : ables.filter(function (able) {\r\n            return pinchable.indexOf(able.name) > -1;\r\n        })).filter(function (able) { return able.canPinch && able[controlEventName]; });\r\n        var params = fillParams(moveable, e, {});\r\n        if (targets) {\r\n            params.targets = targets;\r\n        }\r\n        var result = triggerEvent(moveable, eventName, params);\r\n        datas.isPinch = result !== false;\r\n        datas.ables = pinchAbles;\r\n        var isPinch = datas.isPinch;\r\n        if (!isPinch) {\r\n            return false;\r\n        }\r\n        pinchAbles.forEach(function (able) {\r\n            originalDatas[able.name] = originalDatas[able.name] || {};\r\n            if (!able[controlEventName]) {\r\n                return;\r\n            }\r\n            var ableEvent = __assign(__assign({}, e), { datas: originalDatas[able.name], parentRotate: angle, isPinch: true });\r\n            able[controlEventName](moveable, ableEvent);\r\n        });\r\n        moveable.state.snapRenderInfo = {\r\n            request: e.isRequest,\r\n            direction: [0, 0],\r\n        };\r\n        return isPinch;\r\n    },\r\n    pinch: function (moveable, e) {\r\n        var datas = e.datas, pinchScale = e.scale, distance = e.distance, originalDatas = e.originalDatas, inputEvent = e.inputEvent, targets = e.targets, angle = e.angle;\r\n        if (!datas.isPinch) {\r\n            return;\r\n        }\r\n        var parentDistance = distance * (1 - 1 / pinchScale);\r\n        var params = fillParams(moveable, e, {});\r\n        if (targets) {\r\n            params.targets = targets;\r\n        }\r\n        var eventName = \"onPinch\".concat(targets ? \"Group\" : \"\");\r\n        triggerEvent(moveable, eventName, params);\r\n        var ables = datas.ables;\r\n        var controlEventName = \"drag\".concat(targets ? \"Group\" : \"\", \"Control\");\r\n        ables.forEach(function (able) {\r\n            if (!able[controlEventName]) {\r\n                return;\r\n            }\r\n            able[controlEventName](moveable, __assign(__assign({}, e), { datas: originalDatas[able.name], inputEvent: inputEvent, resolveMatrix: true, pinchScale: pinchScale, parentDistance: parentDistance, parentRotate: angle, isPinch: true }));\r\n        });\r\n        return params;\r\n    },\r\n    pinchEnd: function (moveable, e) {\r\n        var datas = e.datas, isPinch = e.isPinch, inputEvent = e.inputEvent, targets = e.targets, originalDatas = e.originalDatas;\r\n        if (!datas.isPinch) {\r\n            return;\r\n        }\r\n        var eventName = \"onPinch\".concat(targets ? \"Group\" : \"\", \"End\");\r\n        var params = fillEndParams(moveable, e, { isDrag: isPinch });\r\n        if (targets) {\r\n            params.targets = targets;\r\n        }\r\n        triggerEvent(moveable, eventName, params);\r\n        var ables = datas.ables;\r\n        var controlEventName = \"drag\".concat(targets ? \"Group\" : \"\", \"ControlEnd\");\r\n        ables.forEach(function (able) {\r\n            if (!able[controlEventName]) {\r\n                return;\r\n            }\r\n            able[controlEventName](moveable, __assign(__assign({}, e), { isDrag: isPinch, datas: originalDatas[able.name], inputEvent: inputEvent, isPinch: true }));\r\n        });\r\n        return isPinch;\r\n    },\r\n    pinchGroupStart: function (moveable, e) {\r\n        return this.pinchStart(moveable, __assign(__assign({}, e), { targets: moveable.props.targets }));\r\n    },\r\n    pinchGroup: function (moveable, e) {\r\n        return this.pinch(moveable, __assign(__assign({}, e), { targets: moveable.props.targets }));\r\n    },\r\n    pinchGroupEnd: function (moveable, e) {\r\n        return this.pinchEnd(moveable, __assign(__assign({}, e), { targets: moveable.props.targets }));\r\n    },\r\n});\r\n/**\r\n * Whether or not target can be pinched with draggable, resizable, scalable, rotatable (default: false)\r\n * @name Moveable.Pinchable#pinchable\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.pinchable = true;\r\n */\r\n/**\r\n * When the pinch starts, the pinchStart event is called with part of scaleStart, rotateStart, resizeStart\r\n * @memberof Moveable.Pinchable\r\n * @event pinchStart\r\n * @param {Moveable.Pinchable.OnPinchStart} - Parameters for the pinchStart event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     rotatable: true,\r\n *     scalable: true,\r\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\r\n * });\r\n * moveable.on(\"pinchStart\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n * moveable.on(\"rotateStart\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n * moveable.on(\"scaleStart\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n */\r\n/**\r\n * When pinching, the pinch event is called with part of scale, rotate, resize\r\n * @memberof Moveable.Pinchable\r\n * @event pinch\r\n * @param {Moveable.Pinchable.OnPinch} - Parameters for the pinch event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     rotatable: true,\r\n *     scalable: true,\r\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\r\n * });\r\n * moveable.on(\"pinch\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n * moveable.on(\"rotate\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n * moveable.on(\"scale\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n */\r\n/**\r\n * When the pinch finishes, the pinchEnd event is called.\r\n * @memberof Moveable.Pinchable\r\n * @event pinchEnd\r\n * @param {Moveable.Pinchable.OnPinchEnd} - Parameters for the pinchEnd event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     rotatable: true,\r\n *     scalable: true,\r\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\r\n * });\r\n * moveable.on(\"pinchEnd\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n * moveable.on(\"rotateEnd\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n * moveable.on(\"scaleEnd\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n */\r\n/**\r\n * When the group pinch starts, the `pinchGroupStart` event is called.\r\n * @memberof Moveable.Pinchable\r\n * @event pinchGroupStart\r\n * @param {Moveable.Pinchable.OnPinchGroupStart} - Parameters for the `pinchGroupStart` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n *     pinchable: true\r\n * });\r\n * moveable.on(\"pinchGroupStart\", ({ targets }) => {\r\n *     console.log(\"onPinchGroupStart\", targets);\r\n * });\r\n */\r\n/**\r\n * When the group pinch, the `pinchGroup` event is called.\r\n * @memberof Moveable.Pinchable\r\n * @event pinchGroup\r\n * @param {Moveable.Pinchable.OnPinchGroup} - Parameters for the `pinchGroup` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n *     pinchable: true\r\n * });\r\n * moveable.on(\"pinchGroup\", ({ targets, events }) => {\r\n *     console.log(\"onPinchGroup\", targets);\r\n * });\r\n */\r\n/**\r\n * When the group pinch finishes, the `pinchGroupEnd` event is called.\r\n * @memberof Moveable.Pinchable\r\n * @event pinchGroupEnd\r\n * @param {Moveable.Pinchable.OnPinchGroupEnd} - Parameters for the `pinchGroupEnd` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n *     pinchable: true\r\n * });\r\n * moveable.on(\"pinchGroupEnd\", ({ targets, isDrag }) => {\r\n *     console.log(\"onPinchGroupEnd\", targets, isDrag);\r\n * });\r\n */\n\nvar directionCondition = getDirectionCondition(\"scalable\");\r\n/**\r\n * @namespace Scalable\r\n * @memberof Moveable\r\n * @description Scalable indicates whether the target's x and y can be scale of transform.\r\n */\r\nvar Scalable = {\r\n    name: \"scalable\",\r\n    ableGroup: \"size\",\r\n    canPinch: true,\r\n    props: [\r\n        \"scalable\",\r\n        \"throttleScale\",\r\n        \"renderDirections\",\r\n        \"keepRatio\",\r\n        \"edge\",\r\n        \"displayAroundControls\",\r\n    ],\r\n    events: [\r\n        \"scaleStart\",\r\n        \"beforeScale\",\r\n        \"scale\",\r\n        \"scaleEnd\",\r\n        \"scaleGroupStart\",\r\n        \"beforeScaleGroup\",\r\n        \"scaleGroup\",\r\n        \"scaleGroupEnd\",\r\n    ],\r\n    render: getRenderDirections(\"scalable\"),\r\n    dragControlCondition: directionCondition,\r\n    viewClassName: getDirectionViewClassName(\"scalable\"),\r\n    dragControlStart: function (moveable, e) {\r\n        var datas = e.datas, isPinch = e.isPinch, inputEvent = e.inputEvent, parentDirection = e.parentDirection;\r\n        var direction = getTotalDirection(parentDirection, isPinch, inputEvent, datas);\r\n        var _a = moveable.state, width = _a.width, height = _a.height, targetTransform = _a.targetTransform, target = _a.target, pos1 = _a.pos1, pos2 = _a.pos2, pos4 = _a.pos4;\r\n        if (!direction || !target) {\r\n            return false;\r\n        }\r\n        if (!isPinch) {\r\n            setDragStart(moveable, e);\r\n        }\r\n        datas.datas = {};\r\n        datas.transform = targetTransform;\r\n        datas.prevDist = [1, 1];\r\n        datas.direction = direction;\r\n        datas.startOffsetWidth = width;\r\n        datas.startOffsetHeight = height;\r\n        datas.startValue = [1, 1];\r\n        // const scaleWidth = getDist(pos1, pos2);\r\n        // const scaleHeight = getDist(pos2, pos4);\r\n        var isWidth = (!direction[0] && !direction[1]) || direction[0] || !direction[1];\r\n        // datas.scaleWidth = scaleWidth;\r\n        // datas.scaleHeight = scaleHeight;\r\n        // datas.scaleXRatio = scaleWidth / width;\r\n        // datas.scaleYRatio = scaleHeight / height;\r\n        setDefaultTransformIndex(moveable, e, \"scale\");\r\n        datas.isWidth = isWidth;\r\n        function setRatio(ratio) {\r\n            datas.ratio = ratio && isFinite(ratio) ? ratio : 0;\r\n        }\r\n        datas.startPositions = getAbsolutePosesByState(moveable.state);\r\n        function setFixedDirection(fixedDirection) {\r\n            var result = getFixedDirectionInfo(datas.startPositions, fixedDirection);\r\n            datas.fixedDirection = result.fixedDirection;\r\n            datas.fixedPosition = result.fixedPosition;\r\n            datas.fixedOffset = result.fixedOffset;\r\n        }\r\n        datas.setFixedDirection = setFixedDirection;\r\n        setRatio((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDist)(pos1, pos2) / (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDist)(pos2, pos4));\r\n        setFixedDirection([-direction[0], -direction[1]]);\r\n        var setMinScaleSize = function (min) {\r\n            datas.minScaleSize = min;\r\n        };\r\n        var setMaxScaleSize = function (max) {\r\n            datas.maxScaleSize = max;\r\n        };\r\n        // const setMinScale = (min: number[]) => {\r\n        // };\r\n        // const setMaxScale = (max: number[]) => {\r\n        // };\r\n        setMinScaleSize([-Infinity, -Infinity]);\r\n        setMaxScaleSize([Infinity, Infinity]);\r\n        var params = fillParams(moveable, e, __assign(__assign({ direction: direction, set: function (scale) {\r\n                datas.startValue = scale;\r\n            }, setRatio: setRatio, setFixedDirection: setFixedDirection, setMinScaleSize: setMinScaleSize, setMaxScaleSize: setMaxScaleSize }, fillTransformStartEvent(moveable, e)), { dragStart: Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e)) }));\r\n        var result = triggerEvent(moveable, \"onScaleStart\", params);\r\n        datas.startFixedDirection = datas.fixedDirection;\r\n        if (result !== false) {\r\n            datas.isScale = true;\r\n            moveable.state.snapRenderInfo = {\r\n                request: e.isRequest,\r\n                direction: direction,\r\n            };\r\n        }\r\n        return datas.isScale ? params : false;\r\n    },\r\n    dragControl: function (moveable, e) {\r\n        resolveTransformEvent(moveable, e, \"scale\");\r\n        var datas = e.datas, parentKeepRatio = e.parentKeepRatio, parentFlag = e.parentFlag, isPinch = e.isPinch, dragClient = e.dragClient, isRequest = e.isRequest, useSnap = e.useSnap, resolveMatrix = e.resolveMatrix;\r\n        var prevDist = datas.prevDist, direction = datas.direction, startOffsetWidth = datas.startOffsetWidth, startOffsetHeight = datas.startOffsetHeight, isScale = datas.isScale, startValue = datas.startValue, isWidth = datas.isWidth, ratio = datas.ratio;\r\n        if (!isScale) {\r\n            return false;\r\n        }\r\n        var props = moveable.props;\r\n        var throttleScale = props.throttleScale, parentMoveable = props.parentMoveable;\r\n        var sizeDirection = direction;\r\n        if (!direction[0] && !direction[1]) {\r\n            sizeDirection = [1, 1];\r\n        }\r\n        var keepRatio = (ratio && (parentKeepRatio != null ? parentKeepRatio : props.keepRatio)) || false;\r\n        var state = moveable.state;\r\n        var tempScaleValue = [\r\n            startValue[0],\r\n            startValue[1],\r\n        ];\r\n        function getNextScale() {\r\n            var _a = getOffsetSizeDist(sizeDirection, keepRatio, datas, e), distWidth = _a.distWidth, distHeight = _a.distHeight;\r\n            var distX = startOffsetWidth ? (startOffsetWidth + distWidth) / startOffsetWidth : 1;\r\n            var distY = startOffsetHeight ? (startOffsetHeight + distHeight) / startOffsetHeight : 1;\r\n            if (!startValue[0]) {\r\n                tempScaleValue[0] = distWidth / startOffsetWidth;\r\n            }\r\n            if (!startValue[1]) {\r\n                tempScaleValue[1] = distHeight / startOffsetHeight;\r\n            }\r\n            var scaleX = (sizeDirection[0] || keepRatio ? distX : 1) * tempScaleValue[0];\r\n            var scaleY = (sizeDirection[1] || keepRatio ? distY : 1) * tempScaleValue[1];\r\n            if (scaleX === 0) {\r\n                scaleX = sign(prevDist[0]) * MIN_SCALE;\r\n            }\r\n            if (scaleY === 0) {\r\n                scaleY = sign(prevDist[1]) * MIN_SCALE;\r\n            }\r\n            return [scaleX, scaleY];\r\n        }\r\n        var scale = getNextScale();\r\n        if (!isPinch && moveable.props.groupable) {\r\n            var snapRenderInfo = state.snapRenderInfo || {};\r\n            var stateDirection = snapRenderInfo.direction;\r\n            if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(stateDirection) && (stateDirection[0] || stateDirection[1])) {\r\n                state.snapRenderInfo = { direction: direction, request: e.isRequest };\r\n            }\r\n        }\r\n        triggerEvent(moveable, \"onBeforeScale\", fillParams(moveable, e, {\r\n            scale: scale,\r\n            setFixedDirection: function (nextFixedDirection) {\r\n                datas.setFixedDirection(nextFixedDirection);\r\n                scale = getNextScale();\r\n                return scale;\r\n            },\r\n            startFixedDirection: datas.startFixedDirection,\r\n            setScale: function (nextScale) {\r\n                scale = nextScale;\r\n            },\r\n        }, true));\r\n        var dist = [\r\n            scale[0] / tempScaleValue[0],\r\n            scale[1] / tempScaleValue[1],\r\n        ];\r\n        var fixedPosition = dragClient;\r\n        var snapDist = [0, 0];\r\n        var distSign = sign(dist[0] * dist[1]);\r\n        var isSelfPinch = !dragClient && !parentFlag && isPinch;\r\n        if (isSelfPinch || resolveMatrix) {\r\n            fixedPosition = getTranslateFixedPosition(moveable, datas.targetAllTransform, [0, 0], [0, 0], datas);\r\n        }\r\n        else if (!dragClient) {\r\n            fixedPosition = datas.fixedPosition;\r\n        }\r\n        if (!isPinch) {\r\n            snapDist = checkSnapScale(moveable, dist, direction, !useSnap && isRequest, datas);\r\n        }\r\n        if (keepRatio) {\r\n            if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\r\n                if (Math.abs(snapDist[0] * startOffsetWidth) > Math.abs(snapDist[1] * startOffsetHeight)) {\r\n                    snapDist[1] = 0;\r\n                }\r\n                else {\r\n                    snapDist[0] = 0;\r\n                }\r\n            }\r\n            var isNoSnap = !snapDist[0] && !snapDist[1];\r\n            if (isNoSnap) {\r\n                // throttle scale value (not absolute scale size)\r\n                if (isWidth) {\r\n                    dist[0] = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(dist[0] * tempScaleValue[0], throttleScale) / tempScaleValue[0];\r\n                }\r\n                else {\r\n                    dist[1] = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(dist[1] * tempScaleValue[1], throttleScale) / tempScaleValue[1];\r\n                }\r\n            }\r\n            if ((sizeDirection[0] && !sizeDirection[1])\r\n                || (snapDist[0] && !snapDist[1])\r\n                || (isNoSnap && isWidth)) {\r\n                dist[0] += snapDist[0];\r\n                var snapHeight = startOffsetWidth * dist[0] * tempScaleValue[0] / ratio;\r\n                dist[1] = sign(distSign * dist[0]) * abs(snapHeight / startOffsetHeight / tempScaleValue[1]);\r\n            }\r\n            else if ((!sizeDirection[0] && sizeDirection[1])\r\n                || (!snapDist[0] && snapDist[1])\r\n                || (isNoSnap && !isWidth)) {\r\n                dist[1] += snapDist[1];\r\n                var snapWidth = startOffsetHeight * dist[1] * tempScaleValue[1] * ratio;\r\n                dist[0] = sign(distSign * dist[1]) * abs(snapWidth / startOffsetWidth / tempScaleValue[0]);\r\n            }\r\n        }\r\n        else {\r\n            dist[0] += snapDist[0];\r\n            dist[1] += snapDist[1];\r\n            if (!snapDist[0]) {\r\n                dist[0] = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(dist[0] * tempScaleValue[0], throttleScale) / tempScaleValue[0];\r\n            }\r\n            if (!snapDist[1]) {\r\n                dist[1] = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(dist[1] * tempScaleValue[1], throttleScale) / tempScaleValue[1];\r\n            }\r\n        }\r\n        if (dist[0] === 0) {\r\n            dist[0] = sign(prevDist[0]) * MIN_SCALE;\r\n        }\r\n        if (dist[1] === 0) {\r\n            dist[1] = sign(prevDist[1]) * MIN_SCALE;\r\n        }\r\n        scale = multiply2(dist, [tempScaleValue[0], tempScaleValue[1]]);\r\n        var startOffsetSize = [\r\n            startOffsetWidth,\r\n            startOffsetHeight,\r\n        ];\r\n        var scaleSize = [\r\n            startOffsetWidth * scale[0],\r\n            startOffsetHeight * scale[1],\r\n        ];\r\n        scaleSize = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.calculateBoundSize)(scaleSize, datas.minScaleSize, datas.maxScaleSize, keepRatio ? ratio : false);\r\n        // if (keepRatio && (isGroup || keepRatioFinally)) {\r\n        //     if (isWidth) {\r\n        //         boundingHeight = boundingWidth / ratio;\r\n        //     } else {\r\n        //         boundingWidth = boundingHeight * ratio;\r\n        //     }\r\n        // }\r\n        scale = countEach(2, function (i) {\r\n            return startOffsetSize[i] ? scaleSize[i] / startOffsetSize[i] : scaleSize[i];\r\n        });\r\n        dist = countEach(2, function (i) {\r\n            return scale[i] / tempScaleValue[i];\r\n        });\r\n        var delta = countEach(2, function (i) { return prevDist[i] ? dist[i] / prevDist[i] : dist[i]; });\r\n        var distText = \"scale(\".concat(dist.join(\", \"), \")\");\r\n        var scaleText = \"scale(\".concat(scale.join(\", \"), \")\");\r\n        var nextTransform = convertTransformFormat(datas, scaleText, distText);\r\n        var isZeroScale = !startValue[0] || !startValue[1];\r\n        var inverseDist = getScaleDist(moveable, isZeroScale ? scaleText : distText, datas.fixedDirection, fixedPosition, datas.fixedOffset, datas, isZeroScale);\r\n        var inverseDelta = isSelfPinch ? inverseDist : (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(inverseDist, datas.prevInverseDist || [0, 0]);\r\n        datas.prevDist = dist;\r\n        datas.prevInverseDist = inverseDist;\r\n        if (scale[0] === prevDist[0] && scale[1] === prevDist[1]\r\n            && inverseDelta.every(function (num) { return !num; })\r\n            && !parentMoveable\r\n            && !isSelfPinch) {\r\n            return false;\r\n        }\r\n        var params = fillParams(moveable, e, __assign({ offsetWidth: startOffsetWidth, offsetHeight: startOffsetHeight, direction: direction, scale: scale, dist: dist, delta: delta, isPinch: !!isPinch }, fillTransformEvent(moveable, nextTransform, inverseDelta, isPinch, e)));\r\n        triggerEvent(moveable, \"onScale\", params);\r\n        return params;\r\n    },\r\n    dragControlEnd: function (moveable, e) {\r\n        var datas = e.datas;\r\n        if (!datas.isScale) {\r\n            return false;\r\n        }\r\n        datas.isScale = false;\r\n        var scaleEndParam = fillEndParams(moveable, e, {});\r\n        triggerEvent(moveable, \"onScaleEnd\", scaleEndParam);\r\n        return scaleEndParam;\r\n    },\r\n    dragGroupControlCondition: directionCondition,\r\n    dragGroupControlStart: function (moveable, e) {\r\n        var datas = e.datas;\r\n        var params = this.dragControlStart(moveable, e);\r\n        if (!params) {\r\n            return false;\r\n        }\r\n        var originalEvents = fillChildEvents(moveable, \"resizable\", e);\r\n        datas.moveableScale = moveable.scale;\r\n        var events = triggerChildAbles(moveable, this, \"dragControlStart\", e, function (child, ev) {\r\n            return startChildDist(moveable, child, datas, ev);\r\n        });\r\n        var setFixedDirection = function (fixedDirection) {\r\n            params.setFixedDirection(fixedDirection);\r\n            events.forEach(function (ev, i) {\r\n                ev.setFixedDirection(fixedDirection);\r\n                startChildDist(moveable, ev.moveable, datas, originalEvents[i]);\r\n            });\r\n        };\r\n        datas.setFixedDirection = setFixedDirection;\r\n        var nextParams = __assign(__assign({}, params), { targets: moveable.props.targets, events: events, setFixedDirection: setFixedDirection });\r\n        var result = triggerEvent(moveable, \"onScaleGroupStart\", nextParams);\r\n        datas.isScale = result !== false;\r\n        return datas.isScale ? nextParams : false;\r\n    },\r\n    dragGroupControl: function (moveable, e) {\r\n        var datas = e.datas;\r\n        if (!datas.isScale) {\r\n            return;\r\n        }\r\n        catchEvent(moveable, \"onBeforeScale\", function (parentEvent) {\r\n            triggerEvent(moveable, \"onBeforeScaleGroup\", fillParams(moveable, e, __assign(__assign({}, parentEvent), { targets: moveable.props.targets }), true));\r\n        });\r\n        var params = this.dragControl(moveable, e);\r\n        if (!params) {\r\n            return;\r\n        }\r\n        var dist = params.dist;\r\n        var moveableScale = datas.moveableScale;\r\n        moveable.scale = [\r\n            dist[0] * moveableScale[0],\r\n            dist[1] * moveableScale[1],\r\n        ];\r\n        var keepRatio = moveable.props.keepRatio;\r\n        var fixedPosition = datas.fixedPosition;\r\n        var events = triggerChildAbles(moveable, this, \"dragControl\", e, function (_, ev) {\r\n            var _a = __read((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createRotateMatrix)(moveable.rotation / 180 * Math.PI, 3), [\r\n                ev.datas.originalX * dist[0],\r\n                ev.datas.originalY * dist[1],\r\n                1,\r\n            ], 3), 2), clientX = _a[0], clientY = _a[1];\r\n            return __assign(__assign({}, ev), { parentDist: null, parentScale: dist, parentKeepRatio: keepRatio, \r\n                // recalculate child fixed position for parent group's dragging.\r\n                dragClient: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(fixedPosition, [clientX, clientY]) });\r\n        });\r\n        var nextParams = __assign({ targets: moveable.props.targets, events: events }, params);\r\n        triggerEvent(moveable, \"onScaleGroup\", nextParams);\r\n        return nextParams;\r\n    },\r\n    dragGroupControlEnd: function (moveable, e) {\r\n        var isDrag = e.isDrag, datas = e.datas;\r\n        if (!datas.isScale) {\r\n            return;\r\n        }\r\n        this.dragControlEnd(moveable, e);\r\n        var events = triggerChildAbles(moveable, this, \"dragControlEnd\", e);\r\n        var nextParams = fillEndParams(moveable, e, {\r\n            targets: moveable.props.targets,\r\n            events: events,\r\n        });\r\n        triggerEvent(moveable, \"onScaleGroupEnd\", nextParams);\r\n        return isDrag;\r\n    },\r\n    /**\r\n     * @method Moveable.Scalable#request\r\n     * @param {Moveable.Scalable.ScalableRequestParam} e - the Scalable's request parameter\r\n     * @return {Moveable.Requester} Moveable Requester\r\n     * @example\r\n\n     * // Instantly Request (requestStart - request - requestEnd)\r\n     * moveable.request(\"scalable\", { deltaWidth: 10, deltaHeight: 10 }, true);\r\n     *\r\n     * // requestStart\r\n     * const requester = moveable.request(\"scalable\");\r\n     *\r\n     * // request\r\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\r\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\r\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\r\n     *\r\n     * // requestEnd\r\n     * requester.requestEnd();\r\n     */\r\n    request: function () {\r\n        var datas = {};\r\n        var distWidth = 0;\r\n        var distHeight = 0;\r\n        var useSnap = false;\r\n        return {\r\n            isControl: true,\r\n            requestStart: function (e) {\r\n                useSnap = e.useSnap;\r\n                return {\r\n                    datas: datas,\r\n                    parentDirection: e.direction || [1, 1],\r\n                    useSnap: useSnap,\r\n                };\r\n            },\r\n            request: function (e) {\r\n                distWidth += e.deltaWidth;\r\n                distHeight += e.deltaHeight;\r\n                return {\r\n                    datas: datas,\r\n                    parentDist: [distWidth, distHeight],\r\n                    parentKeepRatio: e.keepRatio,\r\n                    useSnap: useSnap,\r\n                };\r\n            },\r\n            requestEnd: function () {\r\n                return { datas: datas, isDrag: true, useSnap: useSnap };\r\n            },\r\n        };\r\n    },\r\n};\r\n/**\r\n * Whether or not target can scaled.\r\n *\r\n * @name Moveable.Scalable#scalable\r\n * @default false\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.scalable = true;\r\n */\r\n/**\r\n * throttle of scaleX, scaleY when scale.\r\n * @name Moveable.Scalable#throttleScale\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.throttleScale = 0.1;\r\n */\r\n/**\r\n * Set directions to show the control box. (default: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"])\r\n * @name Moveable.Scalable#renderDirections\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     scalable: true,\r\n *   renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\r\n * });\r\n *\r\n * moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\r\n */\r\n/**\r\n * When resize or scale, keeps a ratio of the width, height. (default: false)\r\n * @name Moveable.Scalable#keepRatio\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     scalable: true,\r\n * });\r\n *\r\n * moveable.keepRatio = true;\r\n */\r\n/**\r\n * When the scale starts, the scaleStart event is called.\r\n * @memberof Moveable.Scalable\r\n * @event scaleStart\r\n * @param {Moveable.Scalable.OnScaleStart} - Parameters for the scaleStart event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { scalable: true });\r\n * moveable.on(\"scaleStart\", ({ target }) => {\r\n *     console.log(target);\r\n * });\r\n */\r\n/**\r\n * When scaling, `beforeScale` is called before `scale` occurs. In `beforeScale`, you can get and set the pre-value before scaling.\r\n * @memberof Moveable.Scalable\r\n * @event beforeScale\r\n * @param {Moveable.Scalable.OnBeforeScale} - Parameters for the `beforeScale` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { scalable: true });\r\n * moveable.on(\"beforeScale\", ({ setFixedDirection }) => {\r\n *     if (shiftKey) {\r\n *        setFixedDirection([0, 0]);\r\n *     }\r\n * });\r\n * moveable.on(\"scale\", ({ target, transform, dist }) => {\r\n *     target.style.transform = transform;\r\n * });\r\n */\r\n/**\r\n * When scaling, the `scale` event is called.\r\n * @memberof Moveable.Scalable\r\n * @event scale\r\n * @param {Moveable.Scalable.OnScale} - Parameters for the `scale` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { scalable: true });\r\n * moveable.on(\"scale\", ({ target, transform, dist }) => {\r\n *     target.style.transform = transform;\r\n * });\r\n */\r\n/**\r\n * When the scale finishes, the `scaleEnd` event is called.\r\n * @memberof Moveable.Scalable\r\n * @event scaleEnd\r\n * @param {Moveable.Scalable.OnScaleEnd} - Parameters for the `scaleEnd` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { scalable: true });\r\n * moveable.on(\"scaleEnd\", ({ target, isDrag }) => {\r\n *     console.log(target, isDrag);\r\n * });\r\n */\r\n/**\r\n* When the group scale starts, the `scaleGroupStart` event is called.\r\n* @memberof Moveable.Scalable\r\n* @event scaleGroupStart\r\n* @param {Moveable.Scalable.OnScaleGroupStart} - Parameters for the `scaleGroupStart` event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n*     scalable: true\r\n* });\r\n* moveable.on(\"scaleGroupStart\", ({ targets }) => {\r\n*     console.log(\"onScaleGroupStart\", targets);\r\n* });\r\n*/\r\n/**\r\n* When the group scale, the `scaleGroup` event is called.\r\n* @memberof Moveable.Scalable\r\n* @event scaleGroup\r\n* @param {Moveable.Scalable.OnScaleGroup} - Parameters for the `scaleGroup` event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n*     scalable: true\r\n* });\r\n* moveable.on(\"scaleGroup\", ({ targets, events }) => {\r\n*     console.log(\"onScaleGroup\", targets);\r\n*     events.forEach(ev => {\r\n*         const target = ev.target;\r\n*         // ev.drag is a drag event that occurs when the group scale.\r\n*         const left = ev.drag.beforeDist[0];\r\n*         const top = ev.drag.beforeDist[1];\r\n*         const scaleX = ev.scale[0];\r\n*         const scaleY = ev.scale[1];\r\n*     });\r\n* });\r\n*/\r\n/**\r\n * When the group scale finishes, the `scaleGroupEnd` event is called.\r\n * @memberof Moveable.Scalable\r\n * @event scaleGroupEnd\r\n * @param {Moveable.Scalable.OnScaleGroupEnd} - Parameters for the `scaleGroupEnd` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n *     scalable: true\r\n * });\r\n * moveable.on(\"scaleGroupEnd\", ({ targets, isDrag }) => {\r\n *     console.log(\"onScaleGroupEnd\", targets, isDrag);\r\n * });\r\n */\n\nfunction getMiddleLinePos(pos1, pos2) {\r\n    return pos1.map(function (pos, i) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.dot)(pos, pos2[i], 1, 2); });\r\n}\r\nfunction getTriangleRad(pos1, pos2, pos3) {\r\n    // pos1 Rad\r\n    var rad1 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(pos1, pos2);\r\n    var rad2 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(pos1, pos3);\r\n    var rad = rad2 - rad1;\r\n    return rad >= 0 ? rad : rad + 2 * Math.PI;\r\n}\r\nfunction isValidPos(poses1, poses2) {\r\n    var rad1 = getTriangleRad(poses1[0], poses1[1], poses1[2]);\r\n    var rad2 = getTriangleRad(poses2[0], poses2[1], poses2[2]);\r\n    var pi = Math.PI;\r\n    if ((rad1 >= pi && rad2 <= pi) || (rad1 <= pi && rad2 >= pi)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @namespace Moveable.Warpable\r\n * @description Warpable indicates whether the target can be warped(distorted, bented).\r\n */\r\nvar Warpable = {\r\n    name: \"warpable\",\r\n    ableGroup: \"size\",\r\n    props: [\r\n        \"warpable\",\r\n        \"renderDirections\",\r\n        \"edge\",\r\n        \"displayAroundControls\",\r\n    ],\r\n    events: [\r\n        \"warpStart\",\r\n        \"warp\",\r\n        \"warpEnd\",\r\n    ],\r\n    viewClassName: getDirectionViewClassName(\"warpable\"),\r\n    render: function (moveable, React) {\r\n        var _a = moveable.props, resizable = _a.resizable, scalable = _a.scalable, warpable = _a.warpable, zoom = _a.zoom;\r\n        if (resizable || scalable || !warpable) {\r\n            return [];\r\n        }\r\n        var _b = moveable.state, pos1 = _b.pos1, pos2 = _b.pos2, pos3 = _b.pos3, pos4 = _b.pos4;\r\n        var linePosFrom1 = getMiddleLinePos(pos1, pos2);\r\n        var linePosFrom2 = getMiddleLinePos(pos2, pos1);\r\n        var linePosFrom3 = getMiddleLinePos(pos1, pos3);\r\n        var linePosFrom4 = getMiddleLinePos(pos3, pos1);\r\n        var linePosTo1 = getMiddleLinePos(pos3, pos4);\r\n        var linePosTo2 = getMiddleLinePos(pos4, pos3);\r\n        var linePosTo3 = getMiddleLinePos(pos2, pos4);\r\n        var linePosTo4 = getMiddleLinePos(pos4, pos2);\r\n        return __spreadArray([\r\n            React.createElement(\"div\", { className: prefix(\"line\"), key: \"middeLine1\", style: getLineStyle(linePosFrom1, linePosTo1, zoom) }),\r\n            React.createElement(\"div\", { className: prefix(\"line\"), key: \"middeLine2\", style: getLineStyle(linePosFrom2, linePosTo2, zoom) }),\r\n            React.createElement(\"div\", { className: prefix(\"line\"), key: \"middeLine3\", style: getLineStyle(linePosFrom3, linePosTo3, zoom) }),\r\n            React.createElement(\"div\", { className: prefix(\"line\"), key: \"middeLine4\", style: getLineStyle(linePosFrom4, linePosTo4, zoom) })\r\n        ], __read(renderAllDirections(moveable, \"warpable\", React)), false);\r\n    },\r\n    dragControlCondition: function (moveable, e) {\r\n        if (e.isRequest) {\r\n            return false;\r\n        }\r\n        var target = e.inputEvent.target;\r\n        return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"direction\")) && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"warpable\"));\r\n    },\r\n    dragControlStart: function (moveable, e) {\r\n        var datas = e.datas, inputEvent = e.inputEvent;\r\n        var target = moveable.props.target;\r\n        var inputTarget = inputEvent.target;\r\n        var direction = getDirection(inputTarget, datas);\r\n        if (!direction || !target) {\r\n            return false;\r\n        }\r\n        var state = moveable.state;\r\n        var transformOrigin = state.transformOrigin, is3d = state.is3d, targetTransform = state.targetTransform, targetMatrix = state.targetMatrix, width = state.width, height = state.height, left = state.left, top = state.top;\r\n        datas.datas = {};\r\n        datas.targetTransform = targetTransform;\r\n        datas.warpTargetMatrix = is3d ? targetMatrix : (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertDimension)(targetMatrix, 3, 4);\r\n        datas.targetInverseMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.ignoreDimension)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.invert)(datas.warpTargetMatrix, 4), 3, 4);\r\n        datas.direction = direction;\r\n        datas.left = left;\r\n        datas.top = top;\r\n        datas.poses = [\r\n            [0, 0],\r\n            [width, 0],\r\n            [0, height],\r\n            [width, height],\r\n        ].map(function (p) { return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(p, transformOrigin); });\r\n        datas.nextPoses = datas.poses.map(function (_a) {\r\n            var _b = __read(_a, 2), x = _b[0], y = _b[1];\r\n            return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.calculate)(datas.warpTargetMatrix, [x, y, 0, 1], 4);\r\n        });\r\n        datas.startValue = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(4);\r\n        datas.prevMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(4);\r\n        datas.absolutePoses = getAbsolutePosesByState(state);\r\n        datas.posIndexes = getPosIndexesByDirection(direction);\r\n        setDragStart(moveable, e);\r\n        setDefaultTransformIndex(moveable, e, \"matrix3d\");\r\n        state.snapRenderInfo = {\r\n            request: e.isRequest,\r\n            direction: direction,\r\n        };\r\n        var params = fillParams(moveable, e, __assign({ set: function (matrix) {\r\n                datas.startValue = matrix;\r\n            } }, fillTransformStartEvent(moveable, e)));\r\n        var result = triggerEvent(moveable, \"onWarpStart\", params);\r\n        if (result !== false) {\r\n            datas.isWarp = true;\r\n        }\r\n        return datas.isWarp;\r\n    },\r\n    dragControl: function (moveable, e) {\r\n        var datas = e.datas, isRequest = e.isRequest;\r\n        var distX = e.distX, distY = e.distY;\r\n        var targetInverseMatrix = datas.targetInverseMatrix, prevMatrix = datas.prevMatrix, isWarp = datas.isWarp, startValue = datas.startValue, poses = datas.poses, posIndexes = datas.posIndexes, absolutePoses = datas.absolutePoses;\r\n        if (!isWarp) {\r\n            return false;\r\n        }\r\n        resolveTransformEvent(moveable, e, \"matrix3d\");\r\n        if (hasGuidelines(moveable, \"warpable\")) {\r\n            var selectedPoses = posIndexes.map(function (index) { return absolutePoses[index]; });\r\n            if (selectedPoses.length > 1) {\r\n                selectedPoses.push([\r\n                    (selectedPoses[0][0] + selectedPoses[1][0]) / 2,\r\n                    (selectedPoses[0][1] + selectedPoses[1][1]) / 2,\r\n                ]);\r\n            }\r\n            var _a = checkMoveableSnapBounds(moveable, isRequest, {\r\n                horizontal: selectedPoses.map(function (pos) { return pos[1] + distY; }),\r\n                vertical: selectedPoses.map(function (pos) { return pos[0] + distX; }),\r\n            }), horizontalSnapInfo = _a.horizontal, verticalSnapInfo = _a.vertical;\r\n            distY -= horizontalSnapInfo.offset;\r\n            distX -= verticalSnapInfo.offset;\r\n        }\r\n        var dist = getDragDist({ datas: datas, distX: distX, distY: distY }, true);\r\n        var nextPoses = datas.nextPoses.slice();\r\n        posIndexes.forEach(function (index) {\r\n            nextPoses[index] = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(nextPoses[index], dist);\r\n        });\r\n        if (!NEARBY_POS.every(function (nearByPoses) { return isValidPos(nearByPoses.map(function (i) { return poses[i]; }), nearByPoses.map(function (i) { return nextPoses[i]; })); })) {\r\n            return false;\r\n        }\r\n        var h = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createWarpMatrix)(poses[0], poses[2], poses[1], poses[3], nextPoses[0], nextPoses[2], nextPoses[1], nextPoses[3]);\r\n        if (!h.length) {\r\n            return false;\r\n        }\r\n        // B * A * M\r\n        var afterMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(targetInverseMatrix, h, 4);\r\n        // B * M * A\r\n        var matrix = getTransfromMatrix(datas, afterMatrix, true);\r\n        var delta = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.invert)(prevMatrix, 4), matrix, 4);\r\n        datas.prevMatrix = matrix;\r\n        var totalMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(startValue, matrix, 4);\r\n        var nextTransform = convertTransformFormat(datas, \"matrix3d(\".concat(totalMatrix.join(\", \"), \")\"), \"matrix3d(\".concat(matrix.join(\", \"), \")\"));\r\n        fillOriginalTransform(e, nextTransform);\r\n        triggerEvent(moveable, \"onWarp\", fillParams(moveable, e, __assign({ delta: delta, matrix: totalMatrix, dist: matrix, multiply: _scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply, transform: nextTransform }, fillCSSObject({\r\n            transform: nextTransform,\r\n        }, e))));\r\n        return true;\r\n    },\r\n    dragControlEnd: function (moveable, e) {\r\n        var datas = e.datas, isDrag = e.isDrag;\r\n        if (!datas.isWarp) {\r\n            return false;\r\n        }\r\n        datas.isWarp = false;\r\n        triggerEvent(moveable, \"onWarpEnd\", fillEndParams(moveable, e, {}));\r\n        return isDrag;\r\n    },\r\n};\r\n/**\r\n * Whether or not target can be warped. (default: false)\r\n * @name Moveable.Warpable#warpable\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.warpable = true;\r\n */\r\n/**\r\n* Set directions to show the control box. (default: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"])\r\n* @name Moveable.Warpable#renderDirections\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     warpable: true,\r\n*     renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\r\n* });\r\n*\r\n* moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\r\n*/\r\n/**\r\n* When the warp starts, the warpStart event is called.\r\n* @memberof Moveable.Warpable\r\n* @event warpStart\r\n* @param {Moveable.Warpable.OnWarpStart} - Parameters for the warpStart event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, { warpable: true });\r\n* moveable.on(\"warpStart\", ({ target }) => {\r\n*     console.log(target);\r\n* });\r\n*/\r\n/**\r\n * When warping, the warp event is called.\r\n * @memberof Moveable.Warpable\r\n * @event warp\r\n * @param {Moveable.Warpable.OnWarp} - Parameters for the warp event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n * let matrix = [\r\n *  1, 0, 0, 0,\r\n *  0, 1, 0, 0,\r\n *  0, 0, 1, 0,\r\n *  0, 0, 0, 1,\r\n * ];\r\n * const moveable = new Moveable(document.body, { warpable: true });\r\n * moveable.on(\"warp\", ({ target, transform, delta, multiply }) => {\r\n *    // target.style.transform = transform;\r\n *    matrix = multiply(matrix, delta);\r\n *    target.style.transform = `matrix3d(${matrix.join(\",\")})`;\r\n * });\r\n */\r\n/**\r\n * When the warp finishes, the warpEnd event is called.\r\n * @memberof Moveable.Warpable\r\n * @event warpEnd\r\n * @param {Moveable.Warpable.OnWarpEnd} - Parameters for the warpEnd event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, { warpable: true });\r\n * moveable.on(\"warpEnd\", ({ target, isDrag }) => {\r\n *     console.log(target, isDrag);\r\n * });\r\n */\n\nvar AREA_PIECES = /*#__PURE__*/ prefix(\"area-pieces\");\r\nvar AREA_PIECE = /*#__PURE__*/ prefix(\"area-piece\");\r\nvar AVOID = /*#__PURE__*/ prefix(\"avoid\");\r\nvar VIEW_DRAGGING = prefix(\"view-dragging\");\n\nfunction restoreStyle(moveable) {\r\n    var el = moveable.areaElement;\r\n    if (!el) {\r\n        return;\r\n    }\r\n    var _a = moveable.state, width = _a.width, height = _a.height;\r\n    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.removeClass)(el, AVOID);\r\n    el.style.cssText += \"left: 0px; top: 0px; width: \".concat(width, \"px; height: \").concat(height, \"px\");\r\n}\r\nfunction renderPieces(React) {\r\n    return (React.createElement(\"div\", { key: \"area_pieces\", className: AREA_PIECES },\r\n        React.createElement(\"div\", { className: AREA_PIECE }),\r\n        React.createElement(\"div\", { className: AREA_PIECE }),\r\n        React.createElement(\"div\", { className: AREA_PIECE }),\r\n        React.createElement(\"div\", { className: AREA_PIECE })));\r\n}\r\nvar DragArea = {\r\n    name: \"dragArea\",\r\n    props: [\r\n        \"dragArea\",\r\n        \"passDragArea\",\r\n    ],\r\n    events: [\r\n        \"click\",\r\n        \"clickGroup\",\r\n    ],\r\n    render: function (moveable, React) {\r\n        var _a = moveable.props, target = _a.target, dragArea = _a.dragArea, groupable = _a.groupable, passDragArea = _a.passDragArea;\r\n        var _b = moveable.getState(), width = _b.width, height = _b.height, renderPoses = _b.renderPoses;\r\n        var className = passDragArea ? prefix(\"area\", \"pass\") : prefix(\"area\");\r\n        if (groupable) {\r\n            return [\r\n                React.createElement(\"div\", { key: \"area\", ref: (0,framework_utils__WEBPACK_IMPORTED_MODULE_6__.ref)(moveable, \"areaElement\"), className: className }),\r\n                renderPieces(React),\r\n            ];\r\n        }\r\n        if (!target || !dragArea) {\r\n            return [];\r\n        }\r\n        var h = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createWarpMatrix)([0, 0], [width, 0], [0, height], [width, height], renderPoses[0], renderPoses[1], renderPoses[2], renderPoses[3]);\r\n        var transform = h.length ? makeMatrixCSS(h, true) : \"none\";\r\n        return [\r\n            React.createElement(\"div\", { key: \"area\", ref: (0,framework_utils__WEBPACK_IMPORTED_MODULE_6__.ref)(moveable, \"areaElement\"), className: className, style: {\r\n                    top: \"0px\",\r\n                    left: \"0px\",\r\n                    width: \"\".concat(width, \"px\"),\r\n                    height: \"\".concat(height, \"px\"),\r\n                    transformOrigin: \"0 0\",\r\n                    transform: transform,\r\n                } }),\r\n            renderPieces(React),\r\n        ];\r\n    },\r\n    dragStart: function (moveable, _a) {\r\n        var datas = _a.datas, clientX = _a.clientX, clientY = _a.clientY, inputEvent = _a.inputEvent;\r\n        if (!inputEvent) {\r\n            return false;\r\n        }\r\n        datas.isDragArea = false;\r\n        var areaElement = moveable.areaElement;\r\n        var state = moveable.state;\r\n        var moveableClientRect = state.moveableClientRect, renderPoses = state.renderPoses, rootMatrix = state.rootMatrix, is3d = state.is3d;\r\n        var left = moveableClientRect.left, top = moveableClientRect.top;\r\n        var _b = getRect(renderPoses), relativeLeft = _b.left, relativeTop = _b.top, width = _b.width, height = _b.height;\r\n        var n = is3d ? 4 : 3;\r\n        var _c = __read(calculateInversePosition(rootMatrix, [clientX - left, clientY - top], n), 2), posX = _c[0], posY = _c[1];\r\n        posX -= relativeLeft;\r\n        posY -= relativeTop;\r\n        var rects = [\r\n            { left: relativeLeft, top: relativeTop, width: width, height: posY - 10 },\r\n            { left: relativeLeft, top: relativeTop, width: posX - 10, height: height },\r\n            { left: relativeLeft, top: relativeTop + posY + 10, width: width, height: height - posY - 10 },\r\n            { left: relativeLeft + posX + 10, top: relativeTop, width: width - posX - 10, height: height },\r\n        ];\r\n        var children = [].slice.call(areaElement.nextElementSibling.children);\r\n        rects.forEach(function (rect, i) {\r\n            children[i].style.cssText\r\n                = \"left: \".concat(rect.left, \"px;top: \").concat(rect.top, \"px; width: \").concat(rect.width, \"px; height: \").concat(rect.height, \"px;\");\r\n        });\r\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.addClass)(areaElement, AVOID);\r\n        state.disableNativeEvent = true;\r\n        return;\r\n    },\r\n    drag: function (moveable, _a) {\r\n        var datas = _a.datas, inputEvent = _a.inputEvent;\r\n        this.enableNativeEvent(moveable);\r\n        if (!inputEvent) {\r\n            return false;\r\n        }\r\n        if (!datas.isDragArea) {\r\n            datas.isDragArea = true;\r\n            restoreStyle(moveable);\r\n        }\r\n    },\r\n    dragEnd: function (moveable, e) {\r\n        this.enableNativeEvent(moveable);\r\n        var inputEvent = e.inputEvent, datas = e.datas;\r\n        if (!inputEvent) {\r\n            return false;\r\n        }\r\n        if (!datas.isDragArea) {\r\n            restoreStyle(moveable);\r\n        }\r\n    },\r\n    dragGroupStart: function (moveable, e) {\r\n        return this.dragStart(moveable, e);\r\n    },\r\n    dragGroup: function (moveable, e) {\r\n        return this.drag(moveable, e);\r\n    },\r\n    dragGroupEnd: function (moveable, e) {\r\n        return this.dragEnd(moveable, e);\r\n    },\r\n    unset: function (moveable) {\r\n        restoreStyle(moveable);\r\n        moveable.state.disableNativeEvent = false;\r\n    },\r\n    enableNativeEvent: function (moveable) {\r\n        var state = moveable.state;\r\n        if (state.disableNativeEvent) {\r\n            (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.requestAnimationFrame)(function () {\r\n                state.disableNativeEvent = false;\r\n            });\r\n        }\r\n    },\r\n};\r\n/**\r\n * Add an event to the moveable area instead of the target for stopPropagation. (default: false, true in group)\r\n * @name Moveable#dragArea\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *  dragArea: false,\r\n * });\r\n */\r\n/**\r\n * Set `pointerEvents: none;` css to pass events in dragArea. (default: false)\r\n * @name Moveable#passDragArea\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *  dragArea: false,\r\n * });\r\n */\n\nvar Origin = makeAble(\"origin\", {\r\n    props: [\"origin\", \"svgOrigin\"],\r\n    render: function (moveable, React) {\r\n        var _a = moveable.props, zoom = _a.zoom, svgOrigin = _a.svgOrigin, groupable = _a.groupable;\r\n        var _b = moveable.getState(), beforeOrigin = _b.beforeOrigin, rotation = _b.rotation, svg = _b.svg, allMatrix = _b.allMatrix, is3d = _b.is3d, left = _b.left, top = _b.top, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\r\n        var originStyle;\r\n        if (!groupable && svg && svgOrigin) {\r\n            var _c = __read(convertTransformOriginArray(svgOrigin, offsetWidth, offsetHeight), 2), originX = _c[0], originY = _c[1];\r\n            var n = is3d ? 4 : 3;\r\n            var result = calculatePosition(allMatrix, [originX, originY], n);\r\n            originStyle = getControlTransform(rotation, zoom, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(result, [left, top]));\r\n        }\r\n        else {\r\n            originStyle = getControlTransform(rotation, zoom, beforeOrigin);\r\n        }\r\n        return [\r\n            React.createElement(\"div\", { className: prefix(\"control\", \"origin\"), style: originStyle, key: \"beforeOrigin\" }),\r\n        ];\r\n    },\r\n});\r\n/**\r\n * Whether or not the origin controlbox will be visible or not (default: true)\r\n * @name Moveable#origin\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n *\r\n * moveable.origin = true;\r\n */\n\nfunction getDefaultScrollPosition(e) {\r\n    var scrollContainer = e.scrollContainer;\r\n    return [\r\n        scrollContainer.scrollLeft,\r\n        scrollContainer.scrollTop,\r\n    ];\r\n}\r\n/**\r\n * @namespace Moveable.Scrollable\r\n * @description Whether or not target can be scrolled to the scroll container (default: false)\r\n */\r\nvar Scrollable = {\r\n    name: \"scrollable\",\r\n    canPinch: true,\r\n    props: [\r\n        \"scrollable\",\r\n        \"scrollContainer\",\r\n        \"scrollThreshold\",\r\n        \"scrollThrottleTime\",\r\n        \"getScrollPosition\",\r\n        \"scrollOptions\",\r\n    ],\r\n    events: [\r\n        \"scroll\",\r\n        \"scrollGroup\",\r\n    ],\r\n    dragRelation: \"strong\",\r\n    dragStart: function (moveable, e) {\r\n        var props = moveable.props;\r\n        var _a = props.scrollContainer, scrollContainer = _a === void 0 ? moveable.getContainer() : _a, scrollOptions = props.scrollOptions;\r\n        var dragScroll = new _scena_dragscroll__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\r\n        var scrollContainerElement = getRefTarget(scrollContainer, true);\r\n        e.datas.dragScroll = dragScroll;\r\n        moveable.state.dragScroll = dragScroll;\r\n        var gestoName = e.isControl ? \"controlGesto\" : \"targetGesto\";\r\n        var targets = e.targets;\r\n        dragScroll.on(\"scroll\", function (_a) {\r\n            var container = _a.container, direction = _a.direction;\r\n            var params = fillParams(moveable, e, {\r\n                scrollContainer: container,\r\n                direction: direction,\r\n            });\r\n            var eventName = targets ? \"onScrollGroup\" : \"onScroll\";\r\n            if (targets) {\r\n                params.targets = targets;\r\n            }\r\n            triggerEvent(moveable, eventName, params);\r\n        }).on(\"move\", function (_a) {\r\n            var offsetX = _a.offsetX, offsetY = _a.offsetY, inputEvent = _a.inputEvent;\r\n            moveable[gestoName].scrollBy(offsetX, offsetY, inputEvent.inputEvent, false);\r\n        }).on(\"scrollDrag\", function (_a) {\r\n            var next = _a.next;\r\n            next(moveable[gestoName].getCurrentEvent());\r\n        });\r\n        dragScroll.dragStart(e, __assign({ container: scrollContainerElement }, scrollOptions));\r\n    },\r\n    checkScroll: function (moveable, e) {\r\n        var dragScroll = e.datas.dragScroll;\r\n        if (!dragScroll) {\r\n            return;\r\n        }\r\n        var _a = moveable.props, _b = _a.scrollContainer, scrollContainer = _b === void 0 ? moveable.getContainer() : _b, _c = _a.scrollThreshold, scrollThreshold = _c === void 0 ? 0 : _c, _d = _a.scrollThrottleTime, scrollThrottleTime = _d === void 0 ? 0 : _d, _e = _a.getScrollPosition, getScrollPosition = _e === void 0 ? getDefaultScrollPosition : _e, scrollOptions = _a.scrollOptions;\r\n        dragScroll.drag(e, __assign({ container: scrollContainer, threshold: scrollThreshold, throttleTime: scrollThrottleTime, getScrollPosition: function (ev) {\r\n                return getScrollPosition({ scrollContainer: ev.container, direction: ev.direction });\r\n            } }, scrollOptions));\r\n        return true;\r\n    },\r\n    drag: function (moveable, e) {\r\n        return this.checkScroll(moveable, e);\r\n    },\r\n    dragEnd: function (moveable, e) {\r\n        e.datas.dragScroll.dragEnd();\r\n        e.datas.dragScroll = null;\r\n    },\r\n    dragControlStart: function (moveable, e) {\r\n        return this.dragStart(moveable, __assign(__assign({}, e), { isControl: true }));\r\n    },\r\n    dragControl: function (moveable, e) {\r\n        return this.drag(moveable, e);\r\n    },\r\n    dragControlEnd: function (moveable, e) {\r\n        return this.dragEnd(moveable, e);\r\n    },\r\n    dragGroupStart: function (moveable, e) {\r\n        return this.dragStart(moveable, __assign(__assign({}, e), { targets: moveable.props.targets }));\r\n    },\r\n    dragGroup: function (moveable, e) {\r\n        return this.drag(moveable, __assign(__assign({}, e), { targets: moveable.props.targets }));\r\n    },\r\n    dragGroupEnd: function (moveable, e) {\r\n        return this.dragEnd(moveable, __assign(__assign({}, e), { targets: moveable.props.targets }));\r\n    },\r\n    dragGroupControlStart: function (moveable, e) {\r\n        return this.dragStart(moveable, __assign(__assign({}, e), { targets: moveable.props.targets, isControl: true }));\r\n    },\r\n    dragGroupControl: function (moveable, e) {\r\n        return this.drag(moveable, __assign(__assign({}, e), { targets: moveable.props.targets }));\r\n    },\r\n    dragGroupControEnd: function (moveable, e) {\r\n        return this.dragEnd(moveable, __assign(__assign({}, e), { targets: moveable.props.targets }));\r\n    },\r\n    unset: function (moveable) {\r\n        var _a;\r\n        var state = moveable.state;\r\n        (_a = state.dragScroll) === null || _a === void 0 ? void 0 : _a.dragEnd();\r\n        state.dragScroll = null;\r\n    },\r\n};\r\n/**\r\n * When the drag cursor leaves the scrollContainer, the `scroll` event occur to scroll.\r\n * @memberof Moveable.Scrollable\r\n * @event scroll\r\n * @param {Moveable.Scrollable.OnScroll} - Parameters for the `scroll` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: document.querySelector(\".target\"),\r\n * });\r\n * moveable.on(\"scroll\", ({ scrollContainer, direction }) => {\r\n *   scrollContainer.scrollLeft += direction[0] * 10;\r\n *   scrollContainer.scrollTop += direction[1] * 10;\r\n * });\r\n */\r\n/**\r\n * When the drag cursor leaves the scrollContainer, the `scrollGroup` event occur to scroll in group.\r\n * @memberof Moveable.Scrollable\r\n * @event scrollGroup\r\n * @param {Moveable.Scrollable.OnScrollGroup} - Parameters for the `scrollGroup` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n * });\r\n * moveable.on(\"scroll\", ({ scrollContainer, direction }) => {\r\n *   scrollContainer.scrollLeft += direction[0] * 10;\r\n *   scrollContainer.scrollTop += direction[1] * 10;\r\n * });\r\n */\n\nvar Default = {\r\n    name: \"\",\r\n    props: [\r\n        \"target\",\r\n        \"dragTargetSelf\",\r\n        \"dragTarget\",\r\n        \"dragContainer\",\r\n        \"container\",\r\n        \"warpSelf\",\r\n        \"rootContainer\",\r\n        \"useResizeObserver\",\r\n        \"useMutationObserver\",\r\n        \"zoom\",\r\n        \"dragFocusedInput\",\r\n        \"transformOrigin\",\r\n        \"ables\",\r\n        \"className\",\r\n        \"pinchThreshold\",\r\n        \"pinchOutside\",\r\n        \"triggerAblesSimultaneously\",\r\n        \"checkInput\",\r\n        \"cspNonce\",\r\n        \"translateZ\",\r\n        \"hideDefaultLines\",\r\n        \"props\",\r\n        \"flushSync\",\r\n        \"stopPropagation\",\r\n        \"preventClickEventOnDrag\",\r\n        \"preventClickDefault\",\r\n        \"viewContainer\",\r\n        \"persistData\",\r\n        \"useAccuratePosition\",\r\n        \"firstRenderState\",\r\n        \"linePadding\",\r\n        \"controlPadding\",\r\n        \"preventDefault\",\r\n        \"preventRightClick\",\r\n        \"preventWheelClick\",\r\n        \"requestStyles\",\r\n    ],\r\n    events: [\r\n        \"changeTargets\",\r\n    ],\r\n};\n\nvar Padding = makeAble(\"padding\", {\r\n    props: [\"padding\"],\r\n    render: function (moveable, React) {\r\n        var props = moveable.props;\r\n        if (props.dragArea) {\r\n            return [];\r\n        }\r\n        var _a = getPaddingBox(props.padding || {}), left = _a.left, top = _a.top, right = _a.right, bottom = _a.bottom;\r\n        var _b = moveable.getState(), renderPoses = _b.renderPoses, pos1 = _b.pos1, pos2 = _b.pos2, pos3 = _b.pos3, pos4 = _b.pos4;\r\n        var poses = [pos1, pos2, pos3, pos4];\r\n        var paddingDirections = [];\r\n        if (left > 0) {\r\n            paddingDirections.push([0, 2]);\r\n        }\r\n        if (top > 0) {\r\n            paddingDirections.push([0, 1]);\r\n        }\r\n        if (right > 0) {\r\n            paddingDirections.push([1, 3]);\r\n        }\r\n        if (bottom > 0) {\r\n            paddingDirections.push([2, 3]);\r\n        }\r\n        return paddingDirections.map(function (_a, i) {\r\n            var _b = __read(_a, 2), dir1 = _b[0], dir2 = _b[1];\r\n            var paddingPos1 = poses[dir1];\r\n            var paddingPos2 = poses[dir2];\r\n            var paddingPos3 = renderPoses[dir1];\r\n            var paddingPos4 = renderPoses[dir2];\r\n            var h = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createWarpMatrix)([0, 0], [100, 0], [0, 100], [100, 100], paddingPos1, paddingPos2, paddingPos3, paddingPos4);\r\n            if (!h.length) {\r\n                return undefined;\r\n            }\r\n            return (React.createElement(\"div\", { key: \"padding\".concat(i), className: prefix(\"padding\"), style: {\r\n                    transform: makeMatrixCSS(h, true),\r\n                } }));\r\n        });\r\n    },\r\n});\r\n/**\r\n * Add padding around the target to increase the drag area.\r\n * @name Moveable#padding\r\n * @default null\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *  target: document.querySelector(\".target\"),\r\n *  padding: { left: 0, top: 0, right: 0, bottom: 0 },\r\n * });\r\n * moveable.padding = { left: 10, top: 10, right: 10, bottom: 10 },\r\n * moveable.updateRect();\r\n */\n\nvar RADIUS_DIRECTIONS = [\"nw\", \"ne\", \"se\", \"sw\"];\r\nfunction calculateRatio(values, size) {\r\n    var sumSize = values[0] + values[1];\r\n    var sumRatio = sumSize > size ? size / sumSize : 1;\r\n    values[0] *= sumRatio;\r\n    values[1] = size - values[1] * sumRatio;\r\n    return values;\r\n}\r\nvar HORIZONTAL_RADIUS_ORDER = [1, 2, 5, 6];\r\nvar VERTICAL_RADIUS_ORDER = [0, 3, 4, 7];\r\nvar HORIZONTAL_RADIUS_DIRECTIONS = [1, -1, -1, 1];\r\nvar VERTICAL_RADIUS_DIRECTIONS = [1, 1, -1, -1];\r\nfunction getRadiusStyles(nextPoses, isRelative, width, height, left, top, right, bottom) {\r\n    if (left === void 0) { left = 0; }\r\n    if (top === void 0) { top = 0; }\r\n    if (right === void 0) { right = width; }\r\n    if (bottom === void 0) { bottom = height; }\r\n    var clipStyles = [];\r\n    var isVertical = false;\r\n    var radiusPoses = nextPoses.filter(function (pos) { return !pos.virtual; });\r\n    var raws = radiusPoses.map(function (posInfo) {\r\n        var horizontal = posInfo.horizontal, vertical = posInfo.vertical, pos = posInfo.pos;\r\n        if (vertical && !isVertical) {\r\n            isVertical = true;\r\n            clipStyles.push(\"/\");\r\n        }\r\n        if (isVertical) {\r\n            var rawPos = Math.max(0, vertical === 1 ? pos[1] - top : bottom - pos[1]);\r\n            clipStyles.push(convertCSSSize(rawPos, height, isRelative));\r\n            return rawPos;\r\n        }\r\n        else {\r\n            var rawPos = Math.max(0, horizontal === 1 ? pos[0] - left : right - pos[0]);\r\n            clipStyles.push(convertCSSSize(rawPos, width, isRelative));\r\n            return rawPos;\r\n        }\r\n    });\r\n    return {\r\n        radiusPoses: radiusPoses,\r\n        styles: clipStyles,\r\n        raws: raws,\r\n    };\r\n}\r\nfunction getRadiusRange(controlPoses) {\r\n    // [start, length]\r\n    var horizontalRange = [0, 0];\r\n    var verticalRange = [0, 0];\r\n    var length = controlPoses.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        var clipPose = controlPoses[i];\r\n        if (!clipPose.sub) {\r\n            continue;\r\n        }\r\n        if (clipPose.horizontal) {\r\n            if (horizontalRange[1] === 0) {\r\n                horizontalRange[0] = i;\r\n            }\r\n            horizontalRange[1] = i - horizontalRange[0] + 1;\r\n            verticalRange[0] = i + 1;\r\n        }\r\n        if (clipPose.vertical) {\r\n            if (verticalRange[1] === 0) {\r\n                verticalRange[0] = i;\r\n            }\r\n            verticalRange[1] = i - verticalRange[0] + 1;\r\n        }\r\n    }\r\n    return {\r\n        horizontalRange: horizontalRange,\r\n        verticalRange: verticalRange,\r\n    };\r\n}\r\nfunction getRadiusValues(values, width, height, left, top, minCounts, full) {\r\n    var _a, _b, _c, _d;\r\n    if (minCounts === void 0) { minCounts = [0, 0]; }\r\n    if (full === void 0) { full = false; }\r\n    var splitIndex = values.indexOf(\"/\");\r\n    var splitLength = (splitIndex > -1 ? values.slice(0, splitIndex) : values).length;\r\n    var horizontalValues = values.slice(0, splitLength);\r\n    var verticalValues = values.slice(splitLength + 1);\r\n    var horizontalValuesLength = horizontalValues.length;\r\n    var verticalValuesLength = verticalValues.length;\r\n    var hasVerticalValues = verticalValuesLength > 0;\r\n    var _e = __read(horizontalValues, 4), _f = _e[0], nwValue = _f === void 0 ? \"0px\" : _f, _g = _e[1], neValue = _g === void 0 ? nwValue : _g, _h = _e[2], seValue = _h === void 0 ? nwValue : _h, _j = _e[3], swValue = _j === void 0 ? neValue : _j;\r\n    var _k = __read(verticalValues, 4), _l = _k[0], wnValue = _l === void 0 ? nwValue : _l, _m = _k[1], enValue = _m === void 0 ? hasVerticalValues ? wnValue : neValue : _m, _o = _k[2], esValue = _o === void 0 ? hasVerticalValues ? wnValue : seValue : _o, _p = _k[3], wsValue = _p === void 0 ? hasVerticalValues ? enValue : swValue : _p;\r\n    var horizontalRawPoses = [nwValue, neValue, seValue, swValue].map(function (pos) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(pos, width); });\r\n    var verticalRawPoses = [wnValue, enValue, esValue, wsValue].map(function (pos) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(pos, height); });\r\n    var horizontalPoses = horizontalRawPoses.slice();\r\n    var verticalPoses = verticalRawPoses.slice();\r\n    _a = __read(calculateRatio([horizontalPoses[0], horizontalPoses[1]], width), 2), horizontalPoses[0] = _a[0], horizontalPoses[1] = _a[1];\r\n    _b = __read(calculateRatio([horizontalPoses[3], horizontalPoses[2]], width), 2), horizontalPoses[3] = _b[0], horizontalPoses[2] = _b[1];\r\n    _c = __read(calculateRatio([verticalPoses[0], verticalPoses[3]], height), 2), verticalPoses[0] = _c[0], verticalPoses[3] = _c[1];\r\n    _d = __read(calculateRatio([verticalPoses[1], verticalPoses[2]], height), 2), verticalPoses[1] = _d[0], verticalPoses[2] = _d[1];\r\n    var nextHorizontalPoses = full\r\n        ? horizontalPoses\r\n        : horizontalPoses.slice(0, Math.max(minCounts[0], horizontalValuesLength));\r\n    var nextVerticalPoses = full\r\n        ? verticalPoses\r\n        : verticalPoses.slice(0, Math.max(minCounts[1], verticalValuesLength));\r\n    return __spreadArray(__spreadArray([], __read(nextHorizontalPoses.map(function (pos, i) {\r\n        var direction = RADIUS_DIRECTIONS[i];\r\n        return {\r\n            virtual: i >= horizontalValuesLength,\r\n            horizontal: HORIZONTAL_RADIUS_DIRECTIONS[i],\r\n            vertical: 0,\r\n            pos: [left + pos, top + (VERTICAL_RADIUS_DIRECTIONS[i] === -1 ? height : 0)],\r\n            sub: true,\r\n            raw: horizontalRawPoses[i],\r\n            direction: direction,\r\n        };\r\n    })), false), __read(nextVerticalPoses.map(function (pos, i) {\r\n        var direction = RADIUS_DIRECTIONS[i];\r\n        return {\r\n            virtual: i >= verticalValuesLength,\r\n            horizontal: 0,\r\n            vertical: VERTICAL_RADIUS_DIRECTIONS[i],\r\n            pos: [left + (HORIZONTAL_RADIUS_DIRECTIONS[i] === -1 ? width : 0), top + pos],\r\n            sub: true,\r\n            raw: verticalRawPoses[i],\r\n            direction: direction,\r\n        };\r\n    })), false);\r\n}\r\nfunction removeRadiusPos(controlPoses, poses, index, startIndex, length) {\r\n    if (length === void 0) { length = poses.length; }\r\n    var _a = getRadiusRange(controlPoses.slice(startIndex)), horizontalRange = _a.horizontalRange, verticalRange = _a.verticalRange;\r\n    var radiuslIndex = index - startIndex;\r\n    var deleteCount = 0;\r\n    if (radiuslIndex === 0) {\r\n        deleteCount = length;\r\n    }\r\n    else if (radiuslIndex > 0 && radiuslIndex < horizontalRange[1]) {\r\n        deleteCount = horizontalRange[1] - radiuslIndex;\r\n    }\r\n    else if (radiuslIndex >= verticalRange[0]) {\r\n        deleteCount = verticalRange[0] + verticalRange[1] - radiuslIndex;\r\n    }\r\n    else {\r\n        return;\r\n    }\r\n    controlPoses.splice(index, deleteCount);\r\n    poses.splice(index, deleteCount);\r\n}\r\nfunction addRadiusPos(controlPoses, poses, startIndex, horizontalIndex, verticalIndex, distX, distY, right, bottom, left, top) {\r\n    if (left === void 0) { left = 0; }\r\n    if (top === void 0) { top = 0; }\r\n    var _a = getRadiusRange(controlPoses.slice(startIndex)), horizontalRange = _a.horizontalRange, verticalRange = _a.verticalRange;\r\n    if (horizontalIndex > -1) {\r\n        var radiusX = HORIZONTAL_RADIUS_DIRECTIONS[horizontalIndex] === 1\r\n            ? distX - left\r\n            : right - distX;\r\n        for (var i = horizontalRange[1]; i <= horizontalIndex; ++i) {\r\n            var y = VERTICAL_RADIUS_DIRECTIONS[i] === 1 ? top : bottom;\r\n            var x = 0;\r\n            if (horizontalIndex === i) {\r\n                x = distX;\r\n            }\r\n            else if (i === 0) {\r\n                x = left + radiusX;\r\n            }\r\n            else if (HORIZONTAL_RADIUS_DIRECTIONS[i] === -1) {\r\n                x = right - (poses[startIndex][0] - left);\r\n            }\r\n            controlPoses.splice(startIndex + i, 0, {\r\n                horizontal: HORIZONTAL_RADIUS_DIRECTIONS[i],\r\n                vertical: 0,\r\n                pos: [x, y],\r\n            });\r\n            poses.splice(startIndex + i, 0, [x, y]);\r\n            if (i === 0) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else if (verticalIndex > -1) {\r\n        var radiusY = VERTICAL_RADIUS_DIRECTIONS[verticalIndex] === 1\r\n            ? distY - top\r\n            : bottom - distY;\r\n        if (horizontalRange[1] === 0 && verticalRange[1] === 0) {\r\n            var pos = [\r\n                left + radiusY,\r\n                top,\r\n            ];\r\n            controlPoses.push({\r\n                horizontal: HORIZONTAL_RADIUS_DIRECTIONS[0],\r\n                vertical: 0,\r\n                pos: pos,\r\n            });\r\n            poses.push(pos);\r\n        }\r\n        var startVerticalIndex = verticalRange[0];\r\n        for (var i = verticalRange[1]; i <= verticalIndex; ++i) {\r\n            var x = HORIZONTAL_RADIUS_DIRECTIONS[i] === 1 ? left : right;\r\n            var y = 0;\r\n            if (verticalIndex === i) {\r\n                y = distY;\r\n            }\r\n            else if (i === 0) {\r\n                y = top + radiusY;\r\n            }\r\n            else if (VERTICAL_RADIUS_DIRECTIONS[i] === 1) {\r\n                y = poses[startIndex + startVerticalIndex][1];\r\n            }\r\n            else if (VERTICAL_RADIUS_DIRECTIONS[i] === -1) {\r\n                y = bottom - (poses[startIndex + startVerticalIndex][1] - top);\r\n            }\r\n            controlPoses.push({\r\n                horizontal: 0,\r\n                vertical: VERTICAL_RADIUS_DIRECTIONS[i],\r\n                pos: [x, y],\r\n            });\r\n            poses.push([x, y]);\r\n            if (i === 0) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction splitRadiusPoses(controlPoses, raws) {\r\n    if (raws === void 0) { raws = controlPoses.map(function (pos) { return pos.raw; }); }\r\n    var horizontals = controlPoses\r\n        .map(function (pos, i) { return pos.horizontal ? raws[i] : null; }).filter(function (pos) { return pos != null; });\r\n    var verticals = controlPoses\r\n        .map(function (pos, i) { return pos.vertical ? raws[i] : null; }).filter(function (pos) { return pos != null; });\r\n    return {\r\n        horizontals: horizontals,\r\n        verticals: verticals,\r\n    };\r\n}\n\nvar CLIP_DIRECTIONS = [\r\n    [0, -1, \"n\"],\r\n    [1, 0, \"e\"],\r\n];\r\nvar CLIP_RECT_DIRECTIONS = [\r\n    [-1, -1, \"nw\"],\r\n    [0, -1, \"n\"],\r\n    [1, -1, \"ne\"],\r\n    [1, 0, \"e\"],\r\n    [1, 1, \"se\"],\r\n    [0, 1, \"s\"],\r\n    [-1, 1, \"sw\"],\r\n    [-1, 0, \"w\"],\r\n];\r\n// 1 2 5 6 0 3 4 7\r\n// 0 1 2 3 4 5 6 7\r\nfunction getClipStyles(moveable, clipPath, poses) {\r\n    var clipRelative = moveable.props.clipRelative;\r\n    var _a = moveable.state, width = _a.width, height = _a.height;\r\n    var _b = clipPath, clipType = _b.type, clipPoses = _b.poses;\r\n    var isRect = clipType === \"rect\";\r\n    var isCircle = clipType === \"circle\";\r\n    if (clipType === \"polygon\") {\r\n        return poses.map(function (pos) { return \"\".concat(convertCSSSize(pos[0], width, clipRelative), \" \").concat(convertCSSSize(pos[1], height, clipRelative)); });\r\n    }\r\n    else if (isRect || clipType === \"inset\") {\r\n        var top_1 = poses[1][1];\r\n        var right = poses[3][0];\r\n        var left = poses[7][0];\r\n        var bottom = poses[5][1];\r\n        if (isRect) {\r\n            return [\r\n                top_1,\r\n                right,\r\n                bottom,\r\n                left,\r\n            ].map(function (pos) { return \"\".concat(pos, \"px\"); });\r\n        }\r\n        var clipStyles = [top_1, width - right, height - bottom, left]\r\n            .map(function (pos, i) { return convertCSSSize(pos, i % 2 ? width : height, clipRelative); });\r\n        if (poses.length > 8) {\r\n            var _c = __read((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(poses[4], poses[0]), 2), subWidth = _c[0], subHeight = _c[1];\r\n            clipStyles.push.apply(clipStyles, __spreadArray([\"round\"], __read(getRadiusStyles(clipPoses.slice(8).map(function (info, i) {\r\n                return __assign(__assign({}, info), { pos: poses[i] });\r\n            }), clipRelative, subWidth, subHeight, left, top_1, right, bottom).styles), false));\r\n        }\r\n        return clipStyles;\r\n    }\r\n    else if (isCircle || clipType === \"ellipse\") {\r\n        var center = poses[0];\r\n        var ry = convertCSSSize(abs(poses[1][1] - center[1]), isCircle ? Math.sqrt((width * width + height * height) / 2) : height, clipRelative);\r\n        var clipStyles = isCircle ? [ry]\r\n            : [convertCSSSize(abs(poses[2][0] - center[0]), width, clipRelative), ry];\r\n        clipStyles.push(\"at\", convertCSSSize(center[0], width, clipRelative), convertCSSSize(center[1], height, clipRelative));\r\n        return clipStyles;\r\n    }\r\n}\r\nfunction getRectPoses(top, right, bottom, left) {\r\n    var xs = [left, (left + right) / 2, right];\r\n    var ys = [top, (top + bottom) / 2, bottom];\r\n    return CLIP_RECT_DIRECTIONS.map(function (_a) {\r\n        var _b = __read(_a, 3), dirx = _b[0], diry = _b[1], dir = _b[2];\r\n        var x = xs[dirx + 1];\r\n        var y = ys[diry + 1];\r\n        return {\r\n            vertical: abs(diry),\r\n            horizontal: abs(dirx),\r\n            direction: dir,\r\n            pos: [x, y],\r\n        };\r\n    });\r\n}\r\nfunction getControlSize(controlPoses) {\r\n    var xRange = [Infinity, -Infinity];\r\n    var yRange = [Infinity, -Infinity];\r\n    controlPoses.forEach(function (_a) {\r\n        var pos = _a.pos;\r\n        xRange[0] = Math.min(xRange[0], pos[0]);\r\n        xRange[1] = Math.max(xRange[1], pos[0]);\r\n        yRange[0] = Math.min(yRange[0], pos[1]);\r\n        yRange[1] = Math.max(yRange[1], pos[1]);\r\n    });\r\n    return [\r\n        abs(xRange[1] - xRange[0]),\r\n        abs(yRange[1] - yRange[0]),\r\n    ];\r\n}\r\nfunction getClipPath(target, width, height, defaultClip, customClip) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\r\n    if (!target) {\r\n        return;\r\n    }\r\n    var clipText = customClip;\r\n    if (!clipText) {\r\n        var getStyle = getCachedStyle(target);\r\n        var clipPath = getStyle(\"clipPath\");\r\n        clipText = clipPath !== \"none\" ? clipPath : getStyle(\"clip\");\r\n    }\r\n    if (!clipText || clipText === \"none\" || clipText === \"auto\") {\r\n        clipText = defaultClip;\r\n        if (!clipText) {\r\n            return;\r\n        }\r\n    }\r\n    var _k = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitBracket)(clipText), _l = _k.prefix, clipPrefix = _l === void 0 ? clipText : _l, _m = _k.value, value = _m === void 0 ? \"\" : _m;\r\n    var isCircle = clipPrefix === \"circle\";\r\n    var splitter = \" \";\r\n    if (clipPrefix === \"polygon\") {\r\n        var values = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitComma)(value || \"0% 0%, 100% 0%, 100% 100%, 0% 100%\");\r\n        splitter = \",\";\r\n        var poses = values.map(function (pos) {\r\n            var _a = __read(pos.split(\" \"), 2), xPos = _a[0], yPos = _a[1];\r\n            return {\r\n                vertical: 1,\r\n                horizontal: 1,\r\n                pos: [\r\n                    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(xPos, width),\r\n                    (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(yPos, height),\r\n                ],\r\n            };\r\n        });\r\n        var minMaxs = (0,overlap_area__WEBPACK_IMPORTED_MODULE_8__.getMinMaxs)(poses.map(function (pos) { return pos.pos; }));\r\n        return {\r\n            type: clipPrefix,\r\n            clipText: clipText,\r\n            poses: poses,\r\n            splitter: splitter,\r\n            left: minMaxs.minX,\r\n            right: minMaxs.maxX,\r\n            top: minMaxs.minY,\r\n            bottom: minMaxs.maxY,\r\n        };\r\n    }\r\n    else if (isCircle || clipPrefix === \"ellipse\") {\r\n        var xPos = \"\";\r\n        var yPos = \"\";\r\n        var radiusX_1 = 0;\r\n        var radiusY_1 = 0;\r\n        var values = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitSpace)(value);\r\n        if (isCircle) {\r\n            var radius = \"\";\r\n            _a = __read(values, 4), _b = _a[0], radius = _b === void 0 ? \"50%\" : _b, _c = _a[2], xPos = _c === void 0 ? \"50%\" : _c, _d = _a[3], yPos = _d === void 0 ? \"50%\" : _d;\r\n            radiusX_1 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(radius, Math.sqrt((width * width + height * height) / 2));\r\n            radiusY_1 = radiusX_1;\r\n        }\r\n        else {\r\n            var xRadius = \"\";\r\n            var yRadius = \"\";\r\n            _e = __read(values, 5), _f = _e[0], xRadius = _f === void 0 ? \"50%\" : _f, _g = _e[1], yRadius = _g === void 0 ? \"50%\" : _g, _h = _e[3], xPos = _h === void 0 ? \"50%\" : _h, _j = _e[4], yPos = _j === void 0 ? \"50%\" : _j;\r\n            radiusX_1 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(xRadius, width);\r\n            radiusY_1 = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(yRadius, height);\r\n        }\r\n        var centerPos_1 = [\r\n            (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(xPos, width),\r\n            (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(yPos, height),\r\n        ];\r\n        var poses = __spreadArray([\r\n            {\r\n                vertical: 1,\r\n                horizontal: 1,\r\n                pos: centerPos_1,\r\n                direction: \"nesw\",\r\n            }\r\n        ], __read(CLIP_DIRECTIONS.slice(0, isCircle ? 1 : 2).map(function (dir) { return ({\r\n            vertical: abs(dir[1]),\r\n            horizontal: dir[0],\r\n            direction: dir[2],\r\n            sub: true,\r\n            pos: [\r\n                centerPos_1[0] + dir[0] * radiusX_1,\r\n                centerPos_1[1] + dir[1] * radiusY_1,\r\n            ],\r\n        }); })), false);\r\n        return {\r\n            type: clipPrefix,\r\n            clipText: clipText,\r\n            radiusX: radiusX_1,\r\n            radiusY: radiusY_1,\r\n            left: centerPos_1[0] - radiusX_1,\r\n            top: centerPos_1[1] - radiusY_1,\r\n            right: centerPos_1[0] + radiusX_1,\r\n            bottom: centerPos_1[1] + radiusY_1,\r\n            poses: poses,\r\n            splitter: splitter,\r\n        };\r\n    }\r\n    else if (clipPrefix === \"inset\") {\r\n        var values = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitSpace)(value || \"0 0 0 0\");\r\n        var roundIndex = values.indexOf(\"round\");\r\n        var rectLength = (roundIndex > -1 ? values.slice(0, roundIndex) : values).length;\r\n        var radiusValues = values.slice(rectLength + 1);\r\n        var _o = __read(values.slice(0, rectLength), 4), topValue = _o[0], _p = _o[1], rightValue = _p === void 0 ? topValue : _p, _q = _o[2], bottomValue = _q === void 0 ? topValue : _q, _r = _o[3], leftValue = _r === void 0 ? rightValue : _r;\r\n        var _s = __read([topValue, bottomValue].map(function (pos) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(pos, height); }), 2), top_2 = _s[0], bottom = _s[1];\r\n        var _t = __read([leftValue, rightValue].map(function (pos) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(pos, width); }), 2), left = _t[0], right = _t[1];\r\n        var nextRight = width - right;\r\n        var nextBottom = height - bottom;\r\n        var radiusPoses = getRadiusValues(radiusValues, nextRight - left, nextBottom - top_2, left, top_2);\r\n        var poses = __spreadArray(__spreadArray([], __read(getRectPoses(top_2, nextRight, nextBottom, left)), false), __read(radiusPoses), false);\r\n        return {\r\n            type: \"inset\",\r\n            clipText: clipText,\r\n            poses: poses,\r\n            top: top_2,\r\n            left: left,\r\n            right: nextRight,\r\n            bottom: nextBottom,\r\n            radius: radiusValues,\r\n            splitter: splitter,\r\n        };\r\n    }\r\n    else if (clipPrefix === \"rect\") {\r\n        // top right bottom left\r\n        var values = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitComma)(value || \"0px, \".concat(width, \"px, \").concat(height, \"px, 0px\"));\r\n        splitter = \",\";\r\n        var _u = __read(values.map(function (pos) {\r\n            var posValue = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitUnit)(pos).value;\r\n            return posValue;\r\n        }), 4), top_3 = _u[0], right = _u[1], bottom = _u[2], left = _u[3];\r\n        var poses = getRectPoses(top_3, right, bottom, left);\r\n        return {\r\n            type: \"rect\",\r\n            clipText: clipText,\r\n            poses: poses,\r\n            top: top_3,\r\n            right: right,\r\n            bottom: bottom,\r\n            left: left,\r\n            values: values,\r\n            splitter: splitter,\r\n        };\r\n    }\r\n    return;\r\n}\n\nfunction moveControlPos(controlPoses, index, dist, isRect, keepRatio) {\r\n    var _a = controlPoses[index], direction = _a.direction, sub = _a.sub;\r\n    var dists = controlPoses.map(function () { return [0, 0]; });\r\n    var directions = direction ? direction.split(\"\") : [];\r\n    if (isRect && index < 8) {\r\n        var verticalDirections = directions.filter(function (dir) { return dir === \"w\" || dir === \"e\"; });\r\n        var horizontalDirections = directions.filter(function (dir) { return dir === \"n\" || dir === \"s\"; });\r\n        var verticalDirection_1 = verticalDirections[0];\r\n        var horizontalDirection_1 = horizontalDirections[0];\r\n        dists[index] = dist;\r\n        var _b = __read(getControlSize(controlPoses), 2), width = _b[0], height = _b[1];\r\n        var ratio = width && height ? width / height : 0;\r\n        if (ratio && keepRatio) {\r\n            // 0 1 2\r\n            // 7   3\r\n            // 6 5 4\r\n            var fixedIndex = (index + 4) % 8;\r\n            var fixedPosition = controlPoses[fixedIndex].pos;\r\n            var sizeDirection = [0, 0];\r\n            if (direction.indexOf(\"w\") > -1) {\r\n                sizeDirection[0] = -1;\r\n            }\r\n            else if (direction.indexOf(\"e\") > -1) {\r\n                sizeDirection[0] = 1;\r\n            }\r\n            if (direction.indexOf(\"n\") > -1) {\r\n                sizeDirection[1] = -1;\r\n            }\r\n            else if (direction.indexOf(\"s\") > -1) {\r\n                sizeDirection[1] = 1;\r\n            }\r\n            var nextDist = getSizeDistByDist([width, height], dist, ratio, sizeDirection, true);\r\n            var nextWidth = width + nextDist[0];\r\n            var nextHeight = height + nextDist[1];\r\n            var top_1 = fixedPosition[1];\r\n            var bottom = fixedPosition[1];\r\n            var left = fixedPosition[0];\r\n            var right = fixedPosition[0];\r\n            if (sizeDirection[0] === -1) {\r\n                left = right - nextWidth;\r\n            }\r\n            else if (sizeDirection[0] === 1) {\r\n                right = left + nextWidth;\r\n            }\r\n            else {\r\n                left = left - nextWidth / 2;\r\n                right = right + nextWidth / 2;\r\n            }\r\n            if (sizeDirection[1] === -1) {\r\n                top_1 = bottom - nextHeight;\r\n            }\r\n            else if (sizeDirection[1] === 1) {\r\n                bottom = top_1 + nextHeight;\r\n            }\r\n            else {\r\n                top_1 = bottom - nextHeight / 2;\r\n                bottom = top_1 + nextHeight;\r\n            }\r\n            var nextControlPoses_1 = getRectPoses(top_1, right, bottom, left);\r\n            controlPoses.forEach(function (controlPose, i) {\r\n                dists[i][0] = nextControlPoses_1[i].pos[0] - controlPose.pos[0];\r\n                dists[i][1] = nextControlPoses_1[i].pos[1] - controlPose.pos[1];\r\n            });\r\n        }\r\n        else {\r\n            controlPoses.forEach(function (controlPose, i) {\r\n                var controlDir = controlPose.direction;\r\n                if (!controlDir) {\r\n                    return;\r\n                }\r\n                if (controlDir.indexOf(verticalDirection_1) > -1) {\r\n                    dists[i][0] = dist[0];\r\n                }\r\n                if (controlDir.indexOf(horizontalDirection_1) > -1) {\r\n                    dists[i][1] = dist[1];\r\n                }\r\n            });\r\n            if (verticalDirection_1) {\r\n                dists[1][0] = dist[0] / 2;\r\n                dists[5][0] = dist[0] / 2;\r\n            }\r\n            if (horizontalDirection_1) {\r\n                dists[3][1] = dist[1] / 2;\r\n                dists[7][1] = dist[1] / 2;\r\n            }\r\n        }\r\n    }\r\n    else if (direction && !sub) {\r\n        directions.forEach(function (dir) {\r\n            var isVertical = dir === \"n\" || dir === \"s\";\r\n            controlPoses.forEach(function (controlPose, i) {\r\n                var dirDir = controlPose.direction, dirHorizontal = controlPose.horizontal, dirVertical = controlPose.vertical;\r\n                if (!dirDir || dirDir.indexOf(dir) === -1) {\r\n                    return;\r\n                }\r\n                dists[i] = [\r\n                    isVertical || !dirHorizontal ? 0 : dist[0],\r\n                    !isVertical || !dirVertical ? 0 : dist[1],\r\n                ];\r\n            });\r\n        });\r\n    }\r\n    else {\r\n        dists[index] = dist;\r\n    }\r\n    return dists;\r\n}\r\nfunction addClipPath(moveable, e) {\r\n    var _a = __read(calculatePointerDist(moveable, e), 2), distX = _a[0], distY = _a[1];\r\n    var _b = e.datas, clipPath = _b.clipPath, clipIndex = _b.clipIndex;\r\n    var _c = clipPath, clipType = _c.type, clipPoses = _c.poses, splitter = _c.splitter;\r\n    var poses = clipPoses.map(function (pos) { return pos.pos; });\r\n    if (clipType === \"polygon\") {\r\n        poses.splice(clipIndex, 0, [distX, distY]);\r\n    }\r\n    else if (clipType === \"inset\") {\r\n        var horizontalIndex = HORIZONTAL_RADIUS_ORDER.indexOf(clipIndex);\r\n        var verticalIndex = VERTICAL_RADIUS_ORDER.indexOf(clipIndex);\r\n        var length_1 = clipPoses.length;\r\n        addRadiusPos(clipPoses, poses, 8, horizontalIndex, verticalIndex, distX, distY, poses[4][0], poses[4][1], poses[0][0], poses[0][1]);\r\n        if (length_1 === clipPoses.length) {\r\n            return;\r\n        }\r\n    }\r\n    else {\r\n        return;\r\n    }\r\n    var clipStyles = getClipStyles(moveable, clipPath, poses);\r\n    var clipStyle = \"\".concat(clipType, \"(\").concat(clipStyles.join(splitter), \")\");\r\n    triggerEvent(moveable, \"onClip\", fillParams(moveable, e, __assign({ clipEventType: \"added\", clipType: clipType, poses: poses, clipStyles: clipStyles, clipStyle: clipStyle, distX: 0, distY: 0 }, fillCSSObject({\r\n        clipPath: clipStyle,\r\n    }, e))));\r\n}\r\nfunction removeClipPath(moveable, e) {\r\n    var _a = e.datas, clipPath = _a.clipPath, clipIndex = _a.clipIndex;\r\n    var _b = clipPath, clipType = _b.type, clipPoses = _b.poses, splitter = _b.splitter;\r\n    var poses = clipPoses.map(function (pos) { return pos.pos; });\r\n    var length = poses.length;\r\n    if (clipType === \"polygon\") {\r\n        clipPoses.splice(clipIndex, 1);\r\n        poses.splice(clipIndex, 1);\r\n    }\r\n    else if (clipType === \"inset\") {\r\n        if (clipIndex < 8) {\r\n            return;\r\n        }\r\n        removeRadiusPos(clipPoses, poses, clipIndex, 8, length);\r\n        if (length === clipPoses.length) {\r\n            return;\r\n        }\r\n    }\r\n    else {\r\n        return;\r\n    }\r\n    var clipStyles = getClipStyles(moveable, clipPath, poses);\r\n    var clipStyle = \"\".concat(clipType, \"(\").concat(clipStyles.join(splitter), \")\");\r\n    triggerEvent(moveable, \"onClip\", fillParams(moveable, e, __assign({ clipEventType: \"removed\", clipType: clipType, poses: poses, clipStyles: clipStyles, clipStyle: clipStyle, distX: 0, distY: 0 }, fillCSSObject({\r\n        clipPath: clipStyle,\r\n    }, e))));\r\n}\r\n/**\r\n * @namespace Moveable.Clippable\r\n * @description Whether to clip the target.\r\n */\r\nvar Clippable = {\r\n    name: \"clippable\",\r\n    props: [\r\n        \"clippable\",\r\n        \"defaultClipPath\",\r\n        \"customClipPath\",\r\n        \"keepRatio\",\r\n        \"clipRelative\",\r\n        \"clipArea\",\r\n        \"dragWithClip\",\r\n        \"clipTargetBounds\",\r\n        \"clipVerticalGuidelines\",\r\n        \"clipHorizontalGuidelines\",\r\n        \"clipSnapThreshold\",\r\n    ],\r\n    events: [\r\n        \"clipStart\",\r\n        \"clip\",\r\n        \"clipEnd\",\r\n    ],\r\n    css: [\r\n        \".control.clip-control {\\nbackground: #6d6;\\ncursor: pointer;\\n}\\n.control.clip-control.clip-radius {\\nbackground: #d66;\\n}\\n.line.clip-line {\\nbackground: #6e6;\\ncursor: move;\\nz-index: 1;\\n}\\n.clip-area {\\nposition: absolute;\\ntop: 0;\\nleft: 0;\\n}\\n.clip-ellipse {\\nposition: absolute;\\ncursor: move;\\nborder: 1px solid #6d6;\\nborder: var(--zoompx) solid #6d6;\\nborder-radius: 50%;\\ntransform-origin: 0px 0px;\\n}\",\r\n        \":host {\\n--bounds-color: #d66;\\n}\",\r\n        \".guideline {\\npointer-events: none;\\nz-index: 2;\\n}\",\r\n        \".line.guideline.bounds {\\nbackground: #d66;\\nbackground: var(--bounds-color);\\n}\",\r\n    ],\r\n    render: function (moveable, React) {\r\n        var _a = moveable.props, customClipPath = _a.customClipPath, defaultClipPath = _a.defaultClipPath, clipArea = _a.clipArea, zoom = _a.zoom, groupable = _a.groupable;\r\n        var _b = moveable.getState(), target = _b.target, width = _b.width, height = _b.height, allMatrix = _b.allMatrix, is3d = _b.is3d, left = _b.left, top = _b.top, pos1 = _b.pos1, pos2 = _b.pos2, pos3 = _b.pos3, pos4 = _b.pos4, clipPathState = _b.clipPathState, snapBoundInfos = _b.snapBoundInfos, rotationRad = _b.rotation;\r\n        if (!target || groupable) {\r\n            return [];\r\n        }\r\n        var clipPath = getClipPath(target, width, height, defaultClipPath || \"inset\", clipPathState || customClipPath);\r\n        if (!clipPath) {\r\n            return [];\r\n        }\r\n        var n = is3d ? 4 : 3;\r\n        var type = clipPath.type;\r\n        var clipPoses = clipPath.poses;\r\n        var poses = clipPoses.map(function (pos) {\r\n            // return [x, y];\r\n            var calculatedPos = calculatePosition(allMatrix, pos.pos, n);\r\n            return [\r\n                calculatedPos[0] - left,\r\n                calculatedPos[1] - top,\r\n            ];\r\n        });\r\n        var controls = [];\r\n        var lines = [];\r\n        var isRect = type === \"rect\";\r\n        var isInset = type === \"inset\";\r\n        var isPolygon = type === \"polygon\";\r\n        if (isRect || isInset || isPolygon) {\r\n            var linePoses_1 = isInset ? poses.slice(0, 8) : poses;\r\n            lines = linePoses_1.map(function (to, i) {\r\n                var from = i === 0 ? linePoses_1[linePoses_1.length - 1] : linePoses_1[i - 1];\r\n                var rad = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getRad)(from, to);\r\n                var dist = getDiagonalSize(from, to);\r\n                return React.createElement(\"div\", { key: \"clipLine\".concat(i), className: prefix(\"line\", \"clip-line\", \"snap-control\"), \"data-clip-index\": i, style: {\r\n                        width: \"\".concat(dist, \"px\"),\r\n                        transform: \"translate(\".concat(from[0], \"px, \").concat(from[1], \"px) rotate(\").concat(rad, \"rad) scaleY(\").concat(zoom, \")\"),\r\n                    } });\r\n            });\r\n        }\r\n        controls = poses.map(function (pos, i) {\r\n            return React.createElement(\"div\", { key: \"clipControl\".concat(i), className: prefix(\"control\", \"clip-control\", \"snap-control\"), \"data-clip-index\": i, style: {\r\n                    transform: \"translate(\".concat(pos[0], \"px, \").concat(pos[1], \"px) rotate(\").concat(rotationRad, \"rad) scale(\").concat(zoom, \")\"),\r\n                } });\r\n        });\r\n        if (isInset) {\r\n            controls.push.apply(controls, __spreadArray([], __read(poses.slice(8).map(function (pos, i) {\r\n                return React.createElement(\"div\", { key: \"clipRadiusControl\".concat(i), className: prefix(\"control\", \"clip-control\", \"clip-radius\", \"snap-control\"), \"data-clip-index\": 8 + i, style: {\r\n                        transform: \"translate(\".concat(pos[0], \"px, \").concat(pos[1], \"px) rotate(\").concat(rotationRad, \"rad) scale(\").concat(zoom, \")\"),\r\n                    } });\r\n            })), false));\r\n        }\r\n        if (type === \"circle\" || type === \"ellipse\") {\r\n            var clipLeft = clipPath.left, clipTop = clipPath.top, radiusX = clipPath.radiusX, radiusY = clipPath.radiusY;\r\n            var _c = __read((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(calculatePosition(allMatrix, [clipLeft, clipTop], n), calculatePosition(allMatrix, [0, 0], n)), 2), distLeft = _c[0], distTop = _c[1];\r\n            var ellipseClipPath = \"none\";\r\n            if (!clipArea) {\r\n                var piece = Math.max(10, radiusX / 5, radiusY / 5);\r\n                var areaPoses = [];\r\n                for (var i = 0; i <= piece; ++i) {\r\n                    var rad = Math.PI * 2 / piece * i;\r\n                    areaPoses.push([\r\n                        radiusX + (radiusX - zoom) * Math.cos(rad),\r\n                        radiusY + (radiusY - zoom) * Math.sin(rad),\r\n                    ]);\r\n                }\r\n                areaPoses.push([radiusX, -2]);\r\n                areaPoses.push([-2, -2]);\r\n                areaPoses.push([-2, radiusY * 2 + 2]);\r\n                areaPoses.push([radiusX * 2 + 2, radiusY * 2 + 2]);\r\n                areaPoses.push([radiusX * 2 + 2, -2]);\r\n                areaPoses.push([radiusX, -2]);\r\n                ellipseClipPath = \"polygon(\".concat(areaPoses.map(function (pos) { return \"\".concat(pos[0], \"px \").concat(pos[1], \"px\"); }).join(\", \"), \")\");\r\n            }\r\n            controls.push(React.createElement(\"div\", { key: \"clipEllipse\", className: prefix(\"clip-ellipse\", \"snap-control\"), style: {\r\n                    width: \"\".concat(radiusX * 2, \"px\"),\r\n                    height: \"\".concat(radiusY * 2, \"px\"),\r\n                    clipPath: ellipseClipPath,\r\n                    transform: \"translate(\".concat(-left + distLeft, \"px, \").concat(-top + distTop, \"px) \").concat(makeMatrixCSS(allMatrix)),\r\n                } }));\r\n        }\r\n        if (clipArea) {\r\n            var _d = getRect(__spreadArray([pos1, pos2, pos3, pos4], __read(poses), false)), allWidth = _d.width, allHeight = _d.height, allLeft_1 = _d.left, allTop_1 = _d.top;\r\n            if (isPolygon || isRect || isInset) {\r\n                var areaPoses = isInset ? poses.slice(0, 8) : poses;\r\n                controls.push(React.createElement(\"div\", { key: \"clipArea\", className: prefix(\"clip-area\", \"snap-control\"), style: {\r\n                        width: \"\".concat(allWidth, \"px\"),\r\n                        height: \"\".concat(allHeight, \"px\"),\r\n                        transform: \"translate(\".concat(allLeft_1, \"px, \").concat(allTop_1, \"px)\"),\r\n                        clipPath: \"polygon(\".concat(areaPoses.map(function (pos) { return \"\".concat(pos[0] - allLeft_1, \"px \").concat(pos[1] - allTop_1, \"px\"); }).join(\", \"), \")\"),\r\n                    } }));\r\n            }\r\n        }\r\n        if (snapBoundInfos) {\r\n            [\"vertical\", \"horizontal\"].forEach(function (directionType) {\r\n                var info = snapBoundInfos[directionType];\r\n                var isHorizontal = directionType === \"horizontal\";\r\n                if (info.isSnap) {\r\n                    lines.push.apply(lines, __spreadArray([], __read(info.snap.posInfos.map(function (_a, i) {\r\n                        var pos = _a.pos;\r\n                        var snapPos1 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(calculatePosition(allMatrix, isHorizontal ? [0, pos] : [pos, 0], n), [left, top]);\r\n                        var snapPos2 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(calculatePosition(allMatrix, isHorizontal ? [width, pos] : [pos, height], n), [left, top]);\r\n                        return renderLine(React, \"\", snapPos1, snapPos2, zoom, \"clip\".concat(directionType, \"snap\").concat(i), \"guideline\");\r\n                    })), false));\r\n                }\r\n                if (info.isBound) {\r\n                    lines.push.apply(lines, __spreadArray([], __read(info.bounds.map(function (_a, i) {\r\n                        var pos = _a.pos;\r\n                        var snapPos1 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(calculatePosition(allMatrix, isHorizontal ? [0, pos] : [pos, 0], n), [left, top]);\r\n                        var snapPos2 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(calculatePosition(allMatrix, isHorizontal ? [width, pos] : [pos, height], n), [left, top]);\r\n                        return renderLine(React, \"\", snapPos1, snapPos2, zoom, \"clip\".concat(directionType, \"bounds\").concat(i), \"guideline\", \"bounds\", \"bold\");\r\n                    })), false));\r\n                }\r\n            });\r\n        }\r\n        return __spreadArray(__spreadArray([], __read(controls), false), __read(lines), false);\r\n    },\r\n    dragControlCondition: function (moveable, e) {\r\n        return e.inputEvent && (e.inputEvent.target.getAttribute(\"class\") || \"\").indexOf(\"clip\") > -1;\r\n    },\r\n    dragStart: function (moveable, e) {\r\n        var props = moveable.props;\r\n        var _a = props.dragWithClip, dragWithClip = _a === void 0 ? true : _a;\r\n        if (dragWithClip) {\r\n            return false;\r\n        }\r\n        return this.dragControlStart(moveable, e);\r\n    },\r\n    drag: function (moveable, e) {\r\n        return this.dragControl(moveable, __assign(__assign({}, e), { isDragTarget: true }));\r\n    },\r\n    dragEnd: function (moveable, e) {\r\n        return this.dragControlEnd(moveable, e);\r\n    },\r\n    dragControlStart: function (moveable, e) {\r\n        var state = moveable.state;\r\n        var _a = moveable.props, defaultClipPath = _a.defaultClipPath, customClipPath = _a.customClipPath;\r\n        var target = state.target, width = state.width, height = state.height;\r\n        var inputTarget = e.inputEvent ? e.inputEvent.target : null;\r\n        var className = (inputTarget && inputTarget.getAttribute(\"class\")) || \"\";\r\n        var datas = e.datas;\r\n        var clipPath = getClipPath(target, width, height, defaultClipPath || \"inset\", customClipPath);\r\n        if (!clipPath) {\r\n            return false;\r\n        }\r\n        var clipText = clipPath.clipText, type = clipPath.type, poses = clipPath.poses;\r\n        var result = triggerEvent(moveable, \"onClipStart\", fillParams(moveable, e, {\r\n            clipType: type,\r\n            clipStyle: clipText,\r\n            poses: poses.map(function (pos) { return pos.pos; }),\r\n        }));\r\n        if (result === false) {\r\n            datas.isClipStart = false;\r\n            return false;\r\n        }\r\n        datas.isControl = className && className.indexOf(\"clip-control\") > -1;\r\n        datas.isLine = className.indexOf(\"clip-line\") > -1;\r\n        datas.isArea = className.indexOf(\"clip-area\") > -1 || className.indexOf(\"clip-ellipse\") > -1;\r\n        datas.clipIndex = inputTarget ? parseInt(inputTarget.getAttribute(\"data-clip-index\"), 10) : -1;\r\n        datas.clipPath = clipPath;\r\n        datas.isClipStart = true;\r\n        state.clipPathState = clipText;\r\n        setDragStart(moveable, e);\r\n        return true;\r\n    },\r\n    dragControl: function (moveable, e) {\r\n        var _a, _b, _c;\r\n        var datas = e.datas, originalDatas = e.originalDatas, isDragTarget = e.isDragTarget;\r\n        if (!datas.isClipStart) {\r\n            return false;\r\n        }\r\n        var _d = datas, isControl = _d.isControl, isLine = _d.isLine, isArea = _d.isArea, clipIndex = _d.clipIndex, clipPath = _d.clipPath;\r\n        if (!clipPath) {\r\n            return false;\r\n        }\r\n        var props = getProps(moveable.props, \"clippable\");\r\n        var keepRatio = props.keepRatio;\r\n        var distX = 0;\r\n        var distY = 0;\r\n        var originalDraggable = originalDatas.draggable;\r\n        var originalDist = getDragDist(e);\r\n        if (isDragTarget && originalDraggable) {\r\n            _a = __read(originalDraggable.prevBeforeDist, 2), distX = _a[0], distY = _a[1];\r\n        }\r\n        else {\r\n            _b = __read(originalDist, 2), distX = _b[0], distY = _b[1];\r\n        }\r\n        var firstDist = [distX, distY];\r\n        var state = moveable.state;\r\n        var width = state.width, height = state.height;\r\n        var isDragWithTarget = !isArea && !isControl && !isLine;\r\n        var clipType = clipPath.type, clipPoses = clipPath.poses, splitter = clipPath.splitter;\r\n        var poses = clipPoses.map(function (pos) { return pos.pos; });\r\n        if (isDragWithTarget) {\r\n            distX = -distX;\r\n            distY = -distY;\r\n        }\r\n        var isAll = !isControl || clipPoses[clipIndex].direction === \"nesw\";\r\n        var isRect = clipType === \"inset\" || clipType === \"rect\";\r\n        var dists = clipPoses.map(function () { return [0, 0]; });\r\n        if (isControl && !isAll) {\r\n            var _e = clipPoses[clipIndex], horizontal = _e.horizontal, vertical = _e.vertical;\r\n            var dist = [\r\n                distX * abs(horizontal),\r\n                distY * abs(vertical),\r\n            ];\r\n            dists = moveControlPos(clipPoses, clipIndex, dist, isRect, keepRatio);\r\n        }\r\n        else if (isAll) {\r\n            dists = poses.map(function () { return [distX, distY]; });\r\n        }\r\n        var nextPoses = poses.map(function (pos, i) { return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(pos, dists[i]); });\r\n        var guidePoses = __spreadArray([], __read(nextPoses), false);\r\n        state.snapBoundInfos = null;\r\n        var isCircle = clipPath.type === \"circle\";\r\n        var isEllipse = clipPath.type === \"ellipse\";\r\n        if (isCircle || isEllipse) {\r\n            var guideRect = getRect(nextPoses);\r\n            var ry = abs(guideRect.bottom - guideRect.top);\r\n            var rx = abs(isEllipse ? guideRect.right - guideRect.left : ry);\r\n            var bottom = nextPoses[0][1] + ry;\r\n            var left = nextPoses[0][0] - rx;\r\n            var right = nextPoses[0][0] + rx;\r\n            // right\r\n            if (isCircle) {\r\n                guidePoses.push([right, guideRect.bottom]);\r\n                dists.push([1, 0]);\r\n            }\r\n            // bottom\r\n            guidePoses.push([guideRect.left, bottom]);\r\n            dists.push([0, 1]);\r\n            // left\r\n            guidePoses.push([left, guideRect.bottom]);\r\n            dists.push([1, 0]);\r\n        }\r\n        var guidelines = getDefaultGuidelines((props.clipHorizontalGuidelines || []).map(function (v) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(\"\".concat(v), height); }), (props.clipVerticalGuidelines || []).map(function (v) { return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.convertUnitSize)(\"\".concat(v), width); }), width, height);\r\n        var guideXPoses = [];\r\n        var guideYPoses = [];\r\n        if (isCircle || isEllipse) {\r\n            guideXPoses = [guidePoses[4][0], guidePoses[2][0]];\r\n            guideYPoses = [guidePoses[1][1], guidePoses[3][1]];\r\n        }\r\n        else if (isRect) {\r\n            var rectPoses = [guidePoses[0], guidePoses[2], guidePoses[4], guidePoses[6]];\r\n            var rectDists_1 = [dists[0], dists[2], dists[4], dists[6]];\r\n            guideXPoses = rectPoses.filter(function (_, i) { return rectDists_1[i][0]; }).map(function (pos) { return pos[0]; });\r\n            guideYPoses = rectPoses.filter(function (_, i) { return rectDists_1[i][1]; }).map(function (pos) { return pos[1]; });\r\n        }\r\n        else {\r\n            guideXPoses = guidePoses.filter(function (_, i) { return dists[i][0]; }).map(function (pos) { return pos[0]; });\r\n            guideYPoses = guidePoses.filter(function (_, i) { return dists[i][1]; }).map(function (pos) { return pos[1]; });\r\n        }\r\n        var boundDelta = [0, 0];\r\n        var _f = checkSnapBounds(guidelines, props.clipTargetBounds && { left: 0, top: 0, right: width, bottom: height }, guideXPoses, guideYPoses, 5, 5), horizontalSnapInfo = _f.horizontal, verticalSnapInfo = _f.vertical;\r\n        var snapOffsetY = horizontalSnapInfo.offset;\r\n        var snapOffsetX = verticalSnapInfo.offset;\r\n        if (horizontalSnapInfo.isBound) {\r\n            boundDelta[1] += snapOffsetY;\r\n        }\r\n        if (verticalSnapInfo.isBound) {\r\n            boundDelta[0] += snapOffsetX;\r\n        }\r\n        if ((isEllipse || isCircle) && dists[0][0] === 0 && dists[0][1] === 0) {\r\n            var guideRect = getRect(nextPoses);\r\n            var cy = guideRect.bottom - guideRect.top;\r\n            var cx = isEllipse ? guideRect.right - guideRect.left : cy;\r\n            var distSnapX = verticalSnapInfo.isBound\r\n                ? abs(snapOffsetX)\r\n                : (verticalSnapInfo.snapIndex === 0 ? -snapOffsetX : snapOffsetX);\r\n            var distSnapY = horizontalSnapInfo.isBound\r\n                ? abs(snapOffsetY)\r\n                : (horizontalSnapInfo.snapIndex === 0 ? -snapOffsetY : snapOffsetY);\r\n            cx -= distSnapX;\r\n            cy -= distSnapY;\r\n            if (isCircle) {\r\n                cy = checkSnapBoundPriority(verticalSnapInfo, horizontalSnapInfo) > 0 ? cy : cx;\r\n                cx = cy;\r\n            }\r\n            var center = guidePoses[0];\r\n            guidePoses[1][1] = center[1] - cy;\r\n            guidePoses[2][0] = center[0] + cx;\r\n            guidePoses[3][1] = center[1] + cy;\r\n            guidePoses[4][0] = center[0] - cx;\r\n        }\r\n        else if (isRect && keepRatio && isControl) {\r\n            var _g = __read(getControlSize(clipPoses), 2), width_1 = _g[0], height_1 = _g[1];\r\n            var ratio = width_1 && height_1 ? width_1 / height_1 : 0;\r\n            var clipPose = clipPoses[clipIndex];\r\n            var direction = clipPose.direction || \"\";\r\n            var top_2 = guidePoses[1][1];\r\n            var bottom = guidePoses[5][1];\r\n            var left = guidePoses[7][0];\r\n            var right = guidePoses[3][0];\r\n            if (abs(snapOffsetY) <= abs(snapOffsetX)) {\r\n                snapOffsetY = sign(snapOffsetY) * abs(snapOffsetX) / ratio;\r\n            }\r\n            else {\r\n                snapOffsetX = sign(snapOffsetX) * abs(snapOffsetY) * ratio;\r\n            }\r\n            if (direction.indexOf(\"w\") > -1) {\r\n                left -= snapOffsetX;\r\n            }\r\n            else if (direction.indexOf(\"e\") > -1) {\r\n                right -= snapOffsetX;\r\n            }\r\n            else {\r\n                left += snapOffsetX / 2;\r\n                right -= snapOffsetX / 2;\r\n            }\r\n            if (direction.indexOf(\"n\") > -1) {\r\n                top_2 -= snapOffsetY;\r\n            }\r\n            else if (direction.indexOf(\"s\") > -1) {\r\n                bottom -= snapOffsetY;\r\n            }\r\n            else {\r\n                top_2 += snapOffsetY / 2;\r\n                bottom -= snapOffsetY / 2;\r\n            }\r\n            var nextControlPoses_2 = getRectPoses(top_2, right, bottom, left);\r\n            guidePoses.forEach(function (pos, i) {\r\n                var _a;\r\n                _a = __read(nextControlPoses_2[i].pos, 2), pos[0] = _a[0], pos[1] = _a[1];\r\n            });\r\n        }\r\n        else {\r\n            guidePoses.forEach(function (pos, j) {\r\n                var dist = dists[j];\r\n                if (dist[0]) {\r\n                    pos[0] -= snapOffsetX;\r\n                }\r\n                if (dist[1]) {\r\n                    pos[1] -= snapOffsetY;\r\n                }\r\n            });\r\n        }\r\n        var nextClipStyles = getClipStyles(moveable, clipPath, nextPoses);\r\n        var clipStyle = \"\".concat(clipType, \"(\").concat(nextClipStyles.join(splitter), \")\");\r\n        state.clipPathState = clipStyle;\r\n        if (isCircle || isEllipse) {\r\n            guideXPoses = [guidePoses[4][0], guidePoses[2][0]];\r\n            guideYPoses = [guidePoses[1][1], guidePoses[3][1]];\r\n        }\r\n        else if (isRect) {\r\n            var rectPoses = [guidePoses[0], guidePoses[2], guidePoses[4], guidePoses[6]];\r\n            guideXPoses = rectPoses.map(function (pos) { return pos[0]; });\r\n            guideYPoses = rectPoses.map(function (pos) { return pos[1]; });\r\n        }\r\n        else {\r\n            guideXPoses = guidePoses.map(function (pos) { return pos[0]; });\r\n            guideYPoses = guidePoses.map(function (pos) { return pos[1]; });\r\n        }\r\n        state.snapBoundInfos = checkSnapBounds(guidelines, props.clipTargetBounds && { left: 0, top: 0, right: width, bottom: height }, guideXPoses, guideYPoses, 1, 1);\r\n        if (originalDraggable) {\r\n            var is3d = state.is3d, allMatrix = state.allMatrix;\r\n            var n = is3d ? 4 : 3;\r\n            var dragDist = boundDelta;\r\n            if (isDragTarget) {\r\n                dragDist = [\r\n                    firstDist[0] + boundDelta[0] - originalDist[0],\r\n                    firstDist[1] + boundDelta[1] - originalDist[1],\r\n                ];\r\n            }\r\n            originalDraggable.deltaOffset = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(allMatrix, [dragDist[0], dragDist[1], 0, 0], n);\r\n        }\r\n        triggerEvent(moveable, \"onClip\", fillParams(moveable, e, __assign({ clipEventType: \"changed\", clipType: clipType, poses: nextPoses, clipStyle: clipStyle, clipStyles: nextClipStyles, distX: distX, distY: distY }, fillCSSObject((_c = {},\r\n            _c[clipType === \"rect\" ? \"clip\" : \"clipPath\"] = clipStyle,\r\n            _c), e))));\r\n        return true;\r\n    },\r\n    dragControlEnd: function (moveable, e) {\r\n        this.unset(moveable);\r\n        var isDrag = e.isDrag, datas = e.datas, isDouble = e.isDouble;\r\n        var isLine = datas.isLine, isClipStart = datas.isClipStart, isControl = datas.isControl;\r\n        if (!isClipStart) {\r\n            return false;\r\n        }\r\n        triggerEvent(moveable, \"onClipEnd\", fillEndParams(moveable, e, {}));\r\n        if (isDouble) {\r\n            if (isControl) {\r\n                removeClipPath(moveable, e);\r\n            }\r\n            else if (isLine) {\r\n                // add\r\n                addClipPath(moveable, e);\r\n            }\r\n        }\r\n        return isDouble || isDrag;\r\n    },\r\n    unset: function (moveable) {\r\n        moveable.state.clipPathState = \"\";\r\n        moveable.state.snapBoundInfos = null;\r\n    },\r\n};\r\n/**\r\n * Whether to clip the target. (default: false)\r\n * @name Moveable.Clippable#clippable\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     clippable: true,\r\n *     defaultClipPath: \"inset\",\r\n *     customClipPath: \"\",\r\n *     clipRelative: false,\r\n *     clipArea: false,\r\n *     dragWithClip: true,\r\n * });\r\n * moveable.on(\"clipStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"clip\", e => {\r\n *     if (e.clipType === \"rect\") {\r\n *         e.target.style.clip = e.clipStyle;\r\n *     } else {\r\n *         e.target.style.clipPath = e.clipStyle;\r\n *     }\r\n * }).on(\"clipEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n *  If clippath is not set, the default value can be set. (defaultClipPath < style < customClipPath < dragging clipPath)\r\n * @name Moveable.Clippable#defaultClipPath\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     clippable: true,\r\n *     defaultClipPath: \"inset\",\r\n *     customClipPath: \"\",\r\n *     clipRelative: false,\r\n *     clipArea: false,\r\n *     dragWithClip: true,\r\n * });\r\n * moveable.on(\"clipStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"clip\", e => {\r\n *     if (e.clipType === \"rect\") {\r\n *         e.target.style.clip = e.clipStyle;\r\n *     } else {\r\n *         e.target.style.clipPath = e.clipStyle;\r\n *     }\r\n * }).on(\"clipEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * % Can be used instead of the absolute px (`rect` not possible) (default: false)\r\n * @name Moveable.Clippable#clipRelative\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     clippable: true,\r\n *     defaultClipPath: \"inset\",\r\n *     customClipPath: \"\",\r\n *     clipRelative: false,\r\n *     clipArea: false,\r\n *     dragWithClip: true,\r\n * });\r\n * moveable.on(\"clipStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"clip\", e => {\r\n *     if (e.clipType === \"rect\") {\r\n *         e.target.style.clip = e.clipStyle;\r\n *     } else {\r\n *         e.target.style.clipPath = e.clipStyle;\r\n *     }\r\n * }).on(\"clipEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * You can force the custom clipPath. (defaultClipPath < style < customClipPath < dragging clipPath)\r\n * @name Moveable.Clippable#customClipPath\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     clippable: true,\r\n *     defaultClipPath: \"inset\",\r\n *     customClipPath: \"\",\r\n *     clipRelative: false,\r\n *     clipArea: false,\r\n *     dragWithClip: true,\r\n * });\r\n * moveable.on(\"clipStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"clip\", e => {\r\n *     if (e.clipType === \"rect\") {\r\n *         e.target.style.clip = e.clipStyle;\r\n *     } else {\r\n *         e.target.style.clipPath = e.clipStyle;\r\n *     }\r\n * }).on(\"clipEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * When dragging the target, the clip also moves. (default: true)\r\n * @name Moveable.Clippable#dragWithClip\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     clippable: true,\r\n *     defaultClipPath: \"inset\",\r\n *     customClipPath: \"\",\r\n *     clipRelative: false,\r\n *     clipArea: false,\r\n *     dragWithClip: true,\r\n * });\r\n * moveable.on(\"clipStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"clip\", e => {\r\n *     if (e.clipType === \"rect\") {\r\n *         e.target.style.clip = e.clipStyle;\r\n *     } else {\r\n *         e.target.style.clipPath = e.clipStyle;\r\n *     }\r\n * }).on(\"clipEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * You can drag the clip by setting clipArea.\r\n * @name Moveable.Clippable#clipArea\r\n * @default false\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     clippable: true,\r\n *     defaultClipPath: \"inset\",\r\n *     customClipPath: \"\",\r\n *     clipRelative: false,\r\n *     clipArea: false,\r\n *     dragWithClip: true,\r\n * });\r\n * moveable.on(\"clipStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"clip\", e => {\r\n *     if (e.clipType === \"rect\") {\r\n *         e.target.style.clip = e.clipStyle;\r\n *     } else {\r\n *         e.target.style.clipPath = e.clipStyle;\r\n *     }\r\n * }).on(\"clipEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n* Whether the clip is bound to the target.\r\n* @name Moveable.Clippable#clipTargetBounds\r\n* @default false\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     clippable: true,\r\n*     defaultClipPath: \"inset\",\r\n*     customClipPath: \"\",\r\n*     clipRelative: false,\r\n*     clipArea: false,\r\n*     dragWithClip: true,\r\n*     clipTargetBounds: true,\r\n* });\r\n* moveable.on(\"clipStart\", e => {\r\n*     console.log(e);\r\n* }).on(\"clip\", e => {\r\n*     if (e.clipType === \"rect\") {\r\n*         e.target.style.clip = e.clipStyle;\r\n*     } else {\r\n*         e.target.style.clipPath = e.clipStyle;\r\n*     }\r\n* }).on(\"clipEnd\", e => {\r\n*     console.log(e);\r\n* });\r\n*/\r\n/**\r\n * Add clip guidelines in the vertical direction.\r\n * @name Moveable.Clippable#clipVerticalGuidelines\r\n * @default 0\r\n * @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     clippable: true,\r\n*     defaultClipPath: \"inset\",\r\n*     customClipPath: \"\",\r\n*     clipRelative: false,\r\n*     clipArea: false,\r\n*     dragWithClip: true,\r\n*     clipVerticalGuidelines: [0, 100, 200],\r\n*     clipHorizontalGuidelines: [0, 100, 200],\r\n*     clipSnapThreshold: 5,\r\n* });\r\n*/\r\n/**\r\n* Add clip guidelines in the horizontal direction.\r\n* @name Moveable.Clippable#clipHorizontalGuidelines\r\n* @default []\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     clippable: true,\r\n*     defaultClipPath: \"inset\",\r\n*     customClipPath: \"\",\r\n*     clipRelative: false,\r\n*     clipArea: false,\r\n*     dragWithClip: true,\r\n*     clipVerticalGuidelines: [0, 100, 200],\r\n*     clipHorizontalGuidelines: [0, 100, 200],\r\n*     clipSnapThreshold: 5,\r\n* });\r\n*/\r\n/**\r\n* istance value that can snap to clip guidelines.\r\n* @name Moveable.Clippable#clipSnapThreshold\r\n* @default 5\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     clippable: true,\r\n*     defaultClipPath: \"inset\",\r\n*     customClipPath: \"\",\r\n*     clipRelative: false,\r\n*     clipArea: false,\r\n*     dragWithClip: true,\r\n*     clipVerticalGuidelines: [0, 100, 200],\r\n*     clipHorizontalGuidelines: [0, 100, 200],\r\n*     clipSnapThreshold: 5,\r\n* });\r\n*/\r\n/**\r\n * When drag start the clip area or controls, the `clipStart` event is called.\r\n * @memberof Moveable.Clippable\r\n * @event clipStart\r\n * @param {Moveable.Clippable.OnClipStart} - Parameters for the `clipStart` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     clippable: true,\r\n *     defaultClipPath: \"inset\",\r\n *     customClipPath: \"\",\r\n *     clipRelative: false,\r\n *     clipArea: false,\r\n *     dragWithClip: true,\r\n * });\r\n * moveable.on(\"clipStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"clip\", e => {\r\n *     if (e.clipType === \"rect\") {\r\n *         e.target.style.clip = e.clipStyle;\r\n *     } else {\r\n *         e.target.style.clipPath = e.clipStyle;\r\n *     }\r\n * }).on(\"clipEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * When drag the clip area or controls, the `clip` event is called.\r\n * @memberof Moveable.Clippable\r\n * @event clip\r\n * @param {Moveable.Clippable.OnClip} - Parameters for the `clip` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     clippable: true,\r\n *     defaultClipPath: \"inset\",\r\n *     customClipPath: \"\",\r\n *     clipRelative: false,\r\n *     clipArea: false,\r\n *     dragWithClip: true,\r\n * });\r\n * moveable.on(\"clipStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"clip\", e => {\r\n *     if (e.clipType === \"rect\") {\r\n *         e.target.style.clip = e.clipStyle;\r\n *     } else {\r\n *         e.target.style.clipPath = e.clipStyle;\r\n *     }\r\n * }).on(\"clipEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * When drag end the clip area or controls, the `clipEnd` event is called.\r\n * @memberof Moveable.Clippable\r\n * @event clipEnd\r\n * @param {Moveable.Clippable.OnClipEnd} - Parameters for the `clipEnd` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     clippable: true,\r\n *     defaultClipPath: \"inset\",\r\n *     customClipPath: \"\",\r\n *     clipRelative: false,\r\n *     clipArea: false,\r\n *     dragWithClip: true,\r\n * });\r\n * moveable.on(\"clipStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"clip\", e => {\r\n *     if (e.clipType === \"rect\") {\r\n *         e.target.style.clip = e.clipStyle;\r\n *     } else {\r\n *         e.target.style.clipPath = e.clipStyle;\r\n *     }\r\n * }).on(\"clipEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\n\n/**\r\n * @namespace OriginDraggable\r\n * @memberof Moveable\r\n * @description Whether to drag origin (default: false)\r\n */\r\nvar OriginDraggable = {\r\n    name: \"originDraggable\",\r\n    props: [\r\n        \"originDraggable\",\r\n        \"originRelative\",\r\n    ],\r\n    events: [\r\n        \"dragOriginStart\",\r\n        \"dragOrigin\",\r\n        \"dragOriginEnd\",\r\n    ],\r\n    css: [\r\n        \":host[data-able-origindraggable] .control.origin {\\npointer-events: auto;\\n}\",\r\n    ],\r\n    dragControlCondition: function (_, e) {\r\n        if (e.isRequest) {\r\n            return e.requestAble === \"originDraggable\";\r\n        }\r\n        return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(e.inputEvent.target, prefix(\"origin\"));\r\n    },\r\n    dragControlStart: function (moveable, e) {\r\n        var datas = e.datas;\r\n        setDragStart(moveable, e);\r\n        var params = fillParams(moveable, e, {\r\n            dragStart: Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e)),\r\n        });\r\n        var result = triggerEvent(moveable, \"onDragOriginStart\", params);\r\n        datas.startOrigin = moveable.state.transformOrigin;\r\n        datas.startTargetOrigin = moveable.state.targetOrigin;\r\n        datas.prevOrigin = [0, 0];\r\n        datas.isDragOrigin = true;\r\n        if (result === false) {\r\n            datas.isDragOrigin = false;\r\n            return false;\r\n        }\r\n        return params;\r\n    },\r\n    dragControl: function (moveable, e) {\r\n        var datas = e.datas, isPinch = e.isPinch, isRequest = e.isRequest;\r\n        if (!datas.isDragOrigin) {\r\n            return false;\r\n        }\r\n        var _a = __read(getDragDist(e), 2), distX = _a[0], distY = _a[1];\r\n        var state = moveable.state;\r\n        var width = state.width, height = state.height, offsetMatrix = state.offsetMatrix, targetMatrix = state.targetMatrix, is3d = state.is3d;\r\n        var _b = moveable.props.originRelative, originRelative = _b === void 0 ? true : _b;\r\n        var n = is3d ? 4 : 3;\r\n        var dist = [distX, distY];\r\n        if (isRequest) {\r\n            var distOrigin = e.distOrigin;\r\n            if (distOrigin[0] || distOrigin[1]) {\r\n                dist = distOrigin;\r\n            }\r\n        }\r\n        var origin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(datas.startOrigin, dist);\r\n        var targetOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(datas.startTargetOrigin, dist);\r\n        var delta = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(dist, datas.prevOrigin);\r\n        var nextMatrix = getNextMatrix(offsetMatrix, targetMatrix, origin, n);\r\n        var rect = moveable.getRect();\r\n        var nextRect = getRect(calculatePoses(nextMatrix, width, height, n));\r\n        var dragDelta = [\r\n            rect.left - nextRect.left,\r\n            rect.top - nextRect.top,\r\n        ];\r\n        datas.prevOrigin = dist;\r\n        var transformOrigin = [\r\n            convertCSSSize(targetOrigin[0], width, originRelative),\r\n            convertCSSSize(targetOrigin[1], height, originRelative),\r\n        ].join(\" \");\r\n        var result = Draggable.drag(moveable, setCustomDrag(e, moveable.state, dragDelta, !!isPinch, false));\r\n        var params = fillParams(moveable, e, __assign(__assign({ width: width, height: height, origin: origin, dist: dist, delta: delta, transformOrigin: transformOrigin, drag: result }, fillCSSObject({\r\n            transformOrigin: transformOrigin,\r\n            transform: result.transform,\r\n        }, e)), { afterTransform: result.transform }));\r\n        triggerEvent(moveable, \"onDragOrigin\", params);\r\n        return params;\r\n    },\r\n    dragControlEnd: function (moveable, e) {\r\n        var datas = e.datas;\r\n        if (!datas.isDragOrigin) {\r\n            return false;\r\n        }\r\n        triggerEvent(moveable, \"onDragOriginEnd\", fillEndParams(moveable, e, {}));\r\n        return true;\r\n    },\r\n    dragGroupControlCondition: function (moveable, e) {\r\n        return this.dragControlCondition(moveable, e);\r\n    },\r\n    dragGroupControlStart: function (moveable, e) {\r\n        var params = this.dragControlStart(moveable, e);\r\n        if (!params) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    dragGroupControl: function (moveable, e) {\r\n        var params = this.dragControl(moveable, e);\r\n        if (!params) {\r\n            return false;\r\n        }\r\n        moveable.transformOrigin = params.transformOrigin;\r\n        return true;\r\n    },\r\n    /**\r\n    * @method Moveable.OriginDraggable#request\r\n    * @param {object} e - the OriginDraggable's request parameter\r\n    * @param {number} [e.x] - x position\r\n    * @param {number} [e.y] - y position\r\n    * @param {number} [e.deltaX] - x number to move\r\n    * @param {number} [e.deltaY] - y number to move\r\n    * @param {array} [e.deltaOrigin] - left, top number to move transform-origin\r\n    * @param {array} [e.origin] - transform-origin position\r\n    * @param {number} [e.isInstant] - Whether to execute the request instantly\r\n    * @return {Moveable.Requester} Moveable Requester\r\n    * @example\r\n\n    * // Instantly Request (requestStart - request - requestEnd)\r\n    * // Use Relative Value\r\n    * moveable.request(\"originDraggable\", { deltaX: 10, deltaY: 10 }, true);\r\n    * // Use Absolute Value\r\n    * moveable.request(\"originDraggable\", { x: 200, y: 100 }, true);\r\n    * // Use Transform Value\r\n    * moveable.request(\"originDraggable\", { deltaOrigin: [10, 0] }, true);\r\n    * moveable.request(\"originDraggable\", { origin: [100, 0] }, true);\r\n    * // requestStart\r\n    * const requester = moveable.request(\"originDraggable\");\r\n    *\r\n    * // request\r\n    * // Use Relative Value\r\n    * requester.request({ deltaX: 10, deltaY: 10 });\r\n    * requester.request({ deltaX: 10, deltaY: 10 });\r\n    * requester.request({ deltaX: 10, deltaY: 10 });\r\n    * // Use Absolute Value\r\n    * moveable.request(\"originDraggable\", { x: 200, y: 100 });\r\n    * moveable.request(\"originDraggable\", { x: 220, y: 100 });\r\n    * moveable.request(\"originDraggable\", { x: 240, y: 100 });\r\n    *\r\n    * // requestEnd\r\n    * requester.requestEnd();\r\n    */\r\n    request: function (moveable) {\r\n        var datas = {};\r\n        var rect = moveable.getRect();\r\n        var distX = 0;\r\n        var distY = 0;\r\n        var transformOrigin = rect.transformOrigin;\r\n        var distOrigin = [0, 0];\r\n        return {\r\n            isControl: true,\r\n            requestStart: function () {\r\n                return { datas: datas };\r\n            },\r\n            request: function (e) {\r\n                if (\"deltaOrigin\" in e) {\r\n                    distOrigin[0] += e.deltaOrigin[0];\r\n                    distOrigin[1] += e.deltaOrigin[1];\r\n                }\r\n                else if (\"origin\" in e) {\r\n                    distOrigin[0] = e.origin[0] - transformOrigin[0];\r\n                    distOrigin[1] = e.origin[1] - transformOrigin[1];\r\n                }\r\n                else {\r\n                    if (\"x\" in e) {\r\n                        distX = e.x - rect.left;\r\n                    }\r\n                    else if (\"deltaX\" in e) {\r\n                        distX += e.deltaX;\r\n                    }\r\n                    if (\"y\" in e) {\r\n                        distY = e.y - rect.top;\r\n                    }\r\n                    else if (\"deltaY\" in e) {\r\n                        distY += e.deltaY;\r\n                    }\r\n                }\r\n                return { datas: datas, distX: distX, distY: distY, distOrigin: distOrigin };\r\n            },\r\n            requestEnd: function () {\r\n                return { datas: datas, isDrag: true };\r\n            },\r\n        };\r\n    },\r\n};\r\n/**\r\n * Whether to drag origin (default: false)\r\n * @name Moveable.OriginDraggable#originDraggable\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     originDraggable: true,\r\n * });\r\n * let translate = [0, 0];\r\n * moveable.on(\"dragOriginStart\", e => {\r\n *     e.dragStart && e.dragStart.set(translate);\r\n * }).on(\"dragOrigin\", e => {\r\n *     translate = e.drag.beforeTranslate;\r\n *     e.target.style.cssText\r\n *         = `transform-origin: ${e.transformOrigin};`\r\n *         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\r\n * }).on(\"dragOriginEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * % Can be used instead of the absolute px (default: true)\r\n * @name Moveable.OriginDraggable#originRelative\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     originDraggable: true,\r\n *     originRelative: false,\r\n * });\r\n * moveable.originRelative = true;\r\n */\r\n/**\r\n* When drag start the origin, the `dragOriginStart` event is called.\r\n* @memberof Moveable.OriginDraggable\r\n* @event dragOriginStart\r\n* @param {Moveable.OriginDraggable.OnDragOriginStart} - Parameters for the `dragOriginStart` event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     originDraggable: true,\r\n* });\r\n* let translate = [0, 0];\r\n* moveable.on(\"dragOriginStart\", e => {\r\n*     e.dragStart && e.dragStart.set(translate);\r\n* }).on(\"dragOrigin\", e => {\r\n*     translate = e.drag.beforeTranslate;\r\n*     e.target.style.cssText\r\n*         = `transform-origin: ${e.transformOrigin};`\r\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\r\n* }).on(\"dragOriginEnd\", e => {\r\n*     console.log(e);\r\n* });\r\n*/\r\n/**\r\n* When drag the origin, the `dragOrigin` event is called.\r\n* @memberof Moveable.OriginDraggable\r\n* @event dragOrigin\r\n* @param {Moveable.OriginDraggable.OnDragOrigin} - Parameters for the `dragOrigin` event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     originDraggable: true,\r\n* });\r\n* let translate = [0, 0];\r\n* moveable.on(\"dragOriginStart\", e => {\r\n*     e.dragStart && e.dragStart.set(translate);\r\n* }).on(\"dragOrigin\", e => {\r\n*     translate = e.drag.beforeTranslate;\r\n*     e.target.style.cssText\r\n*         = `transform-origin: ${e.transformOrigin};`\r\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\r\n* }).on(\"dragOriginEnd\", e => {\r\n*     console.log(e);\r\n* });\r\n*/\r\n/**\r\n* When drag end the origin, the `dragOriginEnd` event is called.\r\n* @memberof Moveable.OriginDraggable\r\n* @event dragOriginEnd\r\n* @param {Moveable.OriginDraggable.OnDragOriginEnd} - Parameters for the `dragOriginEnd` event\r\n* @example\r\n* import Moveable from \"moveable\";\r\n*\r\n* const moveable = new Moveable(document.body, {\r\n*     originDraggable: true,\r\n* });\r\n* let translate = [0, 0];\r\n* moveable.on(\"dragOriginStart\", e => {\r\n*     e.dragStart && e.dragStart.set(translate);\r\n* }).on(\"dragOrigin\", e => {\r\n*     translate = e.drag.beforeTranslate;\r\n*     e.target.style.cssText\r\n*         = `transform-origin: ${e.transformOrigin};`\r\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\r\n* }).on(\"dragOriginEnd\", e => {\r\n*     console.log(e);\r\n* });\r\n*/\n\nfunction addBorderRadiusByLine(controlPoses, lineIndex, distX, distY) {\r\n    // lineIndex\r\n    // 0 top\r\n    // 1 right\r\n    // 2 bottom\r\n    // 3 left\r\n    var horizontalsLength = controlPoses.filter(function (_a) {\r\n        var virtual = _a.virtual, horizontal = _a.horizontal;\r\n        return horizontal && !virtual;\r\n    }).length;\r\n    var verticalsLength = controlPoses.filter(function (_a) {\r\n        var virtual = _a.virtual, vertical = _a.vertical;\r\n        return vertical && !virtual;\r\n    }).length;\r\n    var controlIndex = -1;\r\n    //top\r\n    if (lineIndex === 0) {\r\n        if (horizontalsLength === 0) {\r\n            controlIndex = 0;\r\n        }\r\n        else if (horizontalsLength === 1) {\r\n            controlIndex = 1;\r\n        }\r\n    }\r\n    // bottom\r\n    if (lineIndex === 2) {\r\n        if (horizontalsLength <= 2) {\r\n            controlIndex = 2;\r\n        }\r\n        else if (horizontalsLength <= 3) {\r\n            controlIndex = 3;\r\n        }\r\n    }\r\n    // left\r\n    if (lineIndex === 3) {\r\n        if (verticalsLength === 0) {\r\n            controlIndex = 4;\r\n        }\r\n        else if (verticalsLength < 4) {\r\n            controlIndex = 7;\r\n        }\r\n    }\r\n    // right\r\n    if (lineIndex === 1) {\r\n        if (verticalsLength <= 1) {\r\n            controlIndex = 5;\r\n        }\r\n        else if (verticalsLength <= 2) {\r\n            controlIndex = 6;\r\n        }\r\n    }\r\n    if (controlIndex === -1 || !controlPoses[controlIndex].virtual) {\r\n        return;\r\n    }\r\n    var controlPoseInfo = controlPoses[controlIndex];\r\n    addBorderRadius(controlPoses, controlIndex);\r\n    if (controlIndex < 4) {\r\n        controlPoseInfo.pos[0] = distX;\r\n    }\r\n    else {\r\n        controlPoseInfo.pos[1] = distY;\r\n    }\r\n}\r\nfunction addBorderRadius(controlPoses, index) {\r\n    if (index < 4) {\r\n        controlPoses.slice(0, index + 1).forEach(function (info) {\r\n            info.virtual = false;\r\n        });\r\n    }\r\n    else {\r\n        if (controlPoses[0].virtual) {\r\n            controlPoses[0].virtual = false;\r\n        }\r\n        controlPoses.slice(4, index + 1).forEach(function (info) {\r\n            info.virtual = false;\r\n        });\r\n    }\r\n}\r\nfunction removeBorderRadius(controlPoses, index) {\r\n    if (index < 4) {\r\n        controlPoses.slice(index, 4).forEach(function (info) {\r\n            info.virtual = true;\r\n        });\r\n    }\r\n    else {\r\n        controlPoses.slice(index).forEach(function (info) {\r\n            info.virtual = true;\r\n        });\r\n    }\r\n}\r\nfunction getBorderRadius(borderRadius, width, height, minCounts, full) {\r\n    if (minCounts === void 0) { minCounts = [0, 0]; }\r\n    var values = [];\r\n    if (!borderRadius || borderRadius === \"0px\") {\r\n        values = [];\r\n    }\r\n    else {\r\n        values = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitSpace)(borderRadius);\r\n    }\r\n    return getRadiusValues(values, width, height, 0, 0, minCounts, full);\r\n}\r\nfunction triggerRoundEvent(moveable, e, dist, delta, nextPoses) {\r\n    var state = moveable.state;\r\n    var width = state.width, height = state.height;\r\n    var _a = getRadiusStyles(nextPoses, moveable.props.roundRelative, width, height), raws = _a.raws, styles = _a.styles, radiusPoses = _a.radiusPoses;\r\n    var _b = splitRadiusPoses(radiusPoses, raws), horizontals = _b.horizontals, verticals = _b.verticals;\r\n    var borderRadius = styles.join(\" \");\r\n    state.borderRadiusState = borderRadius;\r\n    var params = fillParams(moveable, e, __assign({ horizontals: horizontals, verticals: verticals, borderRadius: borderRadius, width: width, height: height, delta: delta, dist: dist }, fillCSSObject({\r\n        borderRadius: borderRadius,\r\n    }, e)));\r\n    triggerEvent(moveable, \"onRound\", params);\r\n    return params;\r\n}\r\nfunction getStyleBorderRadius(moveable) {\r\n    var _a, _b;\r\n    var style = moveable.getState().style;\r\n    var borderRadius = style.borderRadius || \"\";\r\n    if (!borderRadius && moveable.props.groupable) {\r\n        var firstMoveable = moveable.moveables[0];\r\n        var firstTarget = moveable.getTargets()[0];\r\n        if (firstTarget) {\r\n            if ((firstMoveable === null || firstMoveable === void 0 ? void 0 : firstMoveable.props.target) === firstTarget) {\r\n                borderRadius = (_b = (_a = moveable.moveables[0]) === null || _a === void 0 ? void 0 : _a.state.style.borderRadius) !== null && _b !== void 0 ? _b : \"\";\r\n                style.borderRadius = borderRadius;\r\n            }\r\n            else {\r\n                borderRadius = getComputedStyle(firstTarget).borderRadius;\r\n                style.borderRadius = borderRadius;\r\n            }\r\n        }\r\n    }\r\n    return borderRadius;\r\n}\r\n/**\r\n * @namespace Moveable.Roundable\r\n * @description Whether to show and drag or double click border-radius\r\n */\r\nvar Roundable = {\r\n    name: \"roundable\",\r\n    props: [\r\n        \"roundable\",\r\n        \"roundRelative\",\r\n        \"minRoundControls\",\r\n        \"maxRoundControls\",\r\n        \"roundClickable\",\r\n        \"roundPadding\",\r\n        \"isDisplayShadowRoundControls\",\r\n    ],\r\n    events: [\r\n        \"roundStart\",\r\n        \"round\",\r\n        \"roundEnd\",\r\n        \"roundGroupStart\",\r\n        \"roundGroup\",\r\n        \"roundGroupEnd\",\r\n    ],\r\n    css: [\r\n        \".control.border-radius {\\nbackground: #d66;\\ncursor: pointer;\\nz-index: 3;\\n}\",\r\n        \".control.border-radius.vertical {\\nbackground: #d6d;\\nz-index: 2;\\n}\",\r\n        \".control.border-radius.virtual {\\nopacity: 0.5;\\nz-index: 1;\\n}\",\r\n        \":host.round-line-clickable .line.direction {\\ncursor: pointer;\\n}\",\r\n    ],\r\n    className: function (moveable) {\r\n        var roundClickable = moveable.props.roundClickable;\r\n        return roundClickable === true || roundClickable === \"line\" ? prefix(\"round-line-clickable\") : \"\";\r\n    },\r\n    requestStyle: function () {\r\n        return [\"borderRadius\"];\r\n    },\r\n    requestChildStyle: function () {\r\n        return [\"borderRadius\"];\r\n    },\r\n    render: function (moveable, React) {\r\n        var _a = moveable.getState(), target = _a.target, width = _a.width, height = _a.height, allMatrix = _a.allMatrix, is3d = _a.is3d, left = _a.left, top = _a.top, borderRadiusState = _a.borderRadiusState;\r\n        var _b = moveable.props, _c = _b.minRoundControls, minRoundControls = _c === void 0 ? [0, 0] : _c, _d = _b.maxRoundControls, maxRoundControls = _d === void 0 ? [4, 4] : _d, zoom = _b.zoom, _e = _b.roundPadding, roundPadding = _e === void 0 ? 0 : _e, isDisplayShadowRoundControls = _b.isDisplayShadowRoundControls, groupable = _b.groupable;\r\n        if (!target) {\r\n            return null;\r\n        }\r\n        var borderRadius = borderRadiusState || getStyleBorderRadius(moveable);\r\n        var n = is3d ? 4 : 3;\r\n        var radiusValues = getBorderRadius(borderRadius, width, height, minRoundControls, true);\r\n        if (!radiusValues) {\r\n            return null;\r\n        }\r\n        var verticalCount = 0;\r\n        var horizontalCount = 0;\r\n        var basePos = groupable ? [0, 0] : [left, top];\r\n        return radiusValues.map(function (v, i) {\r\n            var horizontal = v.horizontal;\r\n            var vertical = v.vertical;\r\n            var direction = v.direction || \"\";\r\n            var originalPos = __spreadArray([], __read(v.pos), false);\r\n            horizontalCount += Math.abs(horizontal);\r\n            verticalCount += Math.abs(vertical);\r\n            if (horizontal && direction.indexOf(\"n\") > -1) {\r\n                originalPos[1] -= roundPadding;\r\n            }\r\n            if (vertical && direction.indexOf(\"w\") > -1) {\r\n                originalPos[0] -= roundPadding;\r\n            }\r\n            if (horizontal && direction.indexOf(\"s\") > -1) {\r\n                originalPos[1] += roundPadding;\r\n            }\r\n            if (vertical && direction.indexOf(\"e\") > -1) {\r\n                originalPos[0] += roundPadding;\r\n            }\r\n            var pos = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(calculatePosition(allMatrix, originalPos, n), basePos);\r\n            var isDisplayVerticalShadow = isDisplayShadowRoundControls\r\n                && isDisplayShadowRoundControls !== \"horizontal\";\r\n            var isDisplay = v.vertical\r\n                ? verticalCount <= maxRoundControls[1] && (isDisplayVerticalShadow || !v.virtual)\r\n                : horizontalCount <= maxRoundControls[0] && (isDisplayShadowRoundControls || !v.virtual);\r\n            return React.createElement(\"div\", { key: \"borderRadiusControl\".concat(i), className: prefix(\"control\", \"border-radius\", v.vertical ? \"vertical\" : \"\", v.virtual ? \"virtual\" : \"\"), \"data-radius-index\": i, style: {\r\n                    display: isDisplay ? \"block\" : \"none\",\r\n                    transform: \"translate(\".concat(pos[0], \"px, \").concat(pos[1], \"px) scale(\").concat(zoom, \")\"),\r\n                } });\r\n        });\r\n    },\r\n    dragControlCondition: function (moveable, e) {\r\n        if (!e.inputEvent || e.isRequest) {\r\n            return false;\r\n        }\r\n        var className = (e.inputEvent.target.getAttribute(\"class\") || \"\");\r\n        return className.indexOf(\"border-radius\") > -1\r\n            || (className.indexOf(\"moveable-line\") > -1 && className.indexOf(\"moveable-direction\") > -1);\r\n    },\r\n    dragGroupControlCondition: function (moveable, e) {\r\n        return this.dragControlCondition(moveable, e);\r\n    },\r\n    dragControlStart: function (moveable, e) {\r\n        var inputEvent = e.inputEvent, datas = e.datas;\r\n        var inputTarget = inputEvent.target;\r\n        var className = (inputTarget.getAttribute(\"class\") || \"\");\r\n        var isControl = className.indexOf(\"border-radius\") > -1;\r\n        var isLine = className.indexOf(\"moveable-line\") > -1 && className.indexOf(\"moveable-direction\") > -1;\r\n        var controlIndex = isControl ? parseInt(inputTarget.getAttribute(\"data-radius-index\"), 10) : -1;\r\n        var lineIndex = -1;\r\n        if (isLine) {\r\n            var indexAttr = inputTarget.getAttribute(\"data-line-key\") || \"\";\r\n            if (indexAttr) {\r\n                lineIndex = parseInt(indexAttr.replace(/render-line-/g, \"\"), 10);\r\n                if (isNaN(lineIndex)) {\r\n                    lineIndex = -1;\r\n                }\r\n            }\r\n        }\r\n        if (!isControl && !isLine) {\r\n            return false;\r\n        }\r\n        var params = fillParams(moveable, e, {});\r\n        var result = triggerEvent(moveable, \"onRoundStart\", params);\r\n        if (result === false) {\r\n            return false;\r\n        }\r\n        datas.lineIndex = lineIndex;\r\n        datas.controlIndex = controlIndex;\r\n        datas.isControl = isControl;\r\n        datas.isLine = isLine;\r\n        setDragStart(moveable, e);\r\n        var _a = moveable.props, roundRelative = _a.roundRelative, _b = _a.minRoundControls, minRoundControls = _b === void 0 ? [0, 0] : _b;\r\n        var state = moveable.state;\r\n        var width = state.width, height = state.height;\r\n        datas.isRound = true;\r\n        datas.prevDist = [0, 0];\r\n        var borderRadius = getStyleBorderRadius(moveable);\r\n        var controlPoses = getBorderRadius(borderRadius || \"\", width, height, minRoundControls, true) || [];\r\n        datas.controlPoses = controlPoses;\r\n        state.borderRadiusState = getRadiusStyles(controlPoses, roundRelative, width, height).styles.join(\" \");\r\n        return params;\r\n    },\r\n    dragControl: function (moveable, e) {\r\n        var datas = e.datas;\r\n        var controlPoses = datas.controlPoses;\r\n        if (!datas.isRound || !datas.isControl || !controlPoses.length) {\r\n            return false;\r\n        }\r\n        var index = datas.controlIndex;\r\n        var _a = __read(getDragDist(e), 2), distX = _a[0], distY = _a[1];\r\n        var dist = [distX, distY];\r\n        var delta = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(dist, datas.prevDist);\r\n        var _b = moveable.props.maxRoundControls, maxRoundControls = _b === void 0 ? [4, 4] : _b;\r\n        var _c = moveable.state, width = _c.width, height = _c.height;\r\n        var selectedControlPose = controlPoses[index];\r\n        var selectedVertical = selectedControlPose.vertical;\r\n        var selectedHorizontal = selectedControlPose.horizontal;\r\n        // 0: [0, 1, 2, 3] maxCount === 1\r\n        // 0: [0, 2] maxCount === 2\r\n        // 1: [1, 3] maxCount === 2\r\n        // 0: [0] maxCount === 3\r\n        // 1: [1, 3] maxCount === 3\r\n        var dists = controlPoses.map(function (pose) {\r\n            var horizontal = pose.horizontal, vertical = pose.vertical;\r\n            var poseDist = [\r\n                horizontal * selectedHorizontal * dist[0],\r\n                vertical * selectedVertical * dist[1],\r\n            ];\r\n            if (horizontal) {\r\n                if (maxRoundControls[0] === 1) {\r\n                    return poseDist;\r\n                }\r\n                else if (maxRoundControls[0] < 4 && horizontal !== selectedHorizontal) {\r\n                    return poseDist;\r\n                }\r\n            }\r\n            else if (maxRoundControls[1] === 0) {\r\n                poseDist[1] = vertical * selectedHorizontal * dist[0] / width * height;\r\n                return poseDist;\r\n            }\r\n            else if (selectedVertical) {\r\n                if (maxRoundControls[1] === 1) {\r\n                    return poseDist;\r\n                }\r\n                else if (maxRoundControls[1] < 4 && vertical !== selectedVertical) {\r\n                    return poseDist;\r\n                }\r\n            }\r\n            return [0, 0];\r\n        });\r\n        dists[index] = dist;\r\n        var nextPoses = controlPoses.map(function (info, i) {\r\n            return __assign(__assign({}, info), { pos: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(info.pos, dists[i]) });\r\n        });\r\n        if (index < 4) {\r\n            nextPoses.slice(0, index + 1).forEach(function (info) {\r\n                info.virtual = false;\r\n            });\r\n        }\r\n        else {\r\n            nextPoses.slice(4, index + 1).forEach(function (info) {\r\n                info.virtual = false;\r\n            });\r\n        }\r\n        datas.prevDist = [distX, distY];\r\n        return triggerRoundEvent(moveable, e, dist, delta, nextPoses);\r\n    },\r\n    dragControlEnd: function (moveable, e) {\r\n        var state = moveable.state;\r\n        state.borderRadiusState = \"\";\r\n        var datas = e.datas, isDouble = e.isDouble;\r\n        if (!datas.isRound) {\r\n            return false;\r\n        }\r\n        var isControl = datas.isControl, controlIndex = datas.controlIndex, isLine = datas.isLine, lineIndex = datas.lineIndex;\r\n        var controlPoses = datas.controlPoses;\r\n        var length = controlPoses.filter(function (_a) {\r\n            var virtual = _a.virtual;\r\n            return virtual;\r\n        }).length;\r\n        var _a = moveable.props.roundClickable, roundClickable = _a === void 0 ? true : _a;\r\n        if (isDouble && roundClickable) {\r\n            if (isControl && (roundClickable === true || roundClickable === \"control\")) {\r\n                removeBorderRadius(controlPoses, controlIndex);\r\n            }\r\n            else if (isLine && (roundClickable === true || roundClickable === \"line\")) {\r\n                var _b = __read(calculatePointerDist(moveable, e), 2), distX = _b[0], distY = _b[1];\r\n                addBorderRadiusByLine(controlPoses, lineIndex, distX, distY);\r\n            }\r\n            if (length !== controlPoses.filter(function (_a) {\r\n                var virtual = _a.virtual;\r\n                return virtual;\r\n            }).length) {\r\n                triggerRoundEvent(moveable, e, [0, 0], [0, 0], controlPoses);\r\n            }\r\n        }\r\n        var params = fillEndParams(moveable, e, {});\r\n        triggerEvent(moveable, \"onRoundEnd\", params);\r\n        state.borderRadiusState = \"\";\r\n        return params;\r\n    },\r\n    dragGroupControlStart: function (moveable, e) {\r\n        var result = this.dragControlStart(moveable, e);\r\n        if (!result) {\r\n            return false;\r\n        }\r\n        var moveables = moveable.moveables;\r\n        var targets = moveable.props.targets;\r\n        var events = fillChildEvents(moveable, \"roundable\", e);\r\n        var nextParams = __assign({ targets: moveable.props.targets, events: events.map(function (ev, i) {\r\n                return __assign(__assign({}, ev), { target: targets[i], moveable: moveables[i], currentTarget: moveables[i] });\r\n            }) }, result);\r\n        triggerEvent(moveable, \"onRoundGroupStart\", nextParams);\r\n        return result;\r\n    },\r\n    dragGroupControl: function (moveable, e) {\r\n        var result = this.dragControl(moveable, e);\r\n        if (!result) {\r\n            return false;\r\n        }\r\n        var moveables = moveable.moveables;\r\n        var targets = moveable.props.targets;\r\n        var events = fillChildEvents(moveable, \"roundable\", e);\r\n        var nextParams = __assign({ targets: moveable.props.targets, events: events.map(function (ev, i) {\r\n                return __assign(__assign(__assign({}, ev), { target: targets[i], moveable: moveables[i], currentTarget: moveables[i] }), fillCSSObject({\r\n                    borderRadius: result.borderRadius,\r\n                }, ev));\r\n            }) }, result);\r\n        triggerEvent(moveable, \"onRoundGroup\", nextParams);\r\n        return nextParams;\r\n    },\r\n    dragGroupControlEnd: function (moveable, e) {\r\n        var moveables = moveable.moveables;\r\n        var targets = moveable.props.targets;\r\n        var events = fillChildEvents(moveable, \"roundable\", e);\r\n        catchEvent(moveable, \"onRound\", function (parentEvent) {\r\n            var nextParams = __assign({ targets: moveable.props.targets, events: events.map(function (ev, i) {\r\n                    return __assign(__assign(__assign({}, ev), { target: targets[i], moveable: moveables[i], currentTarget: moveables[i] }), fillCSSObject({\r\n                        borderRadius: parentEvent.borderRadius,\r\n                    }, ev));\r\n                }) }, parentEvent);\r\n            triggerEvent(moveable, \"onRoundGroup\", nextParams);\r\n        });\r\n        var result = this.dragControlEnd(moveable, e);\r\n        if (!result) {\r\n            return false;\r\n        }\r\n        var nextParams = __assign({ targets: moveable.props.targets, events: events.map(function (ev, i) {\r\n                var _a;\r\n                return __assign(__assign({}, ev), { target: targets[i], moveable: moveables[i], currentTarget: moveables[i], lastEvent: (_a = ev.datas) === null || _a === void 0 ? void 0 : _a.lastEvent });\r\n            }) }, result);\r\n        triggerEvent(moveable, \"onRoundGroupEnd\", nextParams);\r\n        return nextParams;\r\n    },\r\n    unset: function (moveable) {\r\n        moveable.state.borderRadiusState = \"\";\r\n    },\r\n};\r\n/**\r\n * Whether to show and drag or double click border-radius, (default: false)\r\n * @name Moveable.Roundable#roundable\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     roundable: true,\r\n *     roundRelative: false,\r\n * });\r\n * moveable.on(\"roundStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"round\", e => {\r\n *     e.target.style.borderRadius = e.borderRadius;\r\n * }).on(\"roundEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * % Can be used instead of the absolute px\r\n * @name Moveable.Roundable#roundRelative\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     roundable: true,\r\n *     roundRelative: false,\r\n * });\r\n * moveable.on(\"roundStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"round\", e => {\r\n *     e.target.style.borderRadius = e.borderRadius;\r\n * }).on(\"roundEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * Minimum number of round controls. It moves in proportion by control. [horizontal, vertical] (default: [0, 0])\r\n * @name Moveable.Roundable#minRoundControls\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     roundable: true,\r\n *     roundRelative: false,\r\n *     minRoundControls: [0, 0],\r\n * });\r\n * moveable.minRoundControls = [1, 0];\r\n */\r\n/**\r\n * Maximum number of round controls. It moves in proportion by control. [horizontal, vertical] (default: [4, 4])\r\n * @name Moveable.Roundable#maxRoundControls\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     roundable: true,\r\n *     roundRelative: false,\r\n *     maxRoundControls: [4, 4],\r\n * });\r\n * moveable.maxRoundControls = [1, 0];\r\n */\r\n/**\r\n * Whether you can add/delete round controls by double-clicking a line or control.\r\n * @name Moveable.Roundable#roundClickable\r\n * @default true\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     roundable: true,\r\n *     roundRelative: false,\r\n *     roundClickable: true,\r\n * });\r\n * moveable.roundClickable = false;\r\n */\r\n/**\r\n * Whether to show a round control that does not actually exist as a shadow\r\n * @name Moveable.Roundable#isDisplayShadowRoundControls\r\n * @default false\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     roundable: true,\r\n *     isDisplayShadowRoundControls: false,\r\n * });\r\n * moveable.isDisplayShadowRoundControls = true;\r\n */\r\n/**\r\n * The padding value of the position of the round control\r\n * @name Moveable.Roundable#roundPadding\r\n * @default false\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     roundable: true,\r\n *     roundPadding: 0,\r\n * });\r\n * moveable.roundPadding = 15;\r\n */\r\n/**\r\n * When drag start the clip area or controls, the `roundStart` event is called.\r\n * @memberof Moveable.Roundable\r\n * @event roundStart\r\n * @param {Moveable.Roundable.OnRoundStart} - Parameters for the `roundStart` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     roundable: true,\r\n *     roundRelative: false,\r\n * });\r\n * moveable.on(\"roundStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"round\", e => {\r\n *     e.target.style.borderRadius = e.borderRadius;\r\n * }).on(\"roundEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * When drag or double click the border area or controls, the `round` event is called.\r\n * @memberof Moveable.Roundable\r\n * @event round\r\n * @param {Moveable.Roundable.OnRound} - Parameters for the `round` event\r\n * @example\r\n  * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     roundable: true,\r\n *     roundRelative: false,\r\n * });\r\n * moveable.on(\"roundStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"round\", e => {\r\n *     e.target.style.borderRadius = e.borderRadius;\r\n * }).on(\"roundEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * When drag end the border area or controls, the `roundEnd` event is called.\r\n * @memberof Moveable.Roundable\r\n * @event roundEnd\r\n * @param {Moveable.Roundable.onRoundEnd} - Parameters for the `roundEnd` event\r\n * @example\r\n  * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     roundable: true,\r\n *     roundRelative: false,\r\n * });\r\n * moveable.on(\"roundStart\", e => {\r\n *     console.log(e);\r\n * }).on(\"round\", e => {\r\n *     e.target.style.borderRadius = e.borderRadius;\r\n * }).on(\"roundEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * When drag start the clip area or controls, the `roundGroupStart` event is called.\r\n * @memberof Moveable.Roundable\r\n * @event roundGroupStart\r\n * @param {Moveable.Roundable.OnRoundGroupStart} - Parameters for the `roundGroupStart` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     targets: [target1, target2, target3],\r\n *     roundable: true,\r\n * });\r\n * moveable.on(\"roundGroupStart\", e => {\r\n *     console.log(e.targets);\r\n * }).on(\"roundGroup\", e => {\r\n *   e.events.forEach(ev => {\r\n *       ev.target.style.cssText += ev.cssText;\r\n *   });\r\n * }).on(\"roundGroupEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * When drag or double click the border area or controls, the `roundGroup` event is called.\r\n * @memberof Moveable.Roundable\r\n * @event roundGroup\r\n * @param {Moveable.Roundable.OnRoundGroup} - Parameters for the `roundGroup` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     targets: [target1, target2, target3],\r\n *     roundable: true,\r\n * });\r\n * moveable.on(\"roundGroupStart\", e => {\r\n *     console.log(e.targets);\r\n * }).on(\"roundGroup\", e => {\r\n *   e.events.forEach(ev => {\r\n *       ev.target.style.cssText += ev.cssText;\r\n *   });\r\n * }).on(\"roundGroupEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\r\n/**\r\n * When drag end the border area or controls, the `roundGroupEnd` event is called.\r\n * @memberof Moveable.Roundable\r\n * @event roundGroupEnd\r\n * @param {Moveable.Roundable.onRoundGroupEnd} - Parameters for the `roundGroupEnd` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     targets: [target1, target2, target3],\r\n *     roundable: true,\r\n * });\r\n * moveable.on(\"roundGroupStart\", e => {\r\n *     console.log(e.targets);\r\n * }).on(\"roundGroup\", e => {\r\n *     e.events.forEach(ev => {\r\n *         ev.target.style.cssText += ev.cssText;\r\n *     });\r\n * }).on(\"roundGroupEnd\", e => {\r\n *     console.log(e);\r\n * });\r\n */\n\nfunction isIdentityMatrix(matrix, is3d) {\r\n    var n = is3d ? 4 : 3;\r\n    var identityMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n);\r\n    var value = \"matrix\".concat(is3d ? \"3d\" : \"\", \"(\").concat(identityMatrix.join(\",\"), \")\");\r\n    return matrix === value || matrix === \"matrix(1,0,0,1,0,0)\";\r\n}\r\nvar BeforeRenderable = {\r\n    isPinch: true,\r\n    name: \"beforeRenderable\",\r\n    props: [],\r\n    events: [\r\n        \"beforeRenderStart\",\r\n        \"beforeRender\",\r\n        \"beforeRenderEnd\",\r\n        \"beforeRenderGroupStart\",\r\n        \"beforeRenderGroup\",\r\n        \"beforeRenderGroupEnd\",\r\n    ],\r\n    dragRelation: \"weak\",\r\n    setTransform: function (moveable, e) {\r\n        var _a = moveable.state, is3d = _a.is3d, targetMatrix = _a.targetMatrix, inlineTransform = _a.inlineTransform;\r\n        var cssMatrix = is3d\r\n            ? \"matrix3d(\".concat(targetMatrix.join(\",\"), \")\")\r\n            : \"matrix(\".concat((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertMatrixtoCSS)(targetMatrix, true), \")\");\r\n        var startTransform = !inlineTransform || inlineTransform === \"none\" ? cssMatrix : inlineTransform;\r\n        e.datas.startTransforms = isIdentityMatrix(startTransform, is3d) ? [] : (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitSpace)(startTransform);\r\n    },\r\n    resetStyle: function (e) {\r\n        var datas = e.datas;\r\n        datas.nextStyle = {};\r\n        datas.nextTransforms = e.datas.startTransforms;\r\n        datas.nextTransformAppendedIndexes = [];\r\n    },\r\n    fillDragStartParams: function (moveable, e) {\r\n        return fillParams(moveable, e, {\r\n            setTransform: function (transform) {\r\n                e.datas.startTransforms = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(transform) ? transform : (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.splitSpace)(transform);\r\n            },\r\n            isPinch: !!e.isPinch,\r\n        });\r\n    },\r\n    fillDragParams: function (moveable, e) {\r\n        return fillParams(moveable, e, {\r\n            isPinch: !!e.isPinch,\r\n        });\r\n    },\r\n    dragStart: function (moveable, e) {\r\n        this.setTransform(moveable, e);\r\n        this.resetStyle(e);\r\n        triggerEvent(moveable, \"onBeforeRenderStart\", this.fillDragStartParams(moveable, e));\r\n    },\r\n    drag: function (moveable, e) {\r\n        if (!e.datas.startTransforms) {\r\n            this.setTransform(moveable, e);\r\n        }\r\n        this.resetStyle(e);\r\n        triggerEvent(moveable, \"onBeforeRender\", fillParams(moveable, e, {\r\n            isPinch: !!e.isPinch,\r\n        }));\r\n    },\r\n    dragEnd: function (moveable, e) {\r\n        if (!e.datas.startTransforms) {\r\n            this.setTransform(moveable, e);\r\n            this.resetStyle(e);\r\n        }\r\n        triggerEvent(moveable, \"onBeforeRenderEnd\", fillParams(moveable, e, {\r\n            isPinch: !!e.isPinch,\r\n            isDrag: e.isDrag,\r\n        }));\r\n    },\r\n    dragGroupStart: function (moveable, e) {\r\n        var _this = this;\r\n        this.dragStart(moveable, e);\r\n        var events = fillChildEvents(moveable, \"beforeRenderable\", e);\r\n        var moveables = moveable.moveables;\r\n        var params = events.map(function (childEvent, i) {\r\n            var childMoveable = moveables[i];\r\n            _this.setTransform(childMoveable, childEvent);\r\n            _this.resetStyle(childEvent);\r\n            return _this.fillDragStartParams(childMoveable, childEvent);\r\n        });\r\n        triggerEvent(moveable, \"onBeforeRenderGroupStart\", fillParams(moveable, e, {\r\n            isPinch: !!e.isPinch,\r\n            targets: moveable.props.targets,\r\n            setTransform: function () { },\r\n            events: params,\r\n        }));\r\n    },\r\n    dragGroup: function (moveable, e) {\r\n        var _this = this;\r\n        this.drag(moveable, e);\r\n        var events = fillChildEvents(moveable, \"beforeRenderable\", e);\r\n        var moveables = moveable.moveables;\r\n        var params = events.map(function (childEvent, i) {\r\n            var childMoveable = moveables[i];\r\n            _this.resetStyle(childEvent);\r\n            return _this.fillDragParams(childMoveable, childEvent);\r\n        });\r\n        triggerEvent(moveable, \"onBeforeRenderGroup\", fillParams(moveable, e, {\r\n            isPinch: !!e.isPinch,\r\n            targets: moveable.props.targets,\r\n            events: params,\r\n        }));\r\n    },\r\n    dragGroupEnd: function (moveable, e) {\r\n        this.dragEnd(moveable, e);\r\n        triggerEvent(moveable, \"onBeforeRenderGroupEnd\", fillParams(moveable, e, {\r\n            isPinch: !!e.isPinch,\r\n            isDrag: e.isDrag,\r\n            targets: moveable.props.targets,\r\n        }));\r\n    },\r\n    dragControlStart: function (moveable, e) {\r\n        return this.dragStart(moveable, e);\r\n    },\r\n    dragControl: function (moveable, e) {\r\n        return this.drag(moveable, e);\r\n    },\r\n    dragControlEnd: function (moveable, e) {\r\n        return this.dragEnd(moveable, e);\r\n    },\r\n    dragGroupControlStart: function (moveable, e) {\r\n        return this.dragGroupStart(moveable, e);\r\n    },\r\n    dragGroupControl: function (moveable, e) {\r\n        return this.dragGroup(moveable, e);\r\n    },\r\n    dragGroupControlEnd: function (moveable, e) {\r\n        return this.dragGroupEnd(moveable, e);\r\n    },\r\n};\n\nvar Renderable = {\r\n    name: \"renderable\",\r\n    props: [],\r\n    events: [\r\n        \"renderStart\",\r\n        \"render\",\r\n        \"renderEnd\",\r\n        \"renderGroupStart\",\r\n        \"renderGroup\",\r\n        \"renderGroupEnd\",\r\n    ],\r\n    dragRelation: \"weak\",\r\n    dragStart: function (moveable, e) {\r\n        triggerEvent(moveable, \"onRenderStart\", fillParams(moveable, e, {\r\n            isPinch: !!e.isPinch,\r\n        }));\r\n    },\r\n    drag: function (moveable, e) {\r\n        triggerEvent(moveable, \"onRender\", this.fillDragParams(moveable, e));\r\n    },\r\n    dragAfter: function (moveable, e) {\r\n        return this.drag(moveable, e);\r\n    },\r\n    dragEnd: function (moveable, e) {\r\n        triggerEvent(moveable, \"onRenderEnd\", this.fillDragEndParams(moveable, e));\r\n    },\r\n    dragGroupStart: function (moveable, e) {\r\n        triggerEvent(moveable, \"onRenderGroupStart\", fillParams(moveable, e, {\r\n            isPinch: !!e.isPinch,\r\n            targets: moveable.props.targets,\r\n        }));\r\n    },\r\n    dragGroup: function (moveable, e) {\r\n        var _this = this;\r\n        var events = fillChildEvents(moveable, \"beforeRenderable\", e);\r\n        var moveables = moveable.moveables;\r\n        var params = events.map(function (childEvent, i) {\r\n            var childMoveable = moveables[i];\r\n            return _this.fillDragParams(childMoveable, childEvent);\r\n        });\r\n        triggerEvent(moveable, \"onRenderGroup\", fillParams(moveable, e, __assign(__assign({ isPinch: !!e.isPinch, targets: moveable.props.targets, transform: getNextTransformText(e), transformObject: {} }, fillCSSObject(getNextStyle(e))), { events: params })));\r\n    },\r\n    dragGroupEnd: function (moveable, e) {\r\n        var _this = this;\r\n        var events = fillChildEvents(moveable, \"beforeRenderable\", e);\r\n        var moveables = moveable.moveables;\r\n        var params = events.map(function (childEvent, i) {\r\n            var childMoveable = moveables[i];\r\n            return _this.fillDragEndParams(childMoveable, childEvent);\r\n        });\r\n        triggerEvent(moveable, \"onRenderGroupEnd\", fillParams(moveable, e, __assign({ isPinch: !!e.isPinch, isDrag: e.isDrag, targets: moveable.props.targets, events: params, transformObject: {}, transform: getNextTransformText(e) }, fillCSSObject(getNextStyle(e)))));\r\n    },\r\n    dragControlStart: function (moveable, e) {\r\n        return this.dragStart(moveable, e);\r\n    },\r\n    dragControl: function (moveable, e) {\r\n        return this.drag(moveable, e);\r\n    },\r\n    dragControlAfter: function (moveable, e) {\r\n        return this.dragAfter(moveable, e);\r\n    },\r\n    dragControlEnd: function (moveable, e) {\r\n        return this.dragEnd(moveable, e);\r\n    },\r\n    dragGroupControlStart: function (moveable, e) {\r\n        return this.dragGroupStart(moveable, e);\r\n    },\r\n    dragGroupControl: function (moveable, e) {\r\n        return this.dragGroup(moveable, e);\r\n    },\r\n    dragGroupControlEnd: function (moveable, e) {\r\n        return this.dragGroupEnd(moveable, e);\r\n    },\r\n    fillDragParams: function (moveable, e) {\r\n        var transformObject = {};\r\n        (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.parse)(getNextTransforms(e) || []).forEach(function (matrixInfo) {\r\n            transformObject[matrixInfo.name] = matrixInfo.functionValue;\r\n        });\r\n        return fillParams(moveable, e, __assign({ isPinch: !!e.isPinch, transformObject: transformObject, transform: getNextTransformText(e) }, fillCSSObject(getNextStyle(e))));\r\n    },\r\n    fillDragEndParams: function (moveable, e) {\r\n        var transformObject = {};\r\n        (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.parse)(getNextTransforms(e) || []).forEach(function (matrixInfo) {\r\n            transformObject[matrixInfo.name] = matrixInfo.functionValue;\r\n        });\r\n        return fillParams(moveable, e, __assign({ isPinch: !!e.isPinch, isDrag: e.isDrag, transformObject: transformObject, transform: getNextTransformText(e) }, fillCSSObject(getNextStyle(e))));\r\n    },\r\n};\n\nfunction triggerAble(moveable, moveableAbles, eventOperations, eventAffix, eventType, e, requestInstant) {\r\n    // pre setting\r\n    e.clientDistX = e.distX;\r\n    e.clientDistY = e.distY;\r\n    var isStart = eventType === \"Start\";\r\n    var isEnd = eventType === \"End\";\r\n    var isAfter = eventType === \"After\";\r\n    var target = moveable.state.target;\r\n    var isRequest = e.isRequest;\r\n    var isControl = eventAffix.indexOf(\"Control\") > -1;\r\n    if (!target\r\n        || (isStart && isControl && !isRequest && moveable.areaElement === e.inputEvent.target)) {\r\n        return false;\r\n    }\r\n    var ables = __spreadArray([], __read(moveableAbles), false);\r\n    if (isRequest) {\r\n        var requestAble_1 = e.requestAble;\r\n        if (!ables.some(function (able) { return able.name === requestAble_1; })) {\r\n            ables.push.apply(ables, __spreadArray([], __read(moveable.props.ables.filter(function (able) { return able.name === requestAble_1; })), false));\r\n        }\r\n    }\r\n    if (!ables.length || ables.every(function (able) { return able.dragRelation; })) {\r\n        return false;\r\n    }\r\n    // \"drag\" \"Control\" \"After\"\r\n    var inputEvent = e.inputEvent;\r\n    var inputTarget;\r\n    if (isEnd && inputEvent) {\r\n        inputTarget = document.elementFromPoint(e.clientX, e.clientY) || inputEvent.target;\r\n    }\r\n    var isDragStop = false;\r\n    var stop = function () {\r\n        var _a;\r\n        isDragStop = true;\r\n        (_a = e.stop) === null || _a === void 0 ? void 0 : _a.call(e);\r\n    };\r\n    var isFirstStart = isStart && (!moveable.targetGesto || !moveable.controlGesto\r\n        || (!moveable.targetGesto.isFlag() || !moveable.controlGesto.isFlag()));\r\n    if (isFirstStart) {\r\n        moveable.updateRect(eventType, true, false);\r\n    }\r\n    // trigger ables\r\n    var datas = e.datas;\r\n    var gestoType = isControl ? \"controlGesto\" : \"targetGesto\";\r\n    var prevGesto = moveable[gestoType];\r\n    var trigger = function (able, eventName, conditionName) {\r\n        if (!(eventName in able) || prevGesto !== moveable[gestoType]) {\r\n            return false;\r\n        }\r\n        var ableName = able.name;\r\n        var nextDatas = datas[ableName] || (datas[ableName] = {});\r\n        if (isStart) {\r\n            nextDatas.isEventStart = !conditionName\r\n                || !able[conditionName] || able[conditionName](moveable, e);\r\n        }\r\n        if (!nextDatas.isEventStart) {\r\n            return false;\r\n        }\r\n        var result = able[eventName](moveable, __assign(__assign({}, e), { stop: stop, datas: nextDatas, originalDatas: datas, inputTarget: inputTarget }));\r\n        moveable._emitter.off();\r\n        if (isStart && result === false) {\r\n            nextDatas.isEventStart = false;\r\n        }\r\n        return result;\r\n    };\r\n    // unset ables for first drag start\r\n    if (isFirstStart) {\r\n        ables.forEach(function (able) {\r\n            able.unset && able.unset(moveable);\r\n        });\r\n    }\r\n    // BeforeRenderable\r\n    trigger(BeforeRenderable, \"drag\".concat(eventAffix).concat(eventType));\r\n    var forceEndedCount = 0;\r\n    var updatedCount = 0;\r\n    eventOperations.forEach(function (eventOperation) {\r\n        if (isDragStop) {\r\n            return false;\r\n        }\r\n        var eventName = \"\".concat(eventOperation).concat(eventAffix).concat(eventType);\r\n        var conditionName = \"\".concat(eventOperation).concat(eventAffix, \"Condition\");\r\n        if (eventType === \"\" && !isRequest) {\r\n            // Convert distX, distY\r\n            convertDragDist(moveable.state, e);\r\n        }\r\n        // const isGroup = eventAffix.indexOf(\"Group\") > -1;\r\n        var eventAbles = ables.filter(function (able) { return able[eventName]; });\r\n        eventAbles = eventAbles.filter(function (able, i) {\r\n            return able.name && eventAbles.indexOf(able) === i;\r\n        });\r\n        var results = eventAbles.filter(function (able) { return trigger(able, eventName, conditionName); });\r\n        var isUpdate = results.length;\r\n        // end ables\r\n        if (isDragStop) {\r\n            ++forceEndedCount;\r\n        }\r\n        if (isUpdate) {\r\n            ++updatedCount;\r\n        }\r\n        if (!isDragStop && isStart && eventAbles.length && !isUpdate) {\r\n            forceEndedCount += eventAbles.filter(function (able) {\r\n                var ableName = able.name;\r\n                var nextDatas = datas[ableName];\r\n                if (nextDatas.isEventStart) {\r\n                    if (able.dragRelation === \"strong\") {\r\n                        return false;\r\n                    }\r\n                    // stop drag\r\n                    return true;\r\n                }\r\n                // pre stop drag\r\n                return false;\r\n            }).length ? 1 : 0;\r\n        }\r\n    });\r\n    if (!isAfter || updatedCount) {\r\n        trigger(Renderable, \"drag\".concat(eventAffix).concat(eventType));\r\n    }\r\n    // stop gesto condition\r\n    var isForceEnd = prevGesto !== moveable[gestoType] || forceEndedCount === eventOperations.length;\r\n    if (isEnd || isDragStop || isForceEnd) {\r\n        moveable.state.gestos = {};\r\n        if (moveable.moveables) {\r\n            moveable.moveables.forEach(function (childMoveable) {\r\n                childMoveable.state.gestos = {};\r\n            });\r\n        }\r\n        ables.forEach(function (able) {\r\n            able.unset && able.unset(moveable);\r\n        });\r\n    }\r\n    if (isStart && !isForceEnd && !isRequest && updatedCount && moveable.props.preventDefault) {\r\n        e === null || e === void 0 ? void 0 : e.preventDefault();\r\n    }\r\n    if (moveable.isUnmounted || isForceEnd) {\r\n        return false;\r\n    }\r\n    if ((!isStart && updatedCount && !requestInstant) || isEnd) {\r\n        var flushSync = moveable.props.flushSync || defaultSync;\r\n        flushSync(function () {\r\n            moveable.updateRect(isEnd ? eventType : \"\", true, false);\r\n            moveable.forceUpdate();\r\n        });\r\n    }\r\n    if (!isStart && !isEnd && !isAfter && updatedCount && !requestInstant) {\r\n        triggerAble(moveable, moveableAbles, eventOperations, eventAffix, eventType + \"After\", e);\r\n    }\r\n    return true;\r\n}\r\nfunction checkMoveableTarget(moveable, isControl) {\r\n    return function (e, target) {\r\n        var _a;\r\n        if (target === void 0) { target = e.inputEvent.target; }\r\n        var eventTarget = target;\r\n        var areaElement = moveable.areaElement;\r\n        var dragTargetElement = moveable._dragTarget;\r\n        if (!dragTargetElement || (!isControl && ((_a = moveable.controlGesto) === null || _a === void 0 ? void 0 : _a.isFlag()))) {\r\n            return false;\r\n        }\r\n        return eventTarget === dragTargetElement\r\n            || dragTargetElement.contains(eventTarget)\r\n            || eventTarget === areaElement\r\n            || (!moveable.isMoveableElement(eventTarget) && !moveable.controlBox.contains(eventTarget))\r\n            || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(eventTarget, \"moveable-area\")\r\n            || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(eventTarget, \"moveable-padding\")\r\n            || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(eventTarget, \"moveable-edgeDraggable\");\r\n    };\r\n}\r\nfunction getTargetAbleGesto(moveable, moveableTarget, eventAffix) {\r\n    var controlBox = moveable.controlBox;\r\n    var targets = [];\r\n    var props = moveable.props;\r\n    var dragArea = props.dragArea;\r\n    var target = moveable.state.target;\r\n    var dragTarget = props.dragTarget;\r\n    targets.push(controlBox);\r\n    if (!dragArea || dragTarget) {\r\n        targets.push(moveableTarget);\r\n    }\r\n    if (!dragArea && dragTarget && target && moveableTarget !== target && props.dragTargetSelf) {\r\n        targets.push(target);\r\n    }\r\n    var checkTarget = checkMoveableTarget(moveable);\r\n    return getAbleGesto(moveable, targets, \"targetAbles\", eventAffix, {\r\n        dragStart: checkTarget,\r\n        pinchStart: checkTarget,\r\n    });\r\n}\r\nfunction getControlAbleGesto(moveable, eventAffix) {\r\n    var controlBox = moveable.controlBox;\r\n    var targets = [];\r\n    targets.push(controlBox);\r\n    var checkTarget = checkMoveableTarget(moveable, true);\r\n    var checkControlTarget = function (e, target) {\r\n        if (target === void 0) { target = e.inputEvent.target; }\r\n        if (target === controlBox) {\r\n            return true;\r\n        }\r\n        var result = checkTarget(e, target);\r\n        return !result;\r\n    };\r\n    return getAbleGesto(moveable, targets, \"controlAbles\", eventAffix, {\r\n        dragStart: checkControlTarget,\r\n        pinchStart: checkControlTarget,\r\n    });\r\n}\r\nfunction getAbleGesto(moveable, target, ableType, eventAffix, conditionFunctions) {\r\n    if (conditionFunctions === void 0) { conditionFunctions = {}; }\r\n    var isTargetAbles = ableType === \"targetAbles\";\r\n    var _a = moveable.props, pinchOutside = _a.pinchOutside, pinchThreshold = _a.pinchThreshold, preventClickEventOnDrag = _a.preventClickEventOnDrag, preventClickDefault = _a.preventClickDefault, checkInput = _a.checkInput, dragFocusedInput = _a.dragFocusedInput, _b = _a.preventDefault, preventDefault = _b === void 0 ? true : _b, _c = _a.preventRightClick, preventRightClick = _c === void 0 ? true : _c, _d = _a.preventWheelClick, preventWheelClick = _d === void 0 ? true : _d, dragContaienrOption = _a.dragContainer;\r\n    var dragContainer = getRefTarget(dragContaienrOption, true);\r\n    var options = {\r\n        preventDefault: preventDefault,\r\n        preventRightClick: preventRightClick,\r\n        preventWheelClick: preventWheelClick,\r\n        container: dragContainer || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getWindow)(moveable.getControlBoxElement()),\r\n        pinchThreshold: pinchThreshold,\r\n        pinchOutside: pinchOutside,\r\n        preventClickEventOnDrag: isTargetAbles ? preventClickEventOnDrag : false,\r\n        preventClickEventOnDragStart: isTargetAbles ? preventClickDefault : false,\r\n        preventClickEventByCondition: isTargetAbles ? null : function (e) {\r\n            return moveable.controlBox.contains(e.target);\r\n        },\r\n        checkInput: isTargetAbles ? checkInput : false,\r\n        dragFocusedInput: dragFocusedInput,\r\n    };\r\n    var gesto = new gesto__WEBPACK_IMPORTED_MODULE_9__[\"default\"](target, options);\r\n    var isControl = eventAffix === \"Control\";\r\n    [\"drag\", \"pinch\"].forEach(function (eventOperation) {\r\n        [\"Start\", \"\", \"End\"].forEach(function (eventType) {\r\n            gesto.on(\"\".concat(eventOperation).concat(eventType), function (e) {\r\n                var _a;\r\n                var eventName = e.eventType;\r\n                var isPinchScheduled = eventOperation === \"drag\" && e.isPinch;\r\n                if (conditionFunctions[eventName] && !conditionFunctions[eventName](e)) {\r\n                    e.stop();\r\n                    return;\r\n                }\r\n                if (isPinchScheduled) {\r\n                    return;\r\n                }\r\n                var eventOperations = eventOperation === \"drag\" ? [eventOperation] : [\"drag\", eventOperation];\r\n                var moveableAbles = __spreadArray([], __read(moveable[ableType]), false);\r\n                var result = triggerAble(moveable, moveableAbles, eventOperations, eventAffix, eventType, e);\r\n                if (!result) {\r\n                    e.stop();\r\n                }\r\n                else if (moveable.props.stopPropagation || (eventType === \"Start\" && isControl)) {\r\n                    (_a = e === null || e === void 0 ? void 0 : e.inputEvent) === null || _a === void 0 ? void 0 : _a.stopPropagation();\r\n                }\r\n            });\r\n        });\r\n    });\r\n    return gesto;\r\n}\n\nvar EventManager = /*#__PURE__*/ (function () {\r\n    function EventManager(target, moveable, eventName) {\r\n        var _this = this;\r\n        this.target = target;\r\n        this.moveable = moveable;\r\n        this.eventName = eventName;\r\n        this.ables = [];\r\n        this._onEvent = function (e) {\r\n            var eventName = _this.eventName;\r\n            var moveable = _this.moveable;\r\n            if (moveable.state.disableNativeEvent) {\r\n                return;\r\n            }\r\n            _this.ables.forEach(function (able) {\r\n                able[eventName](moveable, {\r\n                    inputEvent: e,\r\n                });\r\n            });\r\n        };\r\n        target.addEventListener(eventName.toLowerCase(), this._onEvent);\r\n    }\r\n    EventManager.prototype.setAbles = function (ables) {\r\n        this.ables = ables;\r\n    };\r\n    EventManager.prototype.destroy = function () {\r\n        this.target.removeEventListener(this.eventName.toLowerCase(), this._onEvent);\r\n        this.target = null;\r\n        this.moveable = null;\r\n    };\r\n    return EventManager;\r\n}());\n\nfunction calculateMatrixStack(target, container, rootContainer, isAbsolute3d) {\r\n    var _a;\r\n    if (rootContainer === void 0) { rootContainer = container; }\r\n    var _b = getMatrixStackInfo(target, container), matrixes = _b.matrixes, is3d = _b.is3d, prevTargetMatrix = _b.targetMatrix, transformOrigin = _b.transformOrigin, targetOrigin = _b.targetOrigin, offsetContainer = _b.offsetContainer, hasFixed = _b.hasFixed, containerZoom = _b.zoom; // prevMatrix\r\n    var _c = getCachedMatrixContainerInfo(offsetContainer, rootContainer), rootMatrixes = _c.matrixes, isRoot3d = _c.is3d, offsetRootContainer = _c.offsetContainer, rootZoom = _c.zoom; // prevRootMatrix\r\n    // if (rootContainer === document.body) {\r\n    //     console.log(offsetContainer, rootContainer, rootMatrixes);\r\n    // }\r\n    var isNext3d = isAbsolute3d || isRoot3d || is3d;\r\n    var n = isNext3d ? 4 : 3;\r\n    var isSVGGraphicElement = target.tagName.toLowerCase() !== \"svg\" && \"ownerSVGElement\" in target;\r\n    var targetMatrix = prevTargetMatrix;\r\n    // let allMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);\r\n    // let rootMatrix = prevRootMatrix ? convertDimension(prevRootMatrix, prevN!, n) : createIdentityMatrix(n);\r\n    // let beforeMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);\r\n    var allMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n);\r\n    var rootMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n);\r\n    var beforeMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n);\r\n    var offsetMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n);\r\n    var length = matrixes.length;\r\n    var nextRootMatrixes = rootMatrixes.map(function (info) {\r\n        return __assign(__assign({}, info), { matrix: info.matrix ? __spreadArray([], __read(info.matrix), false) : undefined });\r\n    }).reverse();\r\n    matrixes.reverse();\r\n    if (!is3d && isNext3d) {\r\n        targetMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertDimension)(targetMatrix, 3, 4);\r\n        convert3DMatrixes(matrixes);\r\n    }\r\n    if (!isRoot3d && isNext3d) {\r\n        convert3DMatrixes(nextRootMatrixes);\r\n    }\r\n    // rootMatrix = (...) -> container -> offset -> absolute -> offset -> absolute(targetMatrix)\r\n    // rootMatrixBeforeOffset = lastOffsetMatrix -> (...) -> container\r\n    // beforeMatrix = (... -> container -> offset -> absolute) -> offset -> absolute(targetMatrix)\r\n    // offsetMatrix = (... -> container -> offset -> absolute -> offset) -> absolute(targetMatrix)\r\n    nextRootMatrixes.forEach(function (info) {\r\n        rootMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(rootMatrix, info.matrix, n);\r\n    });\r\n    var originalRootContainer = rootContainer || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentBody)(target);\r\n    var endContainer = ((_a = nextRootMatrixes[0]) === null || _a === void 0 ? void 0 : _a.target)\r\n        || getOffsetInfo(originalRootContainer, originalRootContainer, true).offsetParent;\r\n    var rootMatrixBeforeOffset = nextRootMatrixes.slice(1).reduce(function (matrix, info) {\r\n        return (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(matrix, info.matrix, n);\r\n    }, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n));\r\n    matrixes.forEach(function (info, i) {\r\n        if (length - 2 === i) {\r\n            // length - 3\r\n            beforeMatrix = allMatrix.slice();\r\n        }\r\n        if (length - 1 === i) {\r\n            // length - 2\r\n            offsetMatrix = allMatrix.slice();\r\n        }\r\n        // calculate for SVGElement\r\n        if (!info.matrix) {\r\n            var nextInfo = matrixes[i + 1];\r\n            var offset = getSVGOffset(info, nextInfo, endContainer, n, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(rootMatrixBeforeOffset, allMatrix, n));\r\n            info.matrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createOriginMatrix)(offset, n);\r\n        }\r\n        allMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(allMatrix, info.matrix, n);\r\n    });\r\n    var isMatrix3d = !isSVGGraphicElement && is3d;\r\n    if (!targetMatrix) {\r\n        targetMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(isMatrix3d ? 4 : 3);\r\n    }\r\n    var targetTransform = makeMatrixCSS(isSVGGraphicElement && targetMatrix.length === 16\r\n        ? (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.convertDimension)(targetMatrix, 4, 3) : targetMatrix, isMatrix3d);\r\n    var originalRootMatrix = rootMatrix;\r\n    rootMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.ignoreDimension)(rootMatrix, n, n);\r\n    return {\r\n        hasZoom: containerZoom !== 1 || rootZoom !== 1,\r\n        hasFixed: hasFixed,\r\n        matrixes: matrixes,\r\n        rootMatrix: rootMatrix,\r\n        originalRootMatrix: originalRootMatrix,\r\n        beforeMatrix: beforeMatrix,\r\n        offsetMatrix: offsetMatrix,\r\n        allMatrix: allMatrix,\r\n        targetMatrix: targetMatrix,\r\n        targetTransform: targetTransform,\r\n        inlineTransform: target.style.transform,\r\n        transformOrigin: transformOrigin,\r\n        targetOrigin: targetOrigin,\r\n        is3d: isNext3d,\r\n        offsetContainer: offsetContainer,\r\n        offsetRootContainer: offsetRootContainer,\r\n    };\r\n}\n\nfunction calculateElementInfo(target, container, rootContainer, isAbsolute3d) {\r\n    if (rootContainer === void 0) { rootContainer = container; }\r\n    var width = 0;\r\n    var height = 0;\r\n    var rotation = 0;\r\n    var allResult = {};\r\n    var sizes = getSize(target);\r\n    if (target) {\r\n        width = sizes.offsetWidth;\r\n        height = sizes.offsetHeight;\r\n    }\r\n    if (target) {\r\n        var result = calculateMatrixStack(target, container, rootContainer, isAbsolute3d);\r\n        var position = calculateElementPosition(result.allMatrix, result.transformOrigin, width, height);\r\n        allResult = __assign(__assign({}, result), position);\r\n        var rotationPosition = calculateElementPosition(result.allMatrix, [50, 50], 100, 100);\r\n        rotation = getRotationRad([rotationPosition.pos1, rotationPosition.pos2], rotationPosition.direction);\r\n    }\r\n    var n = isAbsolute3d ? 4 : 3;\r\n    return __assign(__assign(__assign({ hasZoom: false, width: width, height: height, rotation: rotation }, sizes), { originalRootMatrix: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n), rootMatrix: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n), beforeMatrix: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n), offsetMatrix: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n), allMatrix: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n), targetMatrix: (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createIdentityMatrix)(n), targetTransform: \"\", inlineTransform: \"\", transformOrigin: [0, 0], targetOrigin: [0, 0], is3d: !!isAbsolute3d, left: 0, top: 0, right: 0, bottom: 0, origin: [0, 0], pos1: [0, 0], pos2: [0, 0], pos3: [0, 0], pos4: [0, 0], direction: 1, hasFixed: false, offsetContainer: null, offsetRootContainer: null, matrixes: [] }), allResult);\r\n}\r\nfunction getElementInfo(target, container, rootContainer) {\r\n    if (rootContainer === void 0) { rootContainer = container; }\r\n    return calculateElementInfo(target, container, rootContainer, true);\r\n}\n\nfunction getMoveableTargetInfo(moveableElement, target, container, parentContainer, rootContainer, requestStyles) {\r\n    if (requestStyles === void 0) { requestStyles = []; }\r\n    var beforeDirection = 1;\r\n    var beforeOrigin = [0, 0];\r\n    var targetClientRect = resetClientRect();\r\n    var moveableClientRect = resetClientRect();\r\n    var containerClientRect = resetClientRect();\r\n    var rootContainerClientRect = resetClientRect();\r\n    var offsetDelta = [0, 0];\r\n    var style = {};\r\n    var result = calculateElementInfo(target, container, rootContainer, true);\r\n    if (target) {\r\n        var getStyle_1 = getCachedStyle(target);\r\n        requestStyles.forEach(function (name) {\r\n            style[name] = getStyle_1(name);\r\n        });\r\n        var n = result.is3d ? 4 : 3;\r\n        var beforePosition = calculateElementPosition(result.offsetMatrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(result.transformOrigin, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.getOrigin)(result.targetMatrix, n)), result.width, result.height);\r\n        beforeDirection = beforePosition.direction;\r\n        beforeOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(beforePosition.origin, [beforePosition.left - result.left, beforePosition.top - result.top]);\r\n        rootContainerClientRect = getClientRect(result.offsetRootContainer);\r\n        var offsetContainer = getOffsetInfo(parentContainer, parentContainer, true).offsetParent\r\n            || result.offsetRootContainer;\r\n        if (result.hasZoom) {\r\n            var absoluteTargetPosition = calculateElementPosition((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiply)(result.originalRootMatrix, result.allMatrix), result.transformOrigin, result.width, result.height);\r\n            var absoluteContainerPosition = calculateElementPosition(result.originalRootMatrix, getTransformOriginArray(getCachedStyle(offsetContainer)(\"transformOrigin\")).map(function (pos) { return parseFloat(pos); }), offsetContainer.offsetWidth, offsetContainer.offsetHeight);\r\n            targetClientRect = getClientRectByPosition(absoluteTargetPosition, rootContainerClientRect);\r\n            containerClientRect = getClientRectByPosition(absoluteContainerPosition, rootContainerClientRect, offsetContainer, true);\r\n            if (moveableElement) {\r\n                var left = absoluteTargetPosition.left;\r\n                var top_1 = absoluteTargetPosition.top;\r\n                moveableClientRect = getClientRectByPosition({\r\n                    left: left,\r\n                    top: top_1,\r\n                    bottom: top_1,\r\n                    right: top_1,\r\n                }, rootContainerClientRect);\r\n            }\r\n        }\r\n        else {\r\n            targetClientRect = getClientRect(target);\r\n            containerClientRect = getCachedClientRect(offsetContainer);\r\n            if (moveableElement) {\r\n                moveableClientRect = getClientRect(moveableElement);\r\n            }\r\n            var containerClientRectLeft = containerClientRect.left, containerClientRectTop = containerClientRect.top, containterClientLeft = containerClientRect.clientLeft, containerClientTop = containerClientRect.clientTop;\r\n            var clientDelta = [\r\n                targetClientRect.left - containerClientRectLeft,\r\n                targetClientRect.top - containerClientRectTop,\r\n            ];\r\n            offsetDelta = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(calculateInversePosition(result.rootMatrix, clientDelta, 4), [containterClientLeft + result.left, containerClientTop + result.top]);\r\n        }\r\n    }\r\n    return __assign({ targetClientRect: targetClientRect, containerClientRect: containerClientRect, moveableClientRect: moveableClientRect, rootContainerClientRect: rootContainerClientRect, beforeDirection: beforeDirection, beforeOrigin: beforeOrigin, originalBeforeOrigin: beforeOrigin, target: target, style: style, offsetDelta: offsetDelta }, result);\r\n}\n\nfunction getPersistState(rect) {\r\n    var pos1 = rect.pos1, pos2 = rect.pos2, pos3 = rect.pos3, pos4 = rect.pos4;\r\n    if (!pos1 || !pos2 || !pos3 || !pos4) {\r\n        return null;\r\n    }\r\n    var minPos = (0,overlap_area__WEBPACK_IMPORTED_MODULE_8__.getMinMaxs)([pos1, pos2, pos3, pos4]);\r\n    var posDelta = [minPos.minX, minPos.minY];\r\n    var origin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(rect.origin, posDelta);\r\n    pos1 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(pos1, posDelta);\r\n    pos2 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(pos2, posDelta);\r\n    pos3 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(pos3, posDelta);\r\n    pos4 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(pos4, posDelta);\r\n    return __assign(__assign({}, rect), { left: rect.left, top: rect.top, posDelta: posDelta, pos1: pos1, pos2: pos2, pos3: pos3, pos4: pos4, origin: origin, beforeOrigin: origin, \r\n        // originalBeforeOrigin: origin,\r\n        isPersisted: true });\r\n}\n\nvar MoveableManager = /*#__PURE__*/ (function (_super) {\r\n    __extends(MoveableManager, _super);\r\n    function MoveableManager() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = __assign({ container: null, gestos: {}, renderLines: [\r\n                [[0, 0], [0, 0]],\r\n                [[0, 0], [0, 0]],\r\n                [[0, 0], [0, 0]],\r\n                [[0, 0], [0, 0]],\r\n            ], renderPoses: [[0, 0], [0, 0], [0, 0], [0, 0]], disableNativeEvent: false, posDelta: [0, 0] }, getMoveableTargetInfo(null));\r\n        _this.renderState = {};\r\n        _this.enabledAbles = [];\r\n        _this.targetAbles = [];\r\n        _this.controlAbles = [];\r\n        _this.rotation = 0;\r\n        _this.scale = [1, 1];\r\n        _this.isMoveableMounted = false;\r\n        _this.isUnmounted = false;\r\n        _this.events = {\r\n            \"mouseEnter\": null,\r\n            \"mouseLeave\": null,\r\n        };\r\n        _this._emitter = new _scena_event_emitter__WEBPACK_IMPORTED_MODULE_10__[\"default\"]();\r\n        _this._prevOriginalDragTarget = null;\r\n        _this._originalDragTarget = null;\r\n        _this._prevDragTarget = null;\r\n        _this._dragTarget = null;\r\n        _this._prevPropTarget = null;\r\n        _this._propTarget = null;\r\n        _this._prevDragArea = false;\r\n        _this._isPropTargetChanged = false;\r\n        _this._hasFirstTarget = false;\r\n        _this._reiszeObserver = null;\r\n        _this._observerId = 0;\r\n        _this._mutationObserver = null;\r\n        _this._rootContainer = null;\r\n        _this._viewContainer = null;\r\n        _this._viewClassNames = [];\r\n        _this._store = {};\r\n        _this.checkUpdateRect = function () {\r\n            if (_this.isDragging()) {\r\n                return;\r\n            }\r\n            var parentMoveable = _this.props.parentMoveable;\r\n            if (parentMoveable) {\r\n                parentMoveable.checkUpdateRect();\r\n                return;\r\n            }\r\n            (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.cancelAnimationFrame)(_this._observerId);\r\n            _this._observerId = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.requestAnimationFrame)(function () {\r\n                if (_this.isDragging()) {\r\n                    return;\r\n                }\r\n                _this.updateRect();\r\n            });\r\n        };\r\n        _this._onPreventClick = function (e) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            // removeEvent(window, \"click\", this._onPreventClick, true);\r\n        };\r\n        return _this;\r\n    }\r\n    MoveableManager.prototype.render = function () {\r\n        var props = this.props;\r\n        var state = this.getState();\r\n        var parentPosition = props.parentPosition, className = props.className, propsTarget = props.target, zoom = props.zoom, cspNonce = props.cspNonce, translateZ = props.translateZ, ControlBoxElement = props.cssStyled, groupable = props.groupable, linePadding = props.linePadding, controlPadding = props.controlPadding;\r\n        this._checkUpdateRootContainer();\r\n        this.checkUpdate();\r\n        this.updateRenderPoses();\r\n        var _a = __read(parentPosition || [0, 0], 2), parentLeft = _a[0], parentTop = _a[1];\r\n        var left = state.left, top = state.top, stateTarget = state.target, direction = state.direction, hasFixed = state.hasFixed, offsetDelta = state.offsetDelta;\r\n        var groupTargets = props.targets;\r\n        var isDragging = this.isDragging();\r\n        var ableAttributes = {};\r\n        this.getEnabledAbles().forEach(function (able) {\r\n            ableAttributes[\"data-able-\".concat(able.name.toLowerCase())] = true;\r\n        });\r\n        var ableClassName = this._getAbleClassName();\r\n        var isDisplay = (groupTargets && groupTargets.length && (stateTarget || groupable))\r\n            || propsTarget\r\n            || (!this._hasFirstTarget && this.state.isPersisted);\r\n        var isVisible = this.controlBox || this.props.firstRenderState || this.props.persistData;\r\n        var translate = [left - parentLeft, top - parentTop];\r\n        if (!groupable && props.useAccuratePosition) {\r\n            translate[0] += offsetDelta[0];\r\n            translate[1] += offsetDelta[1];\r\n        }\r\n        var style = {\r\n            \"position\": hasFixed ? \"fixed\" : \"absolute\",\r\n            \"display\": isDisplay ? \"block\" : \"none\",\r\n            \"visibility\": isVisible ? \"visible\" : \"hidden\",\r\n            \"transform\": \"translate3d(\".concat(translate[0], \"px, \").concat(translate[1], \"px, \").concat(translateZ, \")\"),\r\n            \"--zoom\": zoom,\r\n            \"--zoompx\": \"\".concat(zoom, \"px\"),\r\n        };\r\n        if (linePadding) {\r\n            style[\"--moveable-line-padding\"] = linePadding;\r\n        }\r\n        if (controlPadding) {\r\n            style[\"--moveable-control-padding\"] = controlPadding;\r\n        }\r\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlBoxElement, __assign({ cspNonce: cspNonce, ref: (0,framework_utils__WEBPACK_IMPORTED_MODULE_6__.ref)(this, \"controlBox\"), className: \"\".concat(prefix(\"control-box\", direction === -1 ? \"reverse\" : \"\", isDragging ? \"dragging\" : \"\"), \" \").concat(ableClassName, \" \").concat(className) }, ableAttributes, { onClick: this._onPreventClick, style: style }),\r\n            this.renderAbles(),\r\n            this._renderLines()));\r\n    };\r\n    MoveableManager.prototype.componentDidMount = function () {\r\n        this.isMoveableMounted = true;\r\n        this.isUnmounted = false;\r\n        var props = this.props;\r\n        var parentMoveable = props.parentMoveable, container = props.container;\r\n        this._checkUpdateRootContainer();\r\n        this._checkUpdateViewContainer();\r\n        this._updateTargets();\r\n        this._updateNativeEvents();\r\n        this._updateEvents();\r\n        this.updateCheckInput();\r\n        this._updateObserver(this.props);\r\n        if (!container && !parentMoveable && !this.state.isPersisted) {\r\n            this.updateRect(\"\", false, false);\r\n            this.forceUpdate();\r\n        }\r\n    };\r\n    MoveableManager.prototype.componentDidUpdate = function (prevProps) {\r\n        this._checkUpdateRootContainer();\r\n        this._checkUpdateViewContainer();\r\n        this._updateNativeEvents();\r\n        this._updateTargets();\r\n        this._updateEvents();\r\n        this.updateCheckInput();\r\n        this._updateObserver(prevProps);\r\n    };\r\n    MoveableManager.prototype.componentWillUnmount = function () {\r\n        var _a, _b;\r\n        this.isMoveableMounted = false;\r\n        this.isUnmounted = true;\r\n        this._emitter.off();\r\n        (_a = this._reiszeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\r\n        (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.disconnect();\r\n        var viewContainer = this._viewContainer;\r\n        if (viewContainer) {\r\n            this._changeAbleViewClassNames([]);\r\n        }\r\n        unsetGesto(this, false);\r\n        unsetGesto(this, true);\r\n        var events = this.events;\r\n        for (var name_1 in events) {\r\n            var manager = events[name_1];\r\n            manager && manager.destroy();\r\n        }\r\n    };\r\n    MoveableManager.prototype.getTargets = function () {\r\n        var target = this.props.target;\r\n        return target ? [target] : [];\r\n    };\r\n    /**\r\n     * Get the able used in MoveableManager.\r\n     * @method Moveable#getAble\r\n     * @param - able name\r\n     */\r\n    MoveableManager.prototype.getAble = function (ableName) {\r\n        var ables = this.props.ables || [];\r\n        return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.find)(ables, function (able) { return able.name === ableName; });\r\n    };\r\n    MoveableManager.prototype.getContainer = function () {\r\n        var _a = this.props, parentMoveable = _a.parentMoveable, wrapperMoveable = _a.wrapperMoveable, container = _a.container;\r\n        return container\r\n            || (wrapperMoveable && wrapperMoveable.getContainer())\r\n            || (parentMoveable && parentMoveable.getContainer())\r\n            || this.controlBox.parentElement;\r\n    };\r\n    /**\r\n     * Returns the element of the control box.\r\n     * @method Moveable#getControlBoxElement\r\n     */\r\n    MoveableManager.prototype.getControlBoxElement = function () {\r\n        return this.controlBox;\r\n    };\r\n    /**\r\n     * Target element to be dragged in moveable\r\n     * @method Moveable#getDragElement\r\n     */\r\n    MoveableManager.prototype.getDragElement = function () {\r\n        return this._dragTarget;\r\n    };\r\n    /**\r\n     * Check if the target is an element included in the moveable.\r\n     * @method Moveable#isMoveableElement\r\n     * @param - the target\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * window.addEventListener(\"click\", e => {\r\n     *     if (!moveable.isMoveableElement(e.target)) {\r\n     *         moveable.target = e.target;\r\n     *     }\r\n     * });\r\n     */\r\n    MoveableManager.prototype.isMoveableElement = function (target) {\r\n        var _a;\r\n        return target && (((_a = target.getAttribute) === null || _a === void 0 ? void 0 : _a.call(target, \"class\")) || \"\").indexOf(PREFIX) > -1;\r\n    };\r\n    /**\r\n     * You can drag start the Moveable through the external `MouseEvent`or `TouchEvent`. (Angular: ngDragStart)\r\n     * @method Moveable#dragStart\r\n     * @param - external `MouseEvent`or `TouchEvent`\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * document.body.addEventListener(\"mousedown\", e => {\r\n     *     if (!moveable.isMoveableElement(e.target)) {\r\n     *          moveable.dragStart(e);\r\n     *     }\r\n     * });\r\n     */\r\n    MoveableManager.prototype.dragStart = function (e, target) {\r\n        if (target === void 0) { target = e.target; }\r\n        var targetGesto = this.targetGesto;\r\n        var controlGesto = this.controlGesto;\r\n        if (targetGesto && checkMoveableTarget(this)({ inputEvent: e }, target)) {\r\n            if (!targetGesto.isFlag()) {\r\n                targetGesto.triggerDragStart(e);\r\n            }\r\n        }\r\n        else if (controlGesto && this.isMoveableElement(target)) {\r\n            if (!controlGesto.isFlag()) {\r\n                controlGesto.triggerDragStart(e);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Hit test an element or rect on a moveable target.\r\n     * (100% = 100)\r\n     * @method Moveable#hitTest\r\n     * @param - element or rect to test\r\n     * @return - Get hit test rate (rate > 0 is hitted)\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * document.body.addEventListener(\"mousedown\", e => {\r\n     *     if (moveable.hitTest(e.target) > 0) {\r\n     *          console.log(\"hiited\");\r\n     *     }\r\n     * });\r\n     */\r\n    MoveableManager.prototype.hitTest = function (el) {\r\n        var _a = this.state, target = _a.target, pos1 = _a.pos1, pos2 = _a.pos2, pos3 = _a.pos3, pos4 = _a.pos4, targetClientRect = _a.targetClientRect;\r\n        if (!target) {\r\n            return 0;\r\n        }\r\n        var rect;\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isNode)(el)) {\r\n            var clientRect = el.getBoundingClientRect();\r\n            rect = {\r\n                left: clientRect.left,\r\n                top: clientRect.top,\r\n                width: clientRect.width,\r\n                height: clientRect.height,\r\n            };\r\n        }\r\n        else {\r\n            rect = __assign({ width: 0, height: 0 }, el);\r\n        }\r\n        var rectLeft = rect.left, rectTop = rect.top, rectWidth = rect.width, rectHeight = rect.height;\r\n        var points = (0,overlap_area__WEBPACK_IMPORTED_MODULE_8__.fitPoints)([pos1, pos2, pos4, pos3], targetClientRect);\r\n        var size = (0,overlap_area__WEBPACK_IMPORTED_MODULE_8__.getOverlapSize)(points, [\r\n            [rectLeft, rectTop],\r\n            [rectLeft + rectWidth, rectTop],\r\n            [rectLeft + rectWidth, rectTop + rectHeight],\r\n            [rectLeft, rectTop + rectHeight],\r\n        ]);\r\n        var totalSize = (0,overlap_area__WEBPACK_IMPORTED_MODULE_8__.getAreaSize)(points);\r\n        if (!size || !totalSize) {\r\n            return 0;\r\n        }\r\n        return Math.min(100, size / totalSize * 100);\r\n    };\r\n    /**\r\n     * Whether the coordinates are inside Moveable\r\n     * @method Moveable#isInside\r\n     * @param - x coordinate\r\n     * @param - y coordinate\r\n     * @return - True if the coordinate is in moveable or false\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * document.body.addEventListener(\"mousedown\", e => {\r\n     *     if (moveable.isInside(e.clientX, e.clientY)) {\r\n     *          console.log(\"inside\");\r\n     *     }\r\n     * });\r\n     */\r\n    MoveableManager.prototype.isInside = function (clientX, clientY) {\r\n        var _a = this.state, target = _a.target, pos1 = _a.pos1, pos2 = _a.pos2, pos3 = _a.pos3, pos4 = _a.pos4, targetClientRect = _a.targetClientRect;\r\n        if (!target) {\r\n            return false;\r\n        }\r\n        return (0,overlap_area__WEBPACK_IMPORTED_MODULE_8__.isInside)([clientX, clientY], (0,overlap_area__WEBPACK_IMPORTED_MODULE_8__.fitPoints)([pos1, pos2, pos4, pos3], targetClientRect));\r\n    };\r\n    /**\r\n     * If the width, height, left, and top of all elements change, update the shape of the moveable.\r\n     * @method Moveable#updateRect\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * window.addEventListener(\"resize\", e => {\r\n     *     moveable.updateRect();\r\n     * });\r\n     */\r\n    MoveableManager.prototype.updateRect = function (type, isTarget, isSetState) {\r\n        if (isSetState === void 0) { isSetState = true; }\r\n        var props = this.props;\r\n        var isSingle = !props.parentPosition && !props.wrapperMoveable;\r\n        if (isSingle) {\r\n            setStoreCache(true);\r\n        }\r\n        var parentMoveable = props.parentMoveable;\r\n        var state = this.state;\r\n        var target = (state.target || props.target);\r\n        var container = this.getContainer();\r\n        var rootContainer = parentMoveable\r\n            ? parentMoveable._rootContainer\r\n            : this._rootContainer;\r\n        var nextState = getMoveableTargetInfo(this.controlBox, target, container, container, rootContainer || container, this._getRequestStyles());\r\n        if (!target && this._hasFirstTarget && props.persistData) {\r\n            var persistState = getPersistState(props.persistData);\r\n            for (var name_2 in persistState) {\r\n                nextState[name_2] = persistState[name_2];\r\n            }\r\n        }\r\n        if (isSingle) {\r\n            setStoreCache();\r\n        }\r\n        this.updateState(nextState, parentMoveable ? false : isSetState);\r\n    };\r\n    /**\r\n     * Check if the moveable state is being dragged.\r\n     * @method Moveable#isDragging\r\n     * @param - If you want to check if able is dragging, specify ableName.\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * // false\r\n     * console.log(moveable.isDragging());\r\n     *\r\n     * moveable.on(\"drag\", () => {\r\n     *   // true\r\n     *   console.log(moveable.isDragging());\r\n     * });\r\n     */\r\n    MoveableManager.prototype.isDragging = function (ableName) {\r\n        var _a, _b;\r\n        var targetGesto = this.targetGesto;\r\n        var controlGesto = this.controlGesto;\r\n        if (targetGesto === null || targetGesto === void 0 ? void 0 : targetGesto.isFlag()) {\r\n            if (!ableName) {\r\n                return true;\r\n            }\r\n            var data = targetGesto.getEventData();\r\n            return !!((_a = data[ableName]) === null || _a === void 0 ? void 0 : _a.isEventStart);\r\n        }\r\n        if (controlGesto === null || controlGesto === void 0 ? void 0 : controlGesto.isFlag()) {\r\n            if (!ableName) {\r\n                return true;\r\n            }\r\n            var data = controlGesto.getEventData();\r\n            return !!((_b = data[ableName]) === null || _b === void 0 ? void 0 : _b.isEventStart);\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * If the width, height, left, and top of the only target change, update the shape of the moveable.\r\n     * Use `.updateRect()` method\r\n     * @method Moveable#updateTarget\r\n     * @deprecated\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * moveable.updateTarget();\r\n     */\r\n    MoveableManager.prototype.updateTarget = function (type) {\r\n        this.updateRect(type, true);\r\n    };\r\n    /**\r\n     * You can get the vertex information, position and offset size information of the target based on the container.\r\n     * @method Moveable#getRect\r\n     * @return - The Rect Info\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * const rectInfo = moveable.getRect();\r\n     */\r\n    MoveableManager.prototype.getRect = function () {\r\n        var state = this.state;\r\n        var poses = getAbsolutePosesByState(this.state);\r\n        var _a = __read(poses, 4), pos1 = _a[0], pos2 = _a[1], pos3 = _a[2], pos4 = _a[3];\r\n        var rect = getRect(poses);\r\n        var offsetWidth = state.width, offsetHeight = state.height;\r\n        var width = rect.width, height = rect.height, left = rect.left, top = rect.top;\r\n        var statePos = [state.left, state.top];\r\n        var origin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(statePos, state.origin);\r\n        var beforeOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(statePos, state.beforeOrigin);\r\n        var transformOrigin = state.transformOrigin;\r\n        return {\r\n            width: width,\r\n            height: height,\r\n            left: left,\r\n            top: top,\r\n            pos1: pos1,\r\n            pos2: pos2,\r\n            pos3: pos3,\r\n            pos4: pos4,\r\n            offsetWidth: offsetWidth,\r\n            offsetHeight: offsetHeight,\r\n            beforeOrigin: beforeOrigin,\r\n            origin: origin,\r\n            transformOrigin: transformOrigin,\r\n            rotation: this.getRotation(),\r\n        };\r\n    };\r\n    /**\r\n     * Get a manager that manages the moveable's state and props.\r\n     * @method Moveable#getManager\r\n     * @return - The Rect Info\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * const manager = moveable.getManager(); // real moveable class instance\r\n     */\r\n    MoveableManager.prototype.getManager = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * You can stop the dragging currently in progress through a method from outside.\r\n     * @method Moveable#stopDrag\r\n     * @return - The Rect Info\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * moveable.stopDrag();\r\n     */\r\n    MoveableManager.prototype.stopDrag = function (type) {\r\n        if (!type || type === \"target\") {\r\n            var gesto = this.targetGesto;\r\n            if ((gesto === null || gesto === void 0 ? void 0 : gesto.isIdle()) === false) {\r\n                unsetAbles(this, false);\r\n            }\r\n            gesto === null || gesto === void 0 ? void 0 : gesto.stop();\r\n        }\r\n        if (!type || type === \"control\") {\r\n            var gesto = this.controlGesto;\r\n            if ((gesto === null || gesto === void 0 ? void 0 : gesto.isIdle()) === false) {\r\n                unsetAbles(this, true);\r\n            }\r\n            gesto === null || gesto === void 0 ? void 0 : gesto.stop();\r\n        }\r\n    };\r\n    MoveableManager.prototype.getRotation = function () {\r\n        var _a = this.state, pos1 = _a.pos1, pos2 = _a.pos2, direction = _a.direction;\r\n        return getAbsoluteRotation(pos1, pos2, direction);\r\n    };\r\n    /**\r\n     * Request able through a method rather than an event.\r\n     * At the moment of execution, requestStart is executed,\r\n     * and then request and requestEnd can be executed through Requester.\r\n     * @method Moveable#request\r\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Draggable.html#request|Draggable Requester}\r\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Resizable.html#request|Resizable Requester}\r\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Scalable.html#request|Scalable Requester}\r\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Rotatable.html#request|Rotatable Requester}\r\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.OriginDraggable.html#request|OriginDraggable Requester}\r\n     * @param - ableName\r\n     * @param - request to be able params.\r\n     * @param - If isInstant is true, request and requestEnd are executed immediately.\r\n     * @return - Able Requester. If there is no request in able, nothing will work.\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * // Instantly Request (requestStart - request - requestEnd)\r\n     * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10 }, true);\r\n     *\r\n     * // Start move\r\n     * const requester = moveable.request(\"draggable\");\r\n     * requester.request({ deltaX: 10, deltaY: 10 });\r\n     * requester.request({ deltaX: 10, deltaY: 10 });\r\n     * requester.request({ deltaX: 10, deltaY: 10 });\r\n     * requester.requestEnd();\r\n     */\r\n    MoveableManager.prototype.request = function (ableName, param, isInstant) {\r\n        if (param === void 0) { param = {}; }\r\n        var self = this;\r\n        var props = self.props;\r\n        var manager = props.parentMoveable || props.wrapperMoveable || self;\r\n        var allAbles = manager.props.ables;\r\n        var groupable = props.groupable;\r\n        var requsetAble = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.find)(allAbles, function (able) { return able.name === ableName; });\r\n        if (this.isDragging() || !requsetAble || !requsetAble.request) {\r\n            return {\r\n                request: function () {\r\n                    return this;\r\n                },\r\n                requestEnd: function () {\r\n                    return this;\r\n                },\r\n            };\r\n        }\r\n        var ableRequester = requsetAble.request(self);\r\n        var requestInstant = isInstant || param.isInstant;\r\n        var ableType = ableRequester.isControl ? \"controlAbles\" : \"targetAbles\";\r\n        var eventAffix = \"\".concat((groupable ? \"Group\" : \"\")).concat(ableRequester.isControl ? \"Control\" : \"\");\r\n        var moveableAbles = __spreadArray([], __read(manager[ableType]), false);\r\n        var requester = {\r\n            request: function (ableParam) {\r\n                triggerAble(self, moveableAbles, [\"drag\"], eventAffix, \"\", __assign(__assign({}, ableRequester.request(ableParam)), { requestAble: ableName, isRequest: true }), requestInstant);\r\n                return requester;\r\n            },\r\n            requestEnd: function () {\r\n                triggerAble(self, moveableAbles, [\"drag\"], eventAffix, \"End\", __assign(__assign({}, ableRequester.requestEnd()), { requestAble: ableName, isRequest: true }), requestInstant);\r\n                return requester;\r\n            },\r\n        };\r\n        triggerAble(self, moveableAbles, [\"drag\"], eventAffix, \"Start\", __assign(__assign({}, ableRequester.requestStart(param)), { requestAble: ableName, isRequest: true }), requestInstant);\r\n        return requestInstant ? requester.request(param).requestEnd() : requester;\r\n    };\r\n    /**\r\n     * moveable is the top level that manages targets\r\n     * `Single`: MoveableManager instance\r\n     * `Group`: MoveableGroup instance\r\n     * `IndividualGroup`: MoveableIndividaulGroup instance\r\n     * Returns leaf target MoveableManagers.\r\n     */\r\n    MoveableManager.prototype.getMoveables = function () {\r\n        return [this];\r\n    };\r\n    /**\r\n     * Remove the Moveable object and the events.\r\n     * @method Moveable#destroy\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body);\r\n     *\r\n     * moveable.destroy();\r\n     */\r\n    MoveableManager.prototype.destroy = function () {\r\n        this.componentWillUnmount();\r\n    };\r\n    MoveableManager.prototype.updateRenderPoses = function () {\r\n        var state = this.getState();\r\n        var props = this.props;\r\n        var padding = props.padding;\r\n        var originalBeforeOrigin = state.originalBeforeOrigin, transformOrigin = state.transformOrigin, allMatrix = state.allMatrix, is3d = state.is3d, pos1 = state.pos1, pos2 = state.pos2, pos3 = state.pos3, pos4 = state.pos4, stateLeft = state.left, stateTop = state.top, isPersisted = state.isPersisted;\r\n        var zoom = props.zoom || 1;\r\n        if (!padding && zoom <= 1) {\r\n            state.renderPoses = [\r\n                pos1,\r\n                pos2,\r\n                pos3,\r\n                pos4,\r\n            ];\r\n            state.renderLines = [\r\n                [pos1, pos2],\r\n                [pos2, pos4],\r\n                [pos4, pos3],\r\n                [pos3, pos1],\r\n            ];\r\n            return;\r\n        }\r\n        var _a = getPaddingBox(padding || {}), left = _a.left, top = _a.top, bottom = _a.bottom, right = _a.right;\r\n        var n = is3d ? 4 : 3;\r\n        // const clipPathInfo = getClipPath(\r\n        //     props.target,\r\n        //     offsetWidth,\r\n        //     offsetHeight,\r\n        // );\r\n        // if (clipPathInfo) {\r\n        //     left -= Math.max(0, clipPathInfo.left);\r\n        //     top -= Math.max(0, clipPathInfo.top);\r\n        //     bottom -= Math.max(0, offsetHeight - clipPathInfo.bottom);\r\n        //     right -= Math.max(0, offsetWidth - clipPathInfo.right);\r\n        // }\r\n        var absoluteOrigin = [];\r\n        if (isPersisted) {\r\n            absoluteOrigin = transformOrigin;\r\n        }\r\n        else if (this.controlBox && props.groupable) {\r\n            absoluteOrigin = originalBeforeOrigin;\r\n        }\r\n        else {\r\n            absoluteOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(originalBeforeOrigin, [stateLeft, stateTop]);\r\n        }\r\n        var nextMatrix = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.multiplies)(n, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createOriginMatrix)(absoluteOrigin.map(function (v) { return -v; }), n), allMatrix, (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.createOriginMatrix)(transformOrigin, n));\r\n        var renderPos1 = calculatePadding(nextMatrix, pos1, [-left, -top], n);\r\n        var renderPos2 = calculatePadding(nextMatrix, pos2, [right, -top], n);\r\n        var renderPos3 = calculatePadding(nextMatrix, pos3, [-left, bottom], n);\r\n        var renderPos4 = calculatePadding(nextMatrix, pos4, [right, bottom], n);\r\n        state.renderPoses = [\r\n            renderPos1,\r\n            renderPos2,\r\n            renderPos3,\r\n            renderPos4,\r\n        ];\r\n        state.renderLines = [\r\n            [renderPos1, renderPos2],\r\n            [renderPos2, renderPos4],\r\n            [renderPos4, renderPos3],\r\n            [renderPos3, renderPos1],\r\n        ];\r\n        if (zoom) {\r\n            var zoomOffset = zoom / 2;\r\n            state.renderLines = [\r\n                [\r\n                    calculatePadding(nextMatrix, pos1, [-left - zoomOffset, -top], n),\r\n                    calculatePadding(nextMatrix, pos2, [right + zoomOffset, -top], n),\r\n                ],\r\n                [\r\n                    calculatePadding(nextMatrix, pos2, [right, -top - zoomOffset], n),\r\n                    calculatePadding(nextMatrix, pos4, [right, bottom + zoomOffset], n),\r\n                ],\r\n                [\r\n                    calculatePadding(nextMatrix, pos4, [right + zoomOffset, bottom], n),\r\n                    calculatePadding(nextMatrix, pos3, [-left - zoomOffset, bottom], n),\r\n                ],\r\n                [\r\n                    calculatePadding(nextMatrix, pos3, [-left, bottom + zoomOffset], n),\r\n                    calculatePadding(nextMatrix, pos1, [-left, -top - zoomOffset], n),\r\n                ],\r\n            ];\r\n        }\r\n    };\r\n    MoveableManager.prototype.checkUpdate = function () {\r\n        this._isPropTargetChanged = false;\r\n        var _a = this.props, target = _a.target, container = _a.container, parentMoveable = _a.parentMoveable;\r\n        var _b = this.state, stateTarget = _b.target, stateContainer = _b.container;\r\n        if (!stateTarget && !target) {\r\n            return;\r\n        }\r\n        this.updateAbles();\r\n        var isTargetChanged = !equals(stateTarget, target);\r\n        var isChanged = isTargetChanged || !equals(stateContainer, container);\r\n        if (!isChanged) {\r\n            return;\r\n        }\r\n        var moveableContainer = container || this.controlBox;\r\n        if (moveableContainer) {\r\n            this.unsetAbles();\r\n        }\r\n        this.updateState({ target: target, container: container });\r\n        if (!parentMoveable && moveableContainer) {\r\n            this.updateRect(\"End\", false, false);\r\n        }\r\n        this._isPropTargetChanged = isTargetChanged;\r\n    };\r\n    MoveableManager.prototype.waitToChangeTarget = function () {\r\n        return new Promise(function () { });\r\n    };\r\n    MoveableManager.prototype.triggerEvent = function (name, e) {\r\n        var props = this.props;\r\n        this._emitter.trigger(name, e);\r\n        if (props.parentMoveable && e.isRequest && !e.isRequestChild) {\r\n            return props.parentMoveable.triggerEvent(name, e, true);\r\n        }\r\n        var callback = props[name];\r\n        return callback && callback(e);\r\n    };\r\n    MoveableManager.prototype.useCSS = function (tag, css) {\r\n        var customStyleMap = this.props.customStyledMap;\r\n        var key = tag + css;\r\n        if (!customStyleMap[key]) {\r\n            customStyleMap[key] = (0,react_css_styled__WEBPACK_IMPORTED_MODULE_11__.styled)(tag, css);\r\n        }\r\n        return customStyleMap[key];\r\n    };\r\n    MoveableManager.prototype.getState = function () {\r\n        var _a;\r\n        var props = this.props;\r\n        if (props.target || ((_a = props.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n            this._hasFirstTarget = true;\r\n        }\r\n        var hasControlBox = this.controlBox;\r\n        var persistData = props.persistData;\r\n        var firstRenderState = props.firstRenderState;\r\n        if (firstRenderState && !hasControlBox) {\r\n            return firstRenderState;\r\n        }\r\n        if (!this._hasFirstTarget && persistData) {\r\n            var persistState = getPersistState(persistData);\r\n            if (persistState) {\r\n                this.updateState(persistState, false);\r\n                return this.state;\r\n            }\r\n        }\r\n        this.state.isPersisted = false;\r\n        return this.state;\r\n    };\r\n    MoveableManager.prototype.updateSelectors = function () { };\r\n    MoveableManager.prototype.unsetAbles = function () {\r\n        var _this = this;\r\n        this.targetAbles.forEach(function (able) {\r\n            if (able.unset) {\r\n                able.unset(_this);\r\n            }\r\n        });\r\n    };\r\n    MoveableManager.prototype.updateAbles = function (ables, eventAffix) {\r\n        if (ables === void 0) { ables = this.props.ables; }\r\n        if (eventAffix === void 0) { eventAffix = \"\"; }\r\n        var props = this.props;\r\n        var triggerAblesSimultaneously = props.triggerAblesSimultaneously;\r\n        var enabledAbles = this.getEnabledAbles(ables);\r\n        var dragStart = \"drag\".concat(eventAffix, \"Start\");\r\n        var pinchStart = \"pinch\".concat(eventAffix, \"Start\");\r\n        var dragControlStart = \"drag\".concat(eventAffix, \"ControlStart\");\r\n        var targetAbles = filterAbles(enabledAbles, [dragStart, pinchStart], triggerAblesSimultaneously);\r\n        var controlAbles = filterAbles(enabledAbles, [dragControlStart], triggerAblesSimultaneously);\r\n        this.enabledAbles = enabledAbles;\r\n        this.targetAbles = targetAbles;\r\n        this.controlAbles = controlAbles;\r\n    };\r\n    MoveableManager.prototype.updateState = function (nextState, isSetState) {\r\n        if (isSetState) {\r\n            if (this.isUnmounted) {\r\n                return;\r\n            }\r\n            this.setState(nextState);\r\n        }\r\n        else {\r\n            var state = this.state;\r\n            for (var name_3 in nextState) {\r\n                state[name_3] = nextState[name_3];\r\n            }\r\n        }\r\n    };\r\n    MoveableManager.prototype.getEnabledAbles = function (ables) {\r\n        if (ables === void 0) { ables = this.props.ables; }\r\n        var props = this.props;\r\n        return ables.filter(function (able) { return able && ((able.always && props[able.name] !== false)\r\n            || props[able.name]); });\r\n    };\r\n    MoveableManager.prototype.renderAbles = function () {\r\n        var _this = this;\r\n        var props = this.props;\r\n        var triggerAblesSimultaneously = props.triggerAblesSimultaneously;\r\n        var Renderer = {\r\n            createElement: react__WEBPACK_IMPORTED_MODULE_0__.createElement,\r\n        };\r\n        this.renderState = {};\r\n        return groupByMap(flat(filterAbles(this.getEnabledAbles(), [\"render\"], triggerAblesSimultaneously).map(function (_a) {\r\n            var render = _a.render;\r\n            return render(_this, Renderer) || [];\r\n        })).filter(function (el) { return el; }), function (_a) {\r\n            var key = _a.key;\r\n            return key;\r\n        }).map(function (group) { return group[0]; });\r\n    };\r\n    MoveableManager.prototype.updateCheckInput = function () {\r\n        this.targetGesto && (this.targetGesto.options.checkInput = this.props.checkInput);\r\n    };\r\n    MoveableManager.prototype._getRequestStyles = function () {\r\n        var styleNames = this.getEnabledAbles().reduce(function (names, able) {\r\n            var _a, _b;\r\n            var ableStyleNames = ((_b = (_a = able.requestStyle) === null || _a === void 0 ? void 0 : _a.call(able)) !== null && _b !== void 0 ? _b : []);\r\n            return __spreadArray(__spreadArray([], __read(names), false), __read(ableStyleNames), false);\r\n        }, __spreadArray([], __read((this.props.requestStyles || [])), false));\r\n        return styleNames;\r\n    };\r\n    MoveableManager.prototype._updateObserver = function (prevProps) {\r\n        this._updateResizeObserver(prevProps);\r\n        this._updateMutationObserver(prevProps);\r\n    };\r\n    MoveableManager.prototype._updateEvents = function () {\r\n        var hasTargetAble = this.targetAbles.length;\r\n        var hasControlAble = this.controlAbles.length;\r\n        var target = this._dragTarget;\r\n        var isUnset = (!hasTargetAble && this.targetGesto)\r\n            || this._isTargetChanged(true);\r\n        if (isUnset) {\r\n            unsetGesto(this, false);\r\n            this.updateState({ gestos: {} });\r\n        }\r\n        if (!hasControlAble) {\r\n            unsetGesto(this, true);\r\n        }\r\n        if (target && hasTargetAble && !this.targetGesto) {\r\n            this.targetGesto = getTargetAbleGesto(this, target, \"\");\r\n        }\r\n        if (!this.controlGesto && hasControlAble) {\r\n            this.controlGesto = getControlAbleGesto(this, \"Control\");\r\n        }\r\n    };\r\n    MoveableManager.prototype._updateTargets = function () {\r\n        var props = this.props;\r\n        this._prevPropTarget = this._propTarget;\r\n        this._prevDragTarget = this._dragTarget;\r\n        this._prevOriginalDragTarget = this._originalDragTarget;\r\n        this._prevDragArea = props.dragArea;\r\n        this._propTarget = props.target;\r\n        this._originalDragTarget = props.dragTarget || props.target;\r\n        this._dragTarget = getRefTarget(this._originalDragTarget, true);\r\n    };\r\n    MoveableManager.prototype._renderLines = function () {\r\n        var props = this.props;\r\n        var _a = props, zoom = _a.zoom, hideDefaultLines = _a.hideDefaultLines, hideChildMoveableDefaultLines = _a.hideChildMoveableDefaultLines, parentMoveable = _a.parentMoveable;\r\n        if (hideDefaultLines || (parentMoveable && hideChildMoveableDefaultLines)) {\r\n            return [];\r\n        }\r\n        var state = this.getState();\r\n        var Renderer = {\r\n            createElement: react__WEBPACK_IMPORTED_MODULE_0__.createElement,\r\n        };\r\n        return state.renderLines.map(function (line, i) {\r\n            return renderLine(Renderer, \"\", line[0], line[1], zoom, \"render-line-\".concat(i));\r\n        });\r\n    };\r\n    MoveableManager.prototype._isTargetChanged = function (useDragArea) {\r\n        var props = this.props;\r\n        var nextTarget = props.dragTarget || props.target;\r\n        var prevTarget = this._prevOriginalDragTarget;\r\n        var prevDragArea = this._prevDragArea;\r\n        var dragArea = props.dragArea;\r\n        // check target without dragArea\r\n        var isDragTargetChanged = !dragArea && prevTarget !== nextTarget;\r\n        var isDragAreaChanged = (useDragArea || dragArea) && prevDragArea !== dragArea;\r\n        return isDragTargetChanged || isDragAreaChanged || this._prevPropTarget != this._propTarget;\r\n    };\r\n    MoveableManager.prototype._updateNativeEvents = function () {\r\n        var _this = this;\r\n        var props = this.props;\r\n        var target = props.dragArea ? this.areaElement : this.state.target;\r\n        var events = this.events;\r\n        var eventKeys = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getKeys)(events);\r\n        if (this._isTargetChanged()) {\r\n            for (var eventName in events) {\r\n                var manager = events[eventName];\r\n                manager && manager.destroy();\r\n                events[eventName] = null;\r\n            }\r\n        }\r\n        if (!target) {\r\n            return;\r\n        }\r\n        var enabledAbles = this.enabledAbles;\r\n        eventKeys.forEach(function (eventName) {\r\n            var ables = filterAbles(enabledAbles, [eventName]);\r\n            var hasAbles = ables.length > 0;\r\n            var manager = events[eventName];\r\n            if (!hasAbles) {\r\n                if (manager) {\r\n                    manager.destroy();\r\n                    events[eventName] = null;\r\n                }\r\n                return;\r\n            }\r\n            if (!manager) {\r\n                manager = new EventManager(target, _this, eventName);\r\n                events[eventName] = manager;\r\n            }\r\n            manager.setAbles(ables);\r\n        });\r\n    };\r\n    MoveableManager.prototype._checkUpdateRootContainer = function () {\r\n        var rootContainer = this.props.rootContainer;\r\n        if (!this._rootContainer && rootContainer) {\r\n            this._rootContainer = getRefTarget(rootContainer, true);\r\n        }\r\n    };\r\n    MoveableManager.prototype._checkUpdateViewContainer = function () {\r\n        var viewContainerOption = this.props.viewContainer;\r\n        if (!this._viewContainer && viewContainerOption) {\r\n            this._viewContainer = getRefTarget(viewContainerOption, true);\r\n        }\r\n        var viewContainer = this._viewContainer;\r\n        if (viewContainer) {\r\n            this._changeAbleViewClassNames(__spreadArray(__spreadArray([], __read(this._getAbleViewClassNames()), false), [\r\n                this.isDragging() ? VIEW_DRAGGING : \"\",\r\n            ], false));\r\n        }\r\n    };\r\n    MoveableManager.prototype._changeAbleViewClassNames = function (classNames) {\r\n        var viewContainer = this._viewContainer;\r\n        var nextClassNames = groupBy(classNames.filter(Boolean), function (el) { return el; }).map(function (_a) {\r\n            var _b = __read(_a, 1), className = _b[0];\r\n            return className;\r\n        });\r\n        var prevClassNames = this._viewClassNames;\r\n        var _a = (0,_egjs_list_differ__WEBPACK_IMPORTED_MODULE_12__.diff)(prevClassNames, nextClassNames), removed = _a.removed, added = _a.added;\r\n        removed.forEach(function (index) {\r\n            (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.removeClass)(viewContainer, prevClassNames[index]);\r\n        });\r\n        added.forEach(function (index) {\r\n            (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.addClass)(viewContainer, nextClassNames[index]);\r\n        });\r\n        this._viewClassNames = nextClassNames;\r\n    };\r\n    MoveableManager.prototype._getAbleViewClassNames = function () {\r\n        var _this = this;\r\n        return (this.getEnabledAbles().map(function (able) {\r\n            var _a;\r\n            return (((_a = able.viewClassName) === null || _a === void 0 ? void 0 : _a.call(able, _this)) || \"\");\r\n        }).join(\" \") + \" \".concat(this._getAbleClassName(\"-view\"))).split(/\\s+/g);\r\n    };\r\n    MoveableManager.prototype._getAbleClassName = function (classPrefix) {\r\n        var _this = this;\r\n        if (classPrefix === void 0) { classPrefix = \"\"; }\r\n        var ables = this.getEnabledAbles();\r\n        var targetGesto = this.targetGesto;\r\n        var controlGesto = this.controlGesto;\r\n        var targetGestoData = (targetGesto === null || targetGesto === void 0 ? void 0 : targetGesto.isFlag())\r\n            ? targetGesto.getEventData() : {};\r\n        var controlGestoData = (controlGesto === null || controlGesto === void 0 ? void 0 : controlGesto.isFlag())\r\n            ? controlGesto.getEventData() : {};\r\n        return ables.map(function (able) {\r\n            var _a, _b, _c;\r\n            var name = able.name;\r\n            var className = ((_a = able.className) === null || _a === void 0 ? void 0 : _a.call(able, _this)) || \"\";\r\n            if (((_b = targetGestoData[name]) === null || _b === void 0 ? void 0 : _b.isEventStart)\r\n                || ((_c = controlGestoData[name]) === null || _c === void 0 ? void 0 : _c.isEventStart)) {\r\n                className += \" \".concat(prefix(\"\".concat(name).concat(classPrefix, \"-dragging\")));\r\n            }\r\n            return className.trim();\r\n        }).filter(Boolean).join(\" \");\r\n    };\r\n    MoveableManager.prototype._updateResizeObserver = function (prevProps) {\r\n        var _a;\r\n        var props = this.props;\r\n        var target = props.target;\r\n        var win = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getWindow)(this.getControlBoxElement());\r\n        if (!win.ResizeObserver || !target || !props.useResizeObserver) {\r\n            (_a = this._reiszeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\r\n            return;\r\n        }\r\n        if (prevProps.target === target && this._reiszeObserver) {\r\n            return;\r\n        }\r\n        var observer = new win.ResizeObserver(this.checkUpdateRect);\r\n        observer.observe(target, {\r\n            box: \"border-box\",\r\n        });\r\n        this._reiszeObserver = observer;\r\n    };\r\n    MoveableManager.prototype._updateMutationObserver = function (prevProps) {\r\n        var _this = this;\r\n        var _a;\r\n        var props = this.props;\r\n        var target = props.target;\r\n        var win = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getWindow)(this.getControlBoxElement());\r\n        if (!win.MutationObserver || !target || !props.useMutationObserver) {\r\n            (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\r\n            return;\r\n        }\r\n        if (prevProps.target === target && this._mutationObserver) {\r\n            return;\r\n        }\r\n        var observer = new win.MutationObserver(function (records) {\r\n            var e_1, _a;\r\n            try {\r\n                for (var records_1 = __values(records), records_1_1 = records_1.next(); !records_1_1.done; records_1_1 = records_1.next()) {\r\n                    var mutation = records_1_1.value;\r\n                    if (mutation.type === \"attributes\" && mutation.attributeName === \"style\") {\r\n                        _this.checkUpdateRect();\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (records_1_1 && !records_1_1.done && (_a = records_1.return)) _a.call(records_1);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        });\r\n        observer.observe(target, {\r\n            attributes: true,\r\n        });\r\n        this._mutationObserver = observer;\r\n    };\r\n    MoveableManager.defaultProps = {\r\n        dragTargetSelf: false,\r\n        target: null,\r\n        dragTarget: null,\r\n        container: null,\r\n        rootContainer: null,\r\n        origin: true,\r\n        parentMoveable: null,\r\n        wrapperMoveable: null,\r\n        isWrapperMounted: false,\r\n        parentPosition: null,\r\n        warpSelf: false,\r\n        svgOrigin: \"\",\r\n        dragContainer: null,\r\n        useResizeObserver: false,\r\n        useMutationObserver: false,\r\n        preventDefault: true,\r\n        preventRightClick: true,\r\n        preventWheelClick: true,\r\n        linePadding: 0,\r\n        controlPadding: 0,\r\n        ables: [],\r\n        pinchThreshold: 20,\r\n        dragArea: false,\r\n        passDragArea: false,\r\n        transformOrigin: \"\",\r\n        className: \"\",\r\n        zoom: 1,\r\n        triggerAblesSimultaneously: false,\r\n        padding: {},\r\n        pinchOutside: true,\r\n        checkInput: false,\r\n        dragFocusedInput: false,\r\n        groupable: false,\r\n        hideDefaultLines: false,\r\n        cspNonce: \"\",\r\n        translateZ: 0,\r\n        cssStyled: null,\r\n        customStyledMap: {},\r\n        props: {},\r\n        stopPropagation: false,\r\n        preventClickDefault: false,\r\n        preventClickEventOnDrag: true,\r\n        flushSync: defaultSync,\r\n        firstRenderState: null,\r\n        persistData: null,\r\n        viewContainer: null,\r\n        requestStyles: [],\r\n        useAccuratePosition: false,\r\n    };\r\n    return MoveableManager;\r\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\r\n/**\r\n * The target to indicate Moveable Control Box.\r\n * @name Moveable#target\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n * moveable.target = document.querySelector(\".target\");\r\n */\r\n/**\r\n * Zooms in the elements of a moveable.\r\n * @name Moveable#zoom\r\n * @default 1\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n * moveable.zoom = 2;\r\n */\r\n/**\r\n * Whether the target size is detected and updated whenever it changes.\r\n * @name Moveable#useResizeObserver\r\n * @default false\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n * moveable.useResizeObserver = true;\r\n */\r\n/**\r\n * Resize, Scale Events at edges\r\n * @name Moveable#edge\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n * moveable.edge = true;\r\n */\r\n/**\r\n * You can specify the className of the moveable controlbox.\r\n * @name Moveable#className\r\n * @default \"\"\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *   className: \"\",\r\n * });\r\n *\r\n * moveable.className = \"moveable1\";\r\n */\r\n/**\r\n * The target(s) to drag Moveable target(s)\r\n * @name Moveable#dragTarget\r\n * @default target\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body);\r\n * moveable.target = document.querySelector(\".target\");\r\n * moveable.dragTarget = document.querySelector(\".dragTarget\");\r\n */\r\n/**\r\n * `renderStart` event occurs at the first start of all events.\r\n * @memberof Moveable\r\n * @event renderStart\r\n * @param {Moveable.OnRenderStart} - Parameters for the `renderStart` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: document.querySelector(\".target\"),\r\n * });\r\n * moveable.on(\"renderStart\", ({ target }) => {\r\n *     console.log(\"onRenderStart\", target);\r\n * });\r\n */\r\n/**\r\n * `render` event occurs before the target is drawn on the screen.\r\n * @memberof Moveable\r\n * @event render\r\n * @param {Moveable.OnRender} - Parameters for the `render` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: document.querySelector(\".target\"),\r\n * });\r\n * moveable.on(\"render\", ({ target }) => {\r\n *     console.log(\"onRender\", target);\r\n * });\r\n */\r\n/**\r\n * `renderEnd` event occurs at the end of all events.\r\n * @memberof Moveable\r\n * @event renderEnd\r\n * @param {Moveable.OnRenderEnd} - Parameters for the `renderEnd` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: document.querySelector(\".target\"),\r\n * });\r\n * moveable.on(\"renderEnd\", ({ target }) => {\r\n *     console.log(\"onRenderEnd\", target);\r\n * });\r\n */\r\n/**\r\n * `renderGroupStart` event occurs at the first start of all events in group.\r\n * @memberof Moveable\r\n * @event renderGroupStart\r\n * @param {Moveable.OnRenderGroupStart} - Parameters for the `renderGroupStart` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n * });\r\n * moveable.on(\"renderGroupStart\", ({ targets }) => {\r\n *     console.log(\"onRenderGroupStart\", targets);\r\n * });\r\n */\r\n/**\r\n * `renderGroup` event occurs before the target is drawn on the screen in group.\r\n * @memberof Moveable\r\n * @event renderGroup\r\n * @param {Moveable.OnRenderGroup} - Parameters for the `renderGroup` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n * });\r\n * moveable.on(\"renderGroup\", ({ targets }) => {\r\n *     console.log(\"onRenderGroup\", targets);\r\n * });\r\n */\r\n/**\r\n * `renderGroupEnd` event occurs at the end of all events in group.\r\n * @memberof Moveable\r\n * @event renderGroupEnd\r\n * @param {Moveable.OnRenderGroupEnd} - Parameters for the `renderGroupEnd` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n * });\r\n * moveable.on(\"renderGroupEnd\", ({ targets }) => {\r\n *     console.log(\"onRenderGroupEnd\", targets);\r\n * });\r\n */\n\nvar Groupable = {\r\n    name: \"groupable\",\r\n    props: [\r\n        \"defaultGroupRotate\",\r\n        \"useDefaultGroupRotate\",\r\n        \"defaultGroupOrigin\",\r\n        \"groupable\",\r\n        \"groupableProps\",\r\n        \"targetGroups\",\r\n        \"hideChildMoveableDefaultLines\",\r\n    ],\r\n    events: [],\r\n    render: function (moveable, React) {\r\n        var _a;\r\n        var props = moveable.props;\r\n        var targets = props.targets || [];\r\n        var _b = moveable.getState(), left = _b.left, top = _b.top, isPersisted = _b.isPersisted;\r\n        var zoom = props.zoom || 1;\r\n        var renderGroupRects = moveable.renderGroupRects;\r\n        var persistDatChildren = ((_a = props.persistData) === null || _a === void 0 ? void 0 : _a.children) || [];\r\n        if (isPersisted) {\r\n            targets = persistDatChildren.map(function () { return null; });\r\n        }\r\n        else {\r\n            persistDatChildren = [];\r\n        }\r\n        var parentPosition = watchValue(moveable, \"parentPosition\", [left, top], function (styles) { return styles.join(\",\"); });\r\n        var requestStyles = watchValue(moveable, \"requestStyles\", moveable.getRequestChildStyles(), function (styles) { return styles.join(\",\"); });\r\n        moveable.moveables = moveable.moveables.slice(0, targets.length);\r\n        return __spreadArray(__spreadArray([], __read(targets.map(function (target, i) {\r\n            return React.createElement(MoveableManager, { key: \"moveable\" + i, ref: (0,framework_utils__WEBPACK_IMPORTED_MODULE_6__.refs)(moveable, \"moveables\", i), target: target, origin: false, requestStyles: requestStyles, cssStyled: props.cssStyled, customStyledMap: props.customStyledMap, useResizeObserver: props.useResizeObserver, useMutationObserver: props.useMutationObserver, hideChildMoveableDefaultLines: props.hideChildMoveableDefaultLines, parentMoveable: moveable, parentPosition: [left, top], persistData: persistDatChildren[i], zoom: zoom });\r\n        })), false), __read(flat(renderGroupRects.map(function (_a, i) {\r\n            var pos1 = _a.pos1, pos2 = _a.pos2, pos3 = _a.pos3, pos4 = _a.pos4;\r\n            var poses = [pos1, pos2, pos3, pos4];\r\n            return [\r\n                [0, 1],\r\n                [1, 3],\r\n                [3, 2],\r\n                [2, 0],\r\n            ].map(function (_a, j) {\r\n                var _b = __read(_a, 2), from = _b[0], to = _b[1];\r\n                return renderLine(React, \"\", (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(poses[from], parentPosition), (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(poses[to], parentPosition), zoom, \"group-rect-\".concat(i, \"-\").concat(j));\r\n            });\r\n        }))), false);\r\n    },\r\n};\n\nvar Clickable = makeAble(\"clickable\", {\r\n    props: [\r\n        \"clickable\",\r\n    ],\r\n    events: [\r\n        \"click\",\r\n        \"clickGroup\",\r\n    ],\r\n    always: true,\r\n    dragRelation: \"weak\",\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    dragStart: function () {\r\n        return;\r\n    },\r\n    dragControlStart: function () {\r\n        return;\r\n    },\r\n    dragGroupStart: function (moveable, e) {\r\n        e.datas.inputTarget = e.inputEvent && e.inputEvent.target;\r\n    },\r\n    dragEnd: function (moveable, e) {\r\n        var target = moveable.props.target;\r\n        var inputEvent = e.inputEvent;\r\n        var inputTarget = e.inputTarget;\r\n        var isMoveableElement = moveable.isMoveableElement(inputTarget);\r\n        var containsElement = !isMoveableElement && moveable.controlBox.contains(inputTarget);\r\n        if (!inputEvent || !inputTarget || e.isDrag\r\n            || moveable.isMoveableElement(inputTarget)\r\n            || containsElement\r\n        // External event duplicate target or dragAreaElement\r\n        ) {\r\n            return;\r\n        }\r\n        var containsTarget = target.contains(inputTarget);\r\n        triggerEvent(moveable, \"onClick\", fillParams(moveable, e, {\r\n            isDouble: e.isDouble,\r\n            inputTarget: inputTarget,\r\n            isTarget: target === inputTarget,\r\n            moveableTarget: moveable.props.target,\r\n            containsTarget: containsTarget,\r\n        }));\r\n    },\r\n    dragGroupEnd: function (moveable, e) {\r\n        var inputEvent = e.inputEvent;\r\n        var inputTarget = e.inputTarget;\r\n        if (!inputEvent || !inputTarget || e.isDrag\r\n            || moveable.isMoveableElement(inputTarget)\r\n            // External event duplicate target or dragAreaElement\r\n            || e.datas.inputTarget === inputTarget) {\r\n            return;\r\n        }\r\n        var targets = moveable.props.targets;\r\n        var targetIndex = targets.indexOf(inputTarget);\r\n        var isTarget = targetIndex > -1;\r\n        var containsTarget = false;\r\n        if (targetIndex === -1) {\r\n            targetIndex = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.findIndex)(targets, function (parentTarget) { return parentTarget.contains(inputTarget); });\r\n            containsTarget = targetIndex > -1;\r\n        }\r\n        triggerEvent(moveable, \"onClickGroup\", fillParams(moveable, e, {\r\n            isDouble: e.isDouble,\r\n            targets: targets,\r\n            inputTarget: inputTarget,\r\n            targetIndex: targetIndex,\r\n            isTarget: isTarget,\r\n            containsTarget: containsTarget,\r\n            moveableTarget: targets[targetIndex],\r\n        }));\r\n    },\r\n    dragControlEnd: function (moveable, e) {\r\n        this.dragEnd(moveable, e);\r\n    },\r\n    dragGroupControlEnd: function (moveable, e) {\r\n        this.dragEnd(moveable, e);\r\n    },\r\n});\r\n/**\r\n * When you click on the element, the `click` event is called.\r\n * @memberof Moveable\r\n * @event click\r\n * @param {Moveable.OnClick} - Parameters for the `click` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: document.querySelector(\".target\"),\r\n * });\r\n * moveable.on(\"click\", ({ hasTarget, containsTarget, targetIndex }) => {\r\n *     // If you click on an element other than the target and not included in the target, index is -1.\r\n *     console.log(\"onClickGroup\", target, hasTarget, containsTarget, targetIndex);\r\n * });\r\n */\r\n/**\r\n * When you click on the element inside the group, the `clickGroup` event is called.\r\n * @memberof Moveable\r\n * @event clickGroup\r\n * @param {Moveable.OnClickGroup} - Parameters for the `clickGroup` event\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\r\n * });\r\n * moveable.on(\"clickGroup\", ({ inputTarget, isTarget, containsTarget, targetIndex }) => {\r\n *     // If you click on an element other than the target and not included in the target, index is -1.\r\n *     console.log(\"onClickGroup\", inputTarget, isTarget, containsTarget, targetIndex);\r\n * });\r\n */\n\nfunction getDraggableEvent(e) {\r\n    var datas = e.originalDatas.draggable;\r\n    if (!datas) {\r\n        e.originalDatas.draggable = {};\r\n        datas = e.originalDatas.draggable;\r\n    }\r\n    return __assign(__assign({}, e), { datas: datas });\r\n}\r\nvar edgeDraggable = makeAble(\"edgeDraggable\", {\r\n    css: [\r\n        \".edge.edgeDraggable.line {\\ncursor: move;\\n}\",\r\n    ],\r\n    render: function (moveable, React) {\r\n        var props = moveable.props;\r\n        var edge = props.edgeDraggable;\r\n        if (!edge) {\r\n            return [];\r\n        }\r\n        return renderEdgeLines(React, \"edgeDraggable\", edge, moveable.getState().renderPoses, props.zoom);\r\n    },\r\n    dragCondition: function (moveable, e) {\r\n        var _a;\r\n        var props = moveable.props;\r\n        var target = (_a = e.inputEvent) === null || _a === void 0 ? void 0 : _a.target;\r\n        if (!props.edgeDraggable || !target) {\r\n            return false;\r\n        }\r\n        return !props.draggable\r\n            && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"direction\"))\r\n            && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"edge\"))\r\n            && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"edgeDraggable\"));\r\n    },\r\n    dragStart: function (moveable, e) {\r\n        return Draggable.dragStart(moveable, getDraggableEvent(e));\r\n    },\r\n    drag: function (moveable, e) {\r\n        return Draggable.drag(moveable, getDraggableEvent(e));\r\n    },\r\n    dragEnd: function (moveable, e) {\r\n        return Draggable.dragEnd(moveable, getDraggableEvent(e));\r\n    },\r\n    dragGroupCondition: function (moveable, e) {\r\n        var _a;\r\n        var props = moveable.props;\r\n        var target = (_a = e.inputEvent) === null || _a === void 0 ? void 0 : _a.target;\r\n        if (!props.edgeDraggable || !target) {\r\n            return false;\r\n        }\r\n        return !props.draggable && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"direction\")) && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.hasClass)(target, prefix(\"line\"));\r\n    },\r\n    dragGroupStart: function (moveable, e) {\r\n        return Draggable.dragGroupStart(moveable, getDraggableEvent(e));\r\n    },\r\n    dragGroup: function (moveable, e) {\r\n        return Draggable.dragGroup(moveable, getDraggableEvent(e));\r\n    },\r\n    dragGroupEnd: function (moveable, e) {\r\n        return Draggable.dragGroupEnd(moveable, getDraggableEvent(e));\r\n    },\r\n    unset: function (moveable) {\r\n        return Draggable.unset(moveable);\r\n    },\r\n});\r\n/**\r\n * Whether to move by dragging the edge line (default: false)\r\n * @name Moveable.Draggable#edgeDraggable\r\n * @example\r\n * import Moveable from \"moveable\";\r\n *\r\n * const moveable = new Moveable(document.body, {\r\n *  draggable: true,\r\n *  edgeDraggable: false,\r\n * });\r\n *\r\n * moveable.edgeDraggable = true;\r\n */\n\nvar IndividualGroupable = {\r\n    name: \"individualGroupable\",\r\n    props: [\r\n        \"individualGroupable\",\r\n        \"individualGroupableProps\",\r\n    ],\r\n    events: [],\r\n};\n\nvar MOVEABLE_ABLES =  [\r\n    BeforeRenderable,\r\n    Default, Snappable, Pinchable,\r\n    Draggable, edgeDraggable,\r\n    Resizable, Scalable, Warpable, Rotatable,\r\n    Scrollable, Padding, Origin,\r\n    OriginDraggable,\r\n    Clippable, Roundable, Groupable, IndividualGroupable,\r\n    Clickable,\r\n    DragArea,\r\n    Renderable,\r\n];\r\nvar MOVEABLE_EVENTS = /*#__PURE__*/ MOVEABLE_ABLES.reduce(function (current, able) {\r\n    (able.events || []).forEach(function (name) {\r\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.pushSet)(current, name);\r\n    });\r\n    return current;\r\n}, []);\r\nvar MOVEABLE_PROPS = /*#__PURE__*/ MOVEABLE_ABLES.reduce(function (current, able) {\r\n    (able.props || []).forEach(function (name) {\r\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.pushSet)(current, name);\r\n    });\r\n    return current;\r\n}, []);\n\nfunction solveConstantsDistance(_a, pos) {\r\n    var _b = __read(_a, 3), a = _b[0], b = _b[1], c = _b[2];\r\n    return (a * pos[0] + b * pos[1] + c) / Math.sqrt(a * a + b * b);\r\n}\r\nfunction solveC(_a, pos) {\r\n    var _b = __read(_a, 2), a = _b[0], b = _b[1];\r\n    // ax + by + c = 0\r\n    // -ax -by;\r\n    return -a * pos[0] - b * pos[1];\r\n}\n\nfunction getMaxPos(poses, index) {\r\n    return Math.max.apply(Math, __spreadArray([], __read(poses.map(function (_a) {\r\n        var _b = __read(_a, 4), pos1 = _b[0], pos2 = _b[1], pos3 = _b[2], pos4 = _b[3];\r\n        return Math.max(pos1[index], pos2[index], pos3[index], pos4[index]);\r\n    })), false));\r\n}\r\nfunction getMinPos(poses, index) {\r\n    return Math.min.apply(Math, __spreadArray([], __read(poses.map(function (_a) {\r\n        var _b = __read(_a, 4), pos1 = _b[0], pos2 = _b[1], pos3 = _b[2], pos4 = _b[3];\r\n        return Math.min(pos1[index], pos2[index], pos3[index], pos4[index]);\r\n    })), false));\r\n}\r\nfunction getGroupRect(parentPoses, rotation) {\r\n    var _a, _b, _c;\r\n    var pos1 = [0, 0];\r\n    var pos2 = [0, 0];\r\n    var pos3 = [0, 0];\r\n    var pos4 = [0, 0];\r\n    var width = 0;\r\n    var height = 0;\r\n    if (!parentPoses.length) {\r\n        return {\r\n            pos1: pos1,\r\n            pos2: pos2,\r\n            pos3: pos3,\r\n            pos4: pos4,\r\n            minX: 0,\r\n            minY: 0,\r\n            maxX: 0,\r\n            maxY: 0,\r\n            width: width,\r\n            height: height,\r\n            rotation: rotation,\r\n        };\r\n    }\r\n    var fixedRotation = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.throttle)(rotation, TINY_NUM);\r\n    if (fixedRotation % 90) {\r\n        var rad = fixedRotation / 180 * Math.PI;\r\n        var a1_1 = Math.tan(rad);\r\n        var a2_1 = -1 / a1_1;\r\n        // ax = y  // -ax + y = 0 // 0 => 1\r\n        // -ax = y // ax + y = 0  // 0 => 3\r\n        var a1MinMax_1 = [MAX_NUM, MIN_NUM];\r\n        var a1MinMaxPos_1 = [[0, 0], [0, 0]];\r\n        var a2MinMax_1 = [MAX_NUM, MIN_NUM];\r\n        var a2MinMaxPos_1 = [[0, 0], [0, 0]];\r\n        parentPoses.forEach(function (poses) {\r\n            poses.forEach(function (pos) {\r\n                // const b1 = pos[1] - a1 * pos[0];\r\n                // const b2 = pos[1] - a2 * pos[0];\r\n                var a1Dist = solveConstantsDistance([-a1_1, 1, 0], pos);\r\n                var a2Dist = solveConstantsDistance([-a2_1, 1, 0], pos);\r\n                if (a1MinMax_1[0] > a1Dist) {\r\n                    a1MinMaxPos_1[0] = pos;\r\n                    a1MinMax_1[0] = a1Dist;\r\n                }\r\n                if (a1MinMax_1[1] < a1Dist) {\r\n                    a1MinMaxPos_1[1] = pos;\r\n                    a1MinMax_1[1] = a1Dist;\r\n                }\r\n                if (a2MinMax_1[0] > a2Dist) {\r\n                    a2MinMaxPos_1[0] = pos;\r\n                    a2MinMax_1[0] = a2Dist;\r\n                }\r\n                if (a2MinMax_1[1] < a2Dist) {\r\n                    a2MinMaxPos_1[1] = pos;\r\n                    a2MinMax_1[1] = a2Dist;\r\n                }\r\n            });\r\n        });\r\n        var _d = __read(a1MinMaxPos_1, 2), a1MinPos = _d[0], a1MaxPos = _d[1];\r\n        var _e = __read(a2MinMaxPos_1, 2), a2MinPos = _e[0], a2MaxPos = _e[1];\r\n        var minHorizontalLine = [-a1_1, 1, solveC([-a1_1, 1], a1MinPos)];\r\n        var maxHorizontalLine = [-a1_1, 1, solveC([-a1_1, 1], a1MaxPos)];\r\n        var minVerticalLine = [-a2_1, 1, solveC([-a2_1, 1], a2MinPos)];\r\n        var maxVerticalLine = [-a2_1, 1, solveC([-a2_1, 1], a2MaxPos)];\r\n        _a = __read([\r\n            [minHorizontalLine, minVerticalLine],\r\n            [minHorizontalLine, maxVerticalLine],\r\n            [maxHorizontalLine, minVerticalLine],\r\n            [maxHorizontalLine, maxVerticalLine],\r\n        ].map(function (_a) {\r\n            var _b = __read(_a, 2), line1 = _b[0], line2 = _b[1];\r\n            return (0,overlap_area__WEBPACK_IMPORTED_MODULE_8__.getIntersectionPointsByConstants)(line1, line2)[0];\r\n        }), 4), pos1 = _a[0], pos2 = _a[1], pos3 = _a[2], pos4 = _a[3];\r\n        width = a2MinMax_1[1] - a2MinMax_1[0];\r\n        height = a1MinMax_1[1] - a1MinMax_1[0];\r\n    }\r\n    else {\r\n        var minX_1 = getMinPos(parentPoses, 0);\r\n        var minY_1 = getMinPos(parentPoses, 1);\r\n        var maxX_1 = getMaxPos(parentPoses, 0);\r\n        var maxY_1 = getMaxPos(parentPoses, 1);\r\n        pos1 = [minX_1, minY_1];\r\n        pos2 = [maxX_1, minY_1];\r\n        pos3 = [minX_1, maxY_1];\r\n        pos4 = [maxX_1, maxY_1];\r\n        width = maxX_1 - minX_1;\r\n        height = maxY_1 - minY_1;\r\n        if (fixedRotation % 180) {\r\n            // 0\r\n            // 1 2\r\n            // 3 4\r\n            // 90\r\n            // 3 1\r\n            // 4 2\r\n            // 180\r\n            // 4 3\r\n            // 2 1\r\n            // 270\r\n            // 2 4\r\n            // 1 3\r\n            // 1, 2, 3,4 = 3 1 4 2\r\n            var changedX = [pos3, pos1, pos4, pos2];\r\n            _b = __read(changedX, 4), pos1 = _b[0], pos2 = _b[1], pos3 = _b[2], pos4 = _b[3];\r\n            width = maxY_1 - minY_1;\r\n            height = maxX_1 - minX_1;\r\n        }\r\n    }\r\n    if (fixedRotation % 360 > 180) {\r\n        // 1 2   4 3\r\n        // 3 4   2 1\r\n        var changedX = [pos4, pos3, pos2, pos1];\r\n        _c = __read(changedX, 4), pos1 = _c[0], pos2 = _c[1], pos3 = _c[2], pos4 = _c[3];\r\n    }\r\n    var _f = (0,overlap_area__WEBPACK_IMPORTED_MODULE_8__.getMinMaxs)([pos1, pos2, pos3, pos4]), minX = _f.minX, minY = _f.minY, maxX = _f.maxX, maxY = _f.maxY;\r\n    return {\r\n        pos1: pos1,\r\n        pos2: pos2,\r\n        pos3: pos3,\r\n        pos4: pos4,\r\n        width: width,\r\n        height: height,\r\n        minX: minX,\r\n        minY: minY,\r\n        maxX: maxX,\r\n        maxY: maxY,\r\n        rotation: rotation,\r\n    };\r\n}\r\nfunction findMoveableGroups(moveables, childTargetGroups) {\r\n    var groups = childTargetGroups.map(function (targetGroup) {\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(targetGroup)) {\r\n            var childMoveableGroups = findMoveableGroups(moveables, targetGroup);\r\n            var length_1 = childMoveableGroups.length;\r\n            if (length_1 > 1) {\r\n                return childMoveableGroups;\r\n            }\r\n            else if (length_1 === 1) {\r\n                return childMoveableGroups[0];\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            var checked = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.find)(moveables, function (_a) {\r\n                var manager = _a.manager;\r\n                return manager.props.target === targetGroup;\r\n            });\r\n            if (checked) {\r\n                checked.finded = true;\r\n                return checked.manager;\r\n            }\r\n            return null;\r\n        }\r\n    }).filter(Boolean);\r\n    if (groups.length === 1 && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(groups[0])) {\r\n        return groups[0];\r\n    }\r\n    return groups;\r\n}\r\n/**\r\n * @namespace Moveable.Group\r\n * @description You can make targets moveable.\r\n */\r\nvar MoveableGroup = /*#__PURE__*/ (function (_super) {\r\n    __extends(MoveableGroup, _super);\r\n    function MoveableGroup() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.differ = new _egjs_children_differ__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\r\n        _this.moveables = [];\r\n        _this.transformOrigin = \"50% 50%\";\r\n        _this.renderGroupRects = [];\r\n        _this._targetGroups = [];\r\n        _this._hasFirstTargets = false;\r\n        return _this;\r\n    }\r\n    MoveableGroup.prototype.componentDidMount = function () {\r\n        _super.prototype.componentDidMount.call(this);\r\n    };\r\n    MoveableGroup.prototype.checkUpdate = function () {\r\n        this._isPropTargetChanged = false;\r\n        this.updateAbles();\r\n    };\r\n    MoveableGroup.prototype.getTargets = function () {\r\n        return this.props.targets;\r\n    };\r\n    MoveableGroup.prototype.updateRect = function (type, isTarget, isSetState) {\r\n        var _a;\r\n        if (isSetState === void 0) { isSetState = true; }\r\n        var state = this.state;\r\n        if (!this.controlBox || state.isPersisted) {\r\n            return;\r\n        }\r\n        setStoreCache(true);\r\n        this.moveables.forEach(function (moveable) {\r\n            moveable.updateRect(type, false, false);\r\n        });\r\n        var props = this.props;\r\n        var moveables = this.moveables;\r\n        var target = state.target || props.target;\r\n        var checkeds = moveables.map(function (moveable) { return ({ finded: false, manager: moveable }); });\r\n        var targetGroups = this.props.targetGroups || [];\r\n        var moveableGroups = findMoveableGroups(checkeds, targetGroups);\r\n        var useDefaultGroupRotate = props.useDefaultGroupRotate;\r\n        moveableGroups.push.apply(moveableGroups, __spreadArray([], __read(checkeds.filter(function (_a) {\r\n            var finded = _a.finded;\r\n            return !finded;\r\n        }).map(function (_a) {\r\n            var manager = _a.manager;\r\n            return manager;\r\n        })), false));\r\n        var renderGroupRects = [];\r\n        var isReset = !isTarget || (type !== \"\" && props.updateGroup);\r\n        var defaultGroupRotate = props.defaultGroupRotate || 0;\r\n        if (!this._hasFirstTargets) {\r\n            var persistedRoatation = (_a = props.persistData) === null || _a === void 0 ? void 0 : _a.rotation;\r\n            if (persistedRoatation != null) {\r\n                defaultGroupRotate = persistedRoatation;\r\n            }\r\n        }\r\n        function getMoveableGroupRect(group, parentRotation, isRoot) {\r\n            var posesRotations = group.map(function (moveable) {\r\n                if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(moveable)) {\r\n                    var rect = getMoveableGroupRect(moveable, parentRotation);\r\n                    var poses = [rect.pos1, rect.pos2, rect.pos3, rect.pos4];\r\n                    renderGroupRects.push(rect);\r\n                    return { poses: poses, rotation: rect.rotation };\r\n                }\r\n                else {\r\n                    return {\r\n                        poses: getAbsolutePosesByState(moveable.state),\r\n                        rotation: moveable.getRotation(),\r\n                    };\r\n                }\r\n            });\r\n            var rotations = posesRotations.map(function (_a) {\r\n                var rotation = _a.rotation;\r\n                return rotation;\r\n            });\r\n            var groupRotation = 0;\r\n            var firstRotation = rotations[0];\r\n            var isSameRotation = rotations.every(function (nextRotation) {\r\n                return Math.abs(firstRotation - nextRotation) < 0.1;\r\n            });\r\n            if (isReset) {\r\n                groupRotation = !useDefaultGroupRotate && isSameRotation ? firstRotation : defaultGroupRotate;\r\n            }\r\n            else {\r\n                groupRotation = !useDefaultGroupRotate && !isRoot && isSameRotation ? firstRotation : parentRotation;\r\n            }\r\n            var groupPoses = posesRotations.map(function (_a) {\r\n                var poses = _a.poses;\r\n                return poses;\r\n            });\r\n            var groupRect = getGroupRect(groupPoses, groupRotation);\r\n            return groupRect;\r\n        }\r\n        var rootGroupRect = getMoveableGroupRect(moveableGroups, this.rotation, true);\r\n        if (isReset) {\r\n            // reset rotataion\r\n            this.rotation = rootGroupRect.rotation;\r\n            this.transformOrigin = props.defaultGroupOrigin || \"50% 50%\";\r\n            this.scale = [1, 1];\r\n        }\r\n        this._targetGroups = targetGroups;\r\n        this.renderGroupRects = renderGroupRects;\r\n        var transformOrigin = this.transformOrigin;\r\n        var rotation = this.rotation;\r\n        var scale = this.scale;\r\n        var width = rootGroupRect.width, height = rootGroupRect.height, minX = rootGroupRect.minX, minY = rootGroupRect.minY;\r\n        var posesInfo = rotatePosesInfo([\r\n            [0, 0],\r\n            [width, 0],\r\n            [0, height],\r\n            [width, height],\r\n        ], convertTransformOriginArray(transformOrigin, width, height), this.rotation / 180 * Math.PI);\r\n        var _b = (0,overlap_area__WEBPACK_IMPORTED_MODULE_8__.getMinMaxs)(posesInfo.result), deltaX = _b.minX, deltaY = _b.minY;\r\n        var rotateScale = \" rotate(\".concat(rotation, \"deg)\")\r\n            + \" scale(\".concat(sign(scale[0]), \", \").concat(sign(scale[1]), \")\");\r\n        var transform = \"translate(\".concat(-deltaX, \"px, \").concat(-deltaY, \"px)\").concat(rotateScale);\r\n        this.controlBox.style.transform\r\n            = \"translate3d(\".concat(minX, \"px, \").concat(minY, \"px, \").concat(this.props.translateZ || 0, \")\");\r\n        target.style.cssText += \"left:0px;top:0px;\"\r\n            + \"transform-origin:\".concat(transformOrigin, \";\")\r\n            + \"width:\".concat(width, \"px;height:\").concat(height, \"px;\")\r\n            + \"transform: \".concat(transform);\r\n        state.width = width;\r\n        state.height = height;\r\n        var container = this.getContainer();\r\n        var info = getMoveableTargetInfo(this.controlBox, target, this.controlBox, this.getContainer(), this._rootContainer || container, []);\r\n        var pos = [info.left, info.top];\r\n        var _c = __read(getAbsolutePosesByState(info), 4), pos1 = _c[0], pos2 = _c[1], pos3 = _c[2], pos4 = _c[3]; // info.left + info.pos(1 ~ 4)\r\n        var minPos = (0,overlap_area__WEBPACK_IMPORTED_MODULE_8__.getMinMaxs)([pos1, pos2, pos3, pos4]);\r\n        var delta = [minPos.minX, minPos.minY];\r\n        var direction = sign(scale[0] * scale[1]);\r\n        info.pos1 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(pos1, delta);\r\n        info.pos2 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(pos2, delta);\r\n        info.pos3 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(pos3, delta);\r\n        info.pos4 = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)(pos4, delta);\r\n        // info.left = info.left + delta[0];\r\n        // info.top = info.top + delta[1];\r\n        info.left = minX - info.left + delta[0];\r\n        info.top = minY - info.top + delta[1];\r\n        info.origin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(pos, info.origin), delta);\r\n        info.beforeOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(pos, info.beforeOrigin), delta);\r\n        info.originalBeforeOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(pos, info.originalBeforeOrigin);\r\n        info.transformOrigin = (0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.minus)((0,_scena_matrix__WEBPACK_IMPORTED_MODULE_2__.plus)(pos, info.transformOrigin), delta);\r\n        target.style.transform\r\n            = \"translate(\".concat(-deltaX - delta[0], \"px, \").concat(-deltaY - delta[1], \"px)\")\r\n                + rotateScale;\r\n        setStoreCache();\r\n        this.updateState(__assign(__assign({}, info), { posDelta: delta, direction: direction, beforeDirection: direction }), isSetState);\r\n    };\r\n    MoveableGroup.prototype.getRect = function () {\r\n        return __assign(__assign({}, _super.prototype.getRect.call(this)), { children: this.moveables.map(function (child) { return child.getRect(); }) });\r\n    };\r\n    MoveableGroup.prototype.triggerEvent = function (name, e, isManager) {\r\n        if (isManager || name.indexOf(\"Group\") > -1) {\r\n            return _super.prototype.triggerEvent.call(this, name, e);\r\n        }\r\n        else {\r\n            this._emitter.trigger(name, e);\r\n        }\r\n    };\r\n    MoveableGroup.prototype.getRequestChildStyles = function () {\r\n        var styleNames = this.getEnabledAbles().reduce(function (names, able) {\r\n            var _a, _b;\r\n            var ableStyleNames = ((_b = (_a = able.requestChildStyle) === null || _a === void 0 ? void 0 : _a.call(able)) !== null && _b !== void 0 ? _b : []);\r\n            return __spreadArray(__spreadArray([], __read(names), false), __read(ableStyleNames), false);\r\n        }, []);\r\n        return styleNames;\r\n    };\r\n    MoveableGroup.prototype.getMoveables = function () {\r\n        return __spreadArray([], __read(this.moveables), false);\r\n    };\r\n    MoveableGroup.prototype.updateAbles = function () {\r\n        _super.prototype.updateAbles.call(this, __spreadArray(__spreadArray([], __read(this.props.ables), false), [Groupable], false), \"Group\");\r\n    };\r\n    MoveableGroup.prototype._updateTargets = function () {\r\n        _super.prototype._updateTargets.call(this);\r\n        this._originalDragTarget = this.props.dragTarget || this.areaElement;\r\n        this._dragTarget = getRefTarget(this._originalDragTarget, true);\r\n    };\r\n    MoveableGroup.prototype._updateEvents = function () {\r\n        var state = this.state;\r\n        var props = this.props;\r\n        var prevTarget = this._prevDragTarget;\r\n        var nextTarget = props.dragTarget || this.areaElement;\r\n        var targets = props.targets;\r\n        var _a = this.differ.update(targets), added = _a.added, changed = _a.changed, removed = _a.removed;\r\n        var isTargetChanged = added.length || removed.length;\r\n        if (isTargetChanged || this._prevOriginalDragTarget !== this._originalDragTarget) {\r\n            unsetGesto(this, false);\r\n            unsetGesto(this, true);\r\n            this.updateState({ gestos: {} });\r\n        }\r\n        if (prevTarget !== nextTarget) {\r\n            state.target = null;\r\n        }\r\n        if (!state.target) {\r\n            state.target = this.areaElement;\r\n            this.controlBox.style.display = \"block\";\r\n        }\r\n        if (state.target) {\r\n            if (!this.targetGesto) {\r\n                this.targetGesto = getTargetAbleGesto(this, this._dragTarget, \"Group\");\r\n            }\r\n            if (!this.controlGesto) {\r\n                this.controlGesto = getControlAbleGesto(this, \"GroupControl\");\r\n            }\r\n        }\r\n        var isContainerChanged = !equals(state.container, props.container);\r\n        if (isContainerChanged) {\r\n            state.container = props.container;\r\n        }\r\n        if (isContainerChanged\r\n            || isTargetChanged\r\n            || this.transformOrigin !== (props.defaultGroupOrigin || \"50% 50%\")\r\n            || changed.length\r\n            || targets.length && !isDeepArrayEquals(this._targetGroups, props.targetGroups || [])) {\r\n            this.updateRect();\r\n            this._hasFirstTargets = true;\r\n        }\r\n        this._isPropTargetChanged = !!isTargetChanged;\r\n    };\r\n    MoveableGroup.prototype._updateObserver = function () { };\r\n    MoveableGroup.defaultProps = __assign(__assign({}, MoveableManager.defaultProps), { transformOrigin: [\"50%\", \"50%\"], groupable: true, dragArea: true, keepRatio: true, targets: [], defaultGroupRotate: 0, defaultGroupOrigin: \"50% 50%\" });\r\n    return MoveableGroup;\r\n}(MoveableManager));\n\n/**\r\n * @namespace Moveable.IndividualGroup\r\n * @description Create targets individually, not as a group.Create targets individually, not as a group.\r\n */\r\nvar MoveableIndividualGroup = /*#__PURE__*/ (function (_super) {\r\n    __extends(MoveableIndividualGroup, _super);\r\n    function MoveableIndividualGroup() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.moveables = [];\r\n        return _this;\r\n    }\r\n    MoveableIndividualGroup.prototype.render = function () {\r\n        var _this = this;\r\n        var _a;\r\n        var props = this.props;\r\n        var cspNonce = props.cspNonce, ControlBoxElement = props.cssStyled, persistData = props.persistData;\r\n        var targets = props.targets || [];\r\n        var length = targets.length;\r\n        var canPersist = this.isUnmounted || !length;\r\n        var persistDatChildren = (_a = persistData === null || persistData === void 0 ? void 0 : persistData.children) !== null && _a !== void 0 ? _a : [];\r\n        if (canPersist && !length && persistDatChildren.length) {\r\n            targets = persistDatChildren.map(function () { return null; });\r\n        }\r\n        else if (!canPersist) {\r\n            persistDatChildren = [];\r\n        }\r\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlBoxElement, { cspNonce: cspNonce, ref: (0,framework_utils__WEBPACK_IMPORTED_MODULE_6__.ref)(this, \"controlBox\"), className: prefix(\"control-box\") }, targets.map(function (target, i) {\r\n            var _a, _b;\r\n            var individualProps = (_b = (_a = props.individualGroupableProps) === null || _a === void 0 ? void 0 : _a.call(props, target, i)) !== null && _b !== void 0 ? _b : {};\r\n            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(MoveableManager, __assign({ key: \"moveable\" + i, ref: (0,framework_utils__WEBPACK_IMPORTED_MODULE_6__.refs)(_this, \"moveables\", i) }, props, individualProps, { target: target, wrapperMoveable: _this, isWrapperMounted: _this.isMoveableMounted, persistData: persistDatChildren[i] }));\r\n        }));\r\n    };\r\n    MoveableIndividualGroup.prototype.componentDidMount = function () { };\r\n    MoveableIndividualGroup.prototype.componentDidUpdate = function () { };\r\n    MoveableIndividualGroup.prototype.getTargets = function () {\r\n        return this.props.targets;\r\n    };\r\n    MoveableIndividualGroup.prototype.updateRect = function (type, isTarget, isSetState) {\r\n        if (isSetState === void 0) { isSetState = true; }\r\n        setStoreCache(true);\r\n        this.moveables.forEach(function (moveable) {\r\n            moveable.updateRect(type, isTarget, isSetState);\r\n        });\r\n        setStoreCache();\r\n    };\r\n    MoveableIndividualGroup.prototype.getRect = function () {\r\n        return __assign(__assign({}, _super.prototype.getRect.call(this)), { children: this.moveables.map(function (child) { return child.getRect(); }) });\r\n    };\r\n    MoveableIndividualGroup.prototype.request = function (ableName, param, isInstant) {\r\n        if (param === void 0) { param = {}; }\r\n        var results = this.moveables.map(function (m) { return m.request(ableName, __assign(__assign({}, param), { isInstant: false }), false); });\r\n        var requestInstant = isInstant || param.isInstant;\r\n        var requester = {\r\n            request: function (ableParam) {\r\n                results.forEach(function (r) { return r.request(ableParam); });\r\n                return this;\r\n            },\r\n            requestEnd: function () {\r\n                results.forEach(function (r) { return r.requestEnd(); });\r\n                return this;\r\n            },\r\n        };\r\n        return requestInstant ? requester.request(param).requestEnd() : requester;\r\n    };\r\n    MoveableIndividualGroup.prototype.dragStart = function (e, target) {\r\n        if (target === void 0) { target = e.target; }\r\n        var inputTarget = target;\r\n        var childMoveable = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.find)(this.moveables, function (child) {\r\n            var target = child.getTargets()[0];\r\n            var controlBoxElement = child.getControlBoxElement();\r\n            var dragElement = child.getDragElement();\r\n            if (!target || !dragElement) {\r\n                return false;\r\n            }\r\n            return dragElement === inputTarget || dragElement.contains(inputTarget)\r\n                || (dragElement !== target && target === inputTarget || target.contains(inputTarget))\r\n                || controlBoxElement === inputTarget || controlBoxElement.contains(inputTarget);\r\n        });\r\n        if (childMoveable) {\r\n            childMoveable.dragStart(e, target);\r\n        }\r\n        return this;\r\n    };\r\n    MoveableIndividualGroup.prototype.hitTest = function () {\r\n        return 0;\r\n    };\r\n    MoveableIndividualGroup.prototype.isInside = function () {\r\n        return false;\r\n    };\r\n    MoveableIndividualGroup.prototype.isDragging = function () {\r\n        return false;\r\n    };\r\n    MoveableIndividualGroup.prototype.getDragElement = function () {\r\n        return null;\r\n    };\r\n    MoveableIndividualGroup.prototype.getMoveables = function () {\r\n        return __spreadArray([], __read(this.moveables), false);\r\n    };\r\n    MoveableIndividualGroup.prototype.updateRenderPoses = function () { };\r\n    MoveableIndividualGroup.prototype.checkUpdate = function () { };\r\n    MoveableIndividualGroup.prototype.triggerEvent = function () { };\r\n    MoveableIndividualGroup.prototype.updateAbles = function () { };\r\n    MoveableIndividualGroup.prototype._updateEvents = function () { };\r\n    MoveableIndividualGroup.prototype._updateObserver = function () { };\r\n    return MoveableIndividualGroup;\r\n}(MoveableManager));\n\nfunction getElementTargets(refTargets, selectorMap) {\r\n    var elementTargets = [];\r\n    refTargets.forEach(function (target) {\r\n        if (!target) {\r\n            return;\r\n        }\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isString)(target)) {\r\n            if (selectorMap[target]) {\r\n                elementTargets.push.apply(elementTargets, __spreadArray([], __read(selectorMap[target]), false));\r\n            }\r\n            return;\r\n        }\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(target)) {\r\n            elementTargets.push.apply(elementTargets, __spreadArray([], __read(getElementTargets(target, selectorMap)), false));\r\n        }\r\n        else {\r\n            elementTargets.push(target);\r\n        }\r\n    });\r\n    return elementTargets;\r\n}\r\nfunction getTargetGroups(refTargets, selectorMap) {\r\n    var targetGroups = [];\r\n    refTargets.forEach(function (target) {\r\n        if (!target) {\r\n            return;\r\n        }\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isString)(target)) {\r\n            if (selectorMap[target]) {\r\n                targetGroups.push.apply(targetGroups, __spreadArray([], __read(selectorMap[target]), false));\r\n            }\r\n            return;\r\n        }\r\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(target)) {\r\n            targetGroups.push(getTargetGroups(target, selectorMap));\r\n        }\r\n        else {\r\n            targetGroups.push(target);\r\n        }\r\n    });\r\n    return targetGroups;\r\n}\r\nfunction compareRefTargets(prevRefTargets, nextRefTargets) {\r\n    return (prevRefTargets.length !== nextRefTargets.length) || prevRefTargets.some(function (target, i) {\r\n        var nextTarget = nextRefTargets[i];\r\n        if (!target && !nextTarget) {\r\n            return false;\r\n        }\r\n        else if (target != nextTarget) {\r\n            if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(target) && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(nextTarget)) {\r\n                return compareRefTargets(target, nextTarget);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n}\r\nvar InitialMoveable = /*#__PURE__*/ (function (_super) {\r\n    __extends(InitialMoveable, _super);\r\n    function InitialMoveable() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.refTargets = [];\r\n        _this.selectorMap = {};\r\n        _this._differ = new _egjs_children_differ__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\r\n        _this._elementTargets = [];\r\n        _this._tmpRefTargets = [];\r\n        _this._tmpSelectorMap = {};\r\n        _this._onChangeTargets = null;\r\n        return _this;\r\n    }\r\n    InitialMoveable.makeStyled = function () {\r\n        var cssMap = {};\r\n        var ables = this.getTotalAbles();\r\n        ables.forEach(function (_a) {\r\n            var css = _a.css;\r\n            if (!css) {\r\n                return;\r\n            }\r\n            css.forEach(function (text) {\r\n                cssMap[text] = true;\r\n            });\r\n        });\r\n        var style = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.getKeys)(cssMap).join(\"\\n\");\r\n        this.defaultStyled = (0,react_css_styled__WEBPACK_IMPORTED_MODULE_11__.styled)(\"div\", (0,framework_utils__WEBPACK_IMPORTED_MODULE_6__.prefixCSS)(PREFIX, MOVEABLE_CSS + style));\r\n    };\r\n    InitialMoveable.getTotalAbles = function () {\r\n        return __spreadArray([Default, Groupable, IndividualGroupable, DragArea], __read(this.defaultAbles), false);\r\n    };\r\n    InitialMoveable.prototype.render = function () {\r\n        var _a;\r\n        var moveableContructor = this.constructor;\r\n        if (!moveableContructor.defaultStyled) {\r\n            moveableContructor.makeStyled();\r\n        }\r\n        var _b = this.props, userAbles = _b.ables, userProps = _b.props, props = __rest(_b, [\"ables\", \"props\"]);\r\n        var _c = __read(this._updateRefs(true), 2), refTargets = _c[0], nextSelectorMap = _c[1];\r\n        var elementTargets = getElementTargets(refTargets, nextSelectorMap);\r\n        var isGroup = elementTargets.length > 1;\r\n        var totalAbles = moveableContructor.getTotalAbles();\r\n        var ables = __spreadArray(__spreadArray([], __read(totalAbles), false), __read((userAbles || [])), false);\r\n        var nextProps = __assign(__assign(__assign({}, props), (userProps || {})), { ables: ables, cssStyled: moveableContructor.defaultStyled, customStyledMap: moveableContructor.customStyledMap });\r\n        this._elementTargets = elementTargets;\r\n        var firstRenderState = null;\r\n        var prevMoveable = this.moveable;\r\n        var persistData = props.persistData;\r\n        if (persistData === null || persistData === void 0 ? void 0 : persistData.children) {\r\n            isGroup = true;\r\n        }\r\n        // Even one child is treated as a group if individualGroupable is enabled. #867\r\n        if (props.individualGroupable) {\r\n            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(MoveableIndividualGroup, __assign({ key: \"individual-group\", ref: (0,framework_utils__WEBPACK_IMPORTED_MODULE_6__.ref)(this, \"moveable\") }, nextProps, { target: null, targets: elementTargets }));\r\n        }\r\n        if (isGroup) {\r\n            var targetGroups = getTargetGroups(refTargets, nextSelectorMap);\r\n            // manager\r\n            if (prevMoveable && !prevMoveable.props.groupable && !prevMoveable.props.individualGroupable) {\r\n                var target = prevMoveable.props.target;\r\n                if (target && elementTargets.indexOf(target) > -1) {\r\n                    firstRenderState = __assign({}, prevMoveable.state);\r\n                }\r\n            }\r\n            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(MoveableGroup, __assign({ key: \"group\", ref: (0,framework_utils__WEBPACK_IMPORTED_MODULE_6__.ref)(this, \"moveable\") }, nextProps, (_a = props.groupableProps) !== null && _a !== void 0 ? _a : {}, { target: null, targets: elementTargets, targetGroups: targetGroups, firstRenderState: firstRenderState }));\r\n        }\r\n        else {\r\n            var target_1 = elementTargets[0];\r\n            // manager\r\n            if (prevMoveable && (prevMoveable.props.groupable || prevMoveable.props.individualGroupable)) {\r\n                var moveables = prevMoveable.moveables || [];\r\n                var prevTargetMoveable = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.find)(moveables, function (mv) { return mv.props.target === target_1; });\r\n                if (prevTargetMoveable) {\r\n                    firstRenderState = __assign({}, prevTargetMoveable.state);\r\n                }\r\n            }\r\n            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(MoveableManager, __assign({ key: \"single\", ref: (0,framework_utils__WEBPACK_IMPORTED_MODULE_6__.ref)(this, \"moveable\") }, nextProps, { target: target_1, firstRenderState: firstRenderState }));\r\n        }\r\n    };\r\n    InitialMoveable.prototype.componentDidMount = function () {\r\n        this._checkChangeTargets();\r\n    };\r\n    InitialMoveable.prototype.componentDidUpdate = function () {\r\n        this._checkChangeTargets();\r\n    };\r\n    InitialMoveable.prototype.componentWillUnmount = function () {\r\n        this.selectorMap = {};\r\n        this.refTargets = [];\r\n    };\r\n    /**\r\n     * Get targets set in moveable through target or targets of props.\r\n     * @method Moveable#getTargets\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body, {\r\n     *    target: [targetRef, \".target\", document.querySelectorAll(\".target\")],\r\n     * });\r\n     *\r\n     * console.log(moveable.getTargets());\r\n     */\r\n    InitialMoveable.prototype.getTargets = function () {\r\n        var _a, _b;\r\n        return (_b = (_a = this.moveable) === null || _a === void 0 ? void 0 : _a.getTargets()) !== null && _b !== void 0 ? _b : [];\r\n    };\r\n    /**\r\n     * If the element list corresponding to the selector among the targets is changed, it is updated.\r\n     * @method Moveable#updateSelectors\r\n     * @example\r\n     * import Moveable from \"moveable\";\r\n     *\r\n     * const moveable = new Moveable(document.body, {\r\n     *    target: \".target\",\r\n     * });\r\n     *\r\n     * moveable.updateSelectors();\r\n     */\r\n    InitialMoveable.prototype.updateSelectors = function () {\r\n        this.selectorMap = {};\r\n        this._updateRefs();\r\n        this.forceUpdate();\r\n    };\r\n    /**\r\n     * User changes target and waits for target to change.\r\n     * @method Moveable#waitToChangeTarget\r\n     * @story combination-with-other-components--components-selecto\r\n     * @example\r\n     * document.querySelector(\".target\").addEventListener(\"mousedown\", e => {\r\n     *   moveable.waitToChangeTarget().then(() => {\r\n     *      moveable.dragStart(e, e.currentTarget);\r\n     *   });\r\n     *   moveable.target = e.currentTarget;\r\n     * });\r\n     */\r\n    InitialMoveable.prototype.waitToChangeTarget = function () {\r\n        // let resolvePromise: (e: OnChangeTarget) => void;\r\n        var _this = this;\r\n        // this._onChangeTargets = () => {\r\n        //     this._onChangeTargets = null;\r\n        //     resolvePromise({\r\n        //         moveable: this.getManager(),\r\n        //         targets: this._elementTargets,\r\n        //     });\r\n        // };\r\n        // return new Promise<OnChangeTarget>(resolve => {\r\n        //     resolvePromise = resolve;\r\n        // });\r\n        var resolvePromise;\r\n        this._onChangeTargets = function () {\r\n            _this._onChangeTargets = null;\r\n            resolvePromise();\r\n        };\r\n        return new Promise(function (resolve) {\r\n            resolvePromise = resolve;\r\n        });\r\n    };\r\n    InitialMoveable.prototype.waitToChangeTargets = function () {\r\n        return this.waitToChangeTarget();\r\n    };\r\n    InitialMoveable.prototype.getManager = function () {\r\n        return this.moveable;\r\n    };\r\n    InitialMoveable.prototype.getMoveables = function () {\r\n        return this.moveable.getMoveables();\r\n    };\r\n    InitialMoveable.prototype.getDragElement = function () {\r\n        return this.moveable.getDragElement();\r\n    };\r\n    InitialMoveable.prototype._updateRefs = function (isRender) {\r\n        var prevRefTargets = this.refTargets;\r\n        var nextRefTargets = getRefTargets((this.props.target || this.props.targets));\r\n        var isBrowser = typeof document !== \"undefined\";\r\n        var isUpdate = compareRefTargets(prevRefTargets, nextRefTargets);\r\n        var selectorMap = this.selectorMap;\r\n        var nextSelectorMap = {};\r\n        this.refTargets.forEach(function updateSelectorMap(target) {\r\n            if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isString)(target)) {\r\n                var selectorTarget = selectorMap[target];\r\n                if (selectorTarget) {\r\n                    nextSelectorMap[target] = selectorMap[target];\r\n                }\r\n                else if (isBrowser) {\r\n                    isUpdate = true;\r\n                    nextSelectorMap[target] = [].slice.call(document.querySelectorAll(target));\r\n                }\r\n            }\r\n            else if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_3__.isArray)(target)) {\r\n                target.forEach(updateSelectorMap);\r\n            }\r\n        });\r\n        this._tmpRefTargets = nextRefTargets;\r\n        this._tmpSelectorMap = nextSelectorMap;\r\n        return [\r\n            nextRefTargets,\r\n            nextSelectorMap,\r\n            !isRender && isUpdate,\r\n        ];\r\n    };\r\n    InitialMoveable.prototype._checkChangeTargets = function () {\r\n        var _a, _b, _c;\r\n        this.refTargets = this._tmpRefTargets;\r\n        this.selectorMap = this._tmpSelectorMap;\r\n        var _d = this._differ.update(this._elementTargets), added = _d.added, removed = _d.removed;\r\n        var isTargetChanged = added.length || removed.length;\r\n        if (isTargetChanged) {\r\n            (_b = (_a = this.props).onChangeTargets) === null || _b === void 0 ? void 0 : _b.call(_a, {\r\n                moveable: this.moveable,\r\n                targets: this._elementTargets,\r\n            });\r\n            (_c = this._onChangeTargets) === null || _c === void 0 ? void 0 : _c.call(this);\r\n        }\r\n        var _e = __read(this._updateRefs(), 3), refTargets = _e[0], selectorMap = _e[1], isUpdate = _e[2];\r\n        this.refTargets = refTargets;\r\n        this.selectorMap = selectorMap;\r\n        if (isUpdate) {\r\n            this.forceUpdate();\r\n        }\r\n    };\r\n    InitialMoveable.defaultAbles = [];\r\n    InitialMoveable.customStyledMap = {};\r\n    InitialMoveable.defaultStyled = null;\r\n    __decorate([\r\n        (0,framework_utils__WEBPACK_IMPORTED_MODULE_6__.withMethods)(MOVEABLE_METHODS)\r\n    ], InitialMoveable.prototype, \"moveable\", void 0);\r\n    return InitialMoveable;\r\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\n\nvar Moveable = /*#__PURE__*/ (function (_super) {\r\n    __extends(Moveable, _super);\r\n    function Moveable() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Moveable.defaultAbles = MOVEABLE_ABLES;\r\n    return Moveable;\r\n}(InitialMoveable));\n\nfunction makeMoveable(ables) {\r\n    var _a;\r\n    return _a = /*#__PURE__*/ (function (_super) {\r\n            __extends(Moveable, _super);\r\n            function Moveable() {\r\n                return _super !== null && _super.apply(this, arguments) || this;\r\n            }\r\n            return Moveable;\r\n        }(InitialMoveable)),\r\n        _a.defaultAbles = ables,\r\n        _a;\r\n}\n\n\n//# sourceMappingURL=moveable.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-moveable/dist/moveable.esm.js\n");

/***/ })

};
;