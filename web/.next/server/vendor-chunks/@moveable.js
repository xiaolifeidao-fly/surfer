"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@moveable";
exports.ids = ["vendor-chunks/@moveable"];
exports.modules = {

/***/ "(ssr)/./node_modules/@moveable/helper/dist/helper.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/@moveable/helper/dist/helper.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Child: () => (/* binding */ Child),\n/* harmony export */   GroupArrayChild: () => (/* binding */ GroupArrayChild),\n/* harmony export */   GroupManager: () => (/* binding */ GroupManager),\n/* harmony export */   GroupSingleChild: () => (/* binding */ GroupSingleChild),\n/* harmony export */   toTargetList: () => (/* binding */ toTargetList)\n/* harmony export */ });\n/* harmony import */ var _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @daybrush/utils */ \"(ssr)/./node_modules/@daybrush/utils/dist/utils.esm.js\");\n/*\nCopyright (c) Daybrush\nname: @moveable/helper\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/moveable/blob/master/packages/helper\nversion: 0.1.3\n*/\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nvar Child =\n/*#__PURE__*/\nfunction () {\n  function Child(parent) {\n    this.parent = parent;\n    this.type = \"single\";\n    this.depth = 0;\n    this._scope = [];\n\n    if (parent) {\n      this.depth = parent.depth + 1;\n    }\n  }\n\n  var __proto = Child.prototype;\n  Object.defineProperty(__proto, \"scope\", {\n    get: function () {\n      var parent = this.parent;\n\n      if (!parent || parent.type === \"root\") {\n        return [];\n      }\n\n      return __spreadArray(__spreadArray([], parent.scope, true), [parent.id], false);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Child;\n}();\n\nvar GroupSingleChild =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(GroupSingleChild, _super);\n\n  function GroupSingleChild(parent, value) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.value = value;\n    _this.type = \"single\";\n    return _this;\n  }\n\n  return GroupSingleChild;\n}(Child);\n\nvar GroupArrayChild =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(GroupArrayChild, _super);\n\n  function GroupArrayChild() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = \"group\";\n    _this.value = [];\n    _this.id = \"\";\n    _this.map = new Map();\n    return _this;\n  }\n\n  var __proto = GroupArrayChild.prototype;\n\n  __proto.compare = function (groups, checker) {\n    if (checker === void 0) {\n      checker = 0;\n    }\n\n    var elements = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.deepFlat)(groups);\n    var map = this.map;\n    var elementsLength = elements.length;\n    var mapSize = map.size;\n    var sizeDiff = mapSize - elementsLength; // 1 this > groups\n    // 0 this = groups\n    // -1 this < groups\n\n    var count = elements.filter(function (element) {\n      return map.has(element);\n    }).length;\n\n    if (checker > 0 && sizeDiff >= 0 || checker === 0 && sizeDiff === 0) {\n      return elementsLength === count;\n    } else if (checker < 0 && sizeDiff <= 0) {\n      return mapSize === count;\n    }\n\n    return false;\n  };\n\n  __proto.has = function (target) {\n    return this.map.has(target);\n  };\n\n  __proto.contains = function (element) {\n    if (this.has(element)) {\n      return true;\n    }\n\n    return this.value.some(function (child) {\n      if (child.type === \"group\") {\n        return child.contains(element);\n      } else {\n        return false;\n      }\n    });\n  };\n\n  __proto.findContainedChild = function (element) {\n    return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.find)(this.value, function (child) {\n      if (child.type === \"single\") {\n        return child.value === element;\n      } else {\n        return child.contains(element);\n      }\n    });\n  };\n  /**\n   * Exact group containing targets\n   */\n\n\n  __proto.findExactChild = function (target) {\n    var map = this.map;\n\n    if (!(0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) {\n      return map.get(target);\n    }\n\n    var flatted = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.deepFlat)(target);\n    var length = flatted.length;\n    var single = map.get(flatted[0]);\n\n    if (!single) {\n      return;\n    }\n\n    var parent = single.parent;\n\n    while (parent) {\n      if (parent.map.size >= length) {\n        return parent;\n      }\n\n      parent = parent.parent;\n    }\n\n    return;\n  };\n\n  __proto.findCommonParent = function (targets) {\n    var _this = this;\n\n    var depth = Infinity;\n    var childs = targets.map(function (target) {\n      return _this.findExactChild(target);\n    });\n    childs.forEach(function (child) {\n      if (!child) {\n        return;\n      }\n\n      depth = Math.min(child.depth, depth);\n    });\n\n    var _loop_1 = function () {\n      --depth;\n      childs = childs.map(function (child) {\n        var parent = child;\n\n        while (parent && parent.depth !== depth) {\n          parent = parent.parent;\n        }\n\n        return parent;\n      });\n      var firstChild = childs.find(function (child) {\n        return child;\n      });\n\n      if (!firstChild) {\n        return {\n          value: this_1\n        };\n      }\n\n      if (childs.every(function (child) {\n        return !child || child === firstChild;\n      })) {\n        return \"break\";\n      }\n    };\n\n    var this_1 = this;\n\n    while (depth) {\n      var state_1 = _loop_1();\n\n      if (typeof state_1 === \"object\") return state_1.value;\n      if (state_1 === \"break\") break;\n    }\n\n    var commonParent = childs.find(function (child) {\n      return child;\n    });\n    return commonParent || this;\n  };\n\n  __proto.findNextChild = function (target, range, isExact) {\n    var _this = this;\n\n    if (range === void 0) {\n      range = this.toTargetGroups();\n    }\n\n    if (isExact === void 0) {\n      isExact = true;\n    }\n\n    var nextChild = null;\n    var length = range.length;\n    range.some(function (child) {\n      if (!isExact && length === 1 && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(child)) {\n        nextChild = _this.findNextChild(target, child);\n        return nextChild;\n      }\n\n      var nextGroupChild = _this.findExactChild(child);\n\n      if (!nextGroupChild) {\n        return;\n      }\n\n      if (\"map\" in nextGroupChild) {\n        if (nextGroupChild.map.has(target)) {\n          nextChild = nextGroupChild;\n          return true;\n        }\n      }\n    });\n    return nextChild;\n  };\n\n  __proto.findNextExactChild = function (target, selected, range) {\n    if (range === void 0) {\n      range = this.toTargetGroups();\n    } // [[1, 2]] => group([1, 2]) exact\n    // [[[1, 2], 3]] => group([1, 2])\n\n\n    var nextChild = this.findNextChild(target, range, true);\n\n    if (!nextChild) {\n      return null;\n    }\n\n    if (nextChild.compare(selected, -1)) {\n      return nextChild;\n    }\n\n    return null;\n  };\n  /**\n   * Finds a group that does not overlap within the range and includes the target.\n   */\n\n\n  __proto.findPureChild = function (target, range) {\n    var _this = this;\n\n    var nextGroupChild = null;\n    var childSelected = range.filter(function (element) {\n      return _this.has(element);\n    });\n\n    if (!childSelected.length) {\n      return this;\n    }\n\n    this.value.some(function (nextChild) {\n      if (nextChild.type !== \"single\" && nextChild.has(target)) {\n        nextGroupChild = nextChild.findPureChild(target, childSelected);\n\n        if (nextGroupChild) {\n          return true;\n        }\n      }\n    });\n    return nextGroupChild;\n  };\n\n  __proto.findNextPureChild = function (target, range) {\n    var nextChild = this.findNextChild(target);\n\n    if (nextChild) {\n      return nextChild.findPureChild(target, range);\n    }\n\n    return null;\n  };\n\n  __proto.toTargetGroups = function () {\n    return this.value.map(function (child) {\n      if (child.type === \"single\") {\n        return child.value;\n      } else {\n        return child.toTargetGroups();\n      }\n    });\n  };\n\n  __proto.findArrayChild = function (targets) {\n    var value = this.value;\n    var result = false;\n\n    if (this.type !== \"root\") {\n      result = value.every(function (child) {\n        if (child.type === \"single\") {\n          return targets.some(function (target) {\n            return child.value === target;\n          });\n        } else {\n          return targets.some(function (target) {\n            return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) && child.findArrayChild(target);\n          });\n        }\n      }); // result = targets.every(target => {\n      //     if (isArray(target)) {\n      //         return value.some(child => {\n      //             return child.type === \"group\" && child.findArrayChild(target);\n      //         });\n      //     } else {\n      //         return map.get(target);\n      //     }\n      // });\n    }\n\n    if (result && targets.length === value.length) {\n      return this;\n    } else {\n      var childResult_1 = null;\n      value.some(function (child) {\n        if (child.type === \"group\") {\n          childResult_1 = child.findArrayChild(targets);\n          return childResult_1;\n        }\n      });\n      return childResult_1;\n    }\n  };\n\n  __proto.groupByPerfect = function (selected) {\n    return this.value.filter(function (child) {\n      if (child.type !== \"single\") {\n        return child.compare(selected, -1);\n      }\n\n      return selected.indexOf(child.value) > -1;\n    });\n  };\n\n  __proto.add = function (targets) {\n    var _this = this;\n\n    var _a = this,\n        value = _a.value,\n        map = _a.map;\n\n    var depth = this.depth;\n    targets.forEach(function (child) {\n      if (\"groupId\" in child) {\n        var group = new GroupArrayChild(_this);\n        group.id = child.groupId;\n        group.depth = depth + 1;\n        value.push(group);\n        group.add(child.children);\n      } else if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(child)) {\n        var group = new GroupArrayChild(_this);\n        group.depth = depth + 1;\n        value.push(group);\n        group.add(child);\n      } else {\n        var element = \"current\" in child ? child.current : child;\n        var single = new GroupSingleChild(_this, element);\n        single.depth = depth + 1;\n        value.push(single);\n        map.set(element, single);\n      }\n    });\n    value.forEach(function (child) {\n      if (child.type === \"single\") {\n        map.set(child.value, child);\n      } else {\n        child.map.forEach(function (nextChild, element) {\n          map.set(element, nextChild);\n        });\n      }\n    });\n    return parent;\n  };\n\n  return GroupArrayChild;\n}(Child);\n\nfunction toTargetList(raw) {\n  function targets(childs) {\n    if (childs === void 0) {\n      childs = [];\n    }\n\n    var arr = [];\n    childs.forEach(function (child) {\n      if (child.type === \"single\") {\n        arr.push(child.value);\n      } else {\n        arr.push(targets(child.value));\n      }\n    });\n    return arr;\n  }\n\n  return {\n    raw: function () {\n      return raw;\n    },\n    targets: function () {\n      return targets(this.raw());\n    },\n    flatten: function () {\n      return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.deepFlat)(this.targets());\n    }\n  };\n}\n\nvar GroupManager =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(GroupManager, _super);\n\n  function GroupManager(targetGroups, targets) {\n    var _this = _super.call(this) || this;\n\n    _this.type = \"root\";\n    _this._targets = [];\n\n    _this.set(targetGroups, targets);\n\n    return _this;\n  }\n\n  var __proto = GroupManager.prototype;\n\n  __proto.set = function (targetGroups, targets) {\n    var _this = this;\n\n    if (targets === void 0) {\n      targets = [];\n    }\n\n    this.map = new Map();\n    this.value = [];\n    var map = this.map;\n    var value = this.value;\n    this.add(targetGroups);\n    targets.forEach(function (target) {\n      if (map.has(target)) {\n        return;\n      }\n\n      var single = new GroupSingleChild(_this, target);\n      single.depth = 1;\n      value.push(single);\n      map.set(target, single);\n    });\n    this._targets = targets;\n  };\n\n  __proto.selectSubChilds = function (targets, target) {\n    var root = this;\n    var nextChild = root.findNextChild(target, targets, false);\n    var targetChild = root.map.get(target);\n    var nextChilds = [];\n\n    if (nextChild) {\n      nextChilds = [nextChild];\n    } else if (targetChild) {\n      nextChilds = [targetChild];\n    } else {\n      nextChilds = [];\n    }\n\n    return toTargetList(nextChilds);\n  };\n\n  __proto.selectSingleChilds = function (targets, added, removed) {\n    var nextTargets = __spreadArray([], targets, true); // group can't be added, removed.\n\n\n    removed.forEach(function (element) {\n      var index = nextTargets.indexOf(element);\n\n      if (index > -1) {\n        nextTargets.splice(index, 1);\n      }\n    }); // Targets can be added one by one\n\n    added.forEach(function (element) {\n      nextTargets.push(element);\n    });\n    return toTargetList(this.toChilds(nextTargets));\n  };\n\n  __proto.selectCompletedChilds = function (targets, added, removed, continueSelect) {\n    var _this = this;\n\n    var nextTargets = __spreadArray([], targets, true);\n\n    var startSelected = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.deepFlat)(nextTargets); // group can be added, removed.\n\n    removed.forEach(function (element) {\n      // Single Target\n      var index = nextTargets.indexOf(element);\n\n      if (index > -1) {\n        // single target or group\n        nextTargets.splice(index, 1);\n        return;\n      } // Group Target\n\n\n      var removedChild = continueSelect // Finds the nearest child for element and nextTargets.\n      ? _this.findNextChild(element, nextTargets) // Find the nearest exact child for element, all removed and nextTargets.\n      : _this.findNextExactChild(element, removed, nextTargets);\n\n      if (removedChild) {\n        var groupIndex = nextTargets.findIndex(function (target) {\n          return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) && removedChild.compare(target);\n        });\n\n        if (groupIndex > -1) {\n          nextTargets.splice(groupIndex, 1);\n        }\n      }\n    });\n    added.forEach(function (element) {\n      var parentGroup = _this._findParentGroup(element, startSelected);\n\n      var nextChild = parentGroup.findContainedChild(element);\n\n      if ((nextChild === null || nextChild === void 0 ? void 0 : nextChild.type) === \"group\") {\n        nextTargets.push(nextChild.toTargetGroups());\n        return;\n      }\n\n      nextTargets.push(element);\n    });\n    return toTargetList(this.toChilds(nextTargets));\n  };\n\n  __proto.selectSameDepthChilds = function (targets, added, removed, continueSelect) {\n    var nextTargets = __spreadArray([], targets, true);\n\n    var commonParent = this.findCommonParent(nextTargets);\n    removed.forEach(function (element) {\n      // Single Target\n      var index = nextTargets.indexOf(element);\n\n      if (index > -1) {\n        // single target or group\n        nextTargets.splice(index, 1);\n        return;\n      }\n\n      var removedChild = continueSelect // Find the nearest exact child for element, all removed and nextTargets.\n      ? commonParent.findNextExactChild(element, removed, nextTargets) // Finds the nearest child for element and nextTargets.\n      : commonParent.findNextChild(element, nextTargets, true);\n\n      if (removedChild) {\n        var groupIndex = nextTargets.findIndex(function (target) {\n          return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) && removedChild.compare(target);\n        });\n\n        if (groupIndex > -1) {\n          nextTargets.splice(groupIndex, 1);\n        }\n      }\n    });\n    var addedChildren = commonParent.groupByPerfect(added);\n    addedChildren.forEach(function (child) {\n      if (child.type === \"single\") {\n        nextTargets.push(child.value);\n      } else {\n        var groupIndex = nextTargets.findIndex(function (target) {\n          return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) && child.compare(target, 1);\n        });\n\n        if (groupIndex > -1) {\n          nextTargets.splice(groupIndex, 1);\n        }\n\n        nextTargets.push(child.toTargetGroups());\n      }\n    });\n    return toTargetList(this.toChilds(nextTargets));\n  };\n\n  __proto.toChilds = function (targets) {\n    var _this = this;\n\n    var childs = [];\n    targets.forEach(function (target) {\n      if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) {\n        var arrayChild = _this.findArrayChild(target);\n\n        if (arrayChild) {\n          childs.push(arrayChild);\n        }\n      } else {\n        var single = _this.map.get(target);\n\n        if (single) {\n          childs.push(single);\n        } else {\n          childs.push(new GroupSingleChild(_this, target));\n        }\n      }\n    });\n    return childs;\n  };\n\n  __proto.toSingleChild = function (element, isAuto) {\n    var value = this.map.get(element);\n\n    if (isAuto) {\n      return value || new GroupSingleChild(this, element);\n    }\n\n    return value;\n  };\n\n  __proto.findArrayChildById = function (id) {\n    var value = null;\n    this.value.some(function find(child) {\n      if (child.type !== \"single\") {\n        if (child.id === id) {\n          value = child;\n          return true;\n        } else {\n          return child.value.some(find);\n        }\n      }\n    });\n    return value;\n  };\n\n  __proto.group = function (targets, flatten) {\n    var _this = this;\n\n    var commonParent = this.findCommonParent(targets);\n    var groupChilds = targets.map(function (target) {\n      if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) {\n        return _this.findArrayChild(target);\n      }\n\n      return _this.toSingleChild(target);\n    });\n    var isGroupable = groupChilds.every(function (child) {\n      return (child === null || child === void 0 ? void 0 : child.parent) === commonParent;\n    });\n\n    if (!isGroupable) {\n      return null;\n    }\n\n    var group = new GroupArrayChild(commonParent);\n    var nextChilds = commonParent.value.filter(function (target) {\n      return groupChilds.indexOf(target) === -1;\n    });\n    nextChilds.unshift(group);\n    group.add(flatten ? (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.deepFlat)(targets) : targets);\n    commonParent.value = nextChilds;\n    this.set(this.toTargetGroups(), this._targets);\n    return group.toTargetGroups();\n  };\n\n  __proto.ungroup = function (targets) {\n    var _this = this;\n\n    if (targets.length === 1 && (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(targets[0])) {\n      targets = targets[0];\n    }\n\n    var commonParent = this.findCommonParent(targets);\n    var groupChilds = targets.map(function (target) {\n      if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) {\n        return _this.findArrayChild(target);\n      }\n\n      return _this.toSingleChild(target);\n    });\n    var isGroupable = commonParent.value.every(function (child) {\n      return groupChilds.indexOf(child) > -1;\n    });\n\n    if (!isGroupable || commonParent === this) {\n      // has no group\n      return null;\n    }\n\n    var parent = commonParent.parent;\n\n    if (!parent) {\n      return null;\n    }\n\n    var nextChilds = parent.value.filter(function (target) {\n      return target !== commonParent;\n    });\n    nextChilds.push.apply(nextChilds, commonParent.value);\n    parent.value = nextChilds;\n    this.set(this.toTargetGroups(), this._targets);\n    return commonParent.toTargetGroups();\n  };\n\n  __proto._findParentGroup = function (element, range) {\n    if (!range.length) {\n      return this;\n    }\n\n    var single = this.map.get(element);\n\n    if (!single) {\n      return this;\n    }\n\n    var parent = single.parent;\n\n    while (parent) {\n      if (range.some(function (element) {\n        return parent.contains(element);\n      })) {\n        return parent;\n      }\n\n      parent = parent.parent;\n    }\n\n    return this;\n  };\n\n  return GroupManager;\n}(GroupArrayChild);\n\n\n//# sourceMappingURL=helper.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@moveable/helper/dist/helper.esm.js\n");

/***/ })

};
;